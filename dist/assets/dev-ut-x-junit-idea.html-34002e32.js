import{_ as a,W as t,X as p,Y as n,$ as e,a0 as i,D as o}from"./framework-f64bc974.js";const c={},l=i(`<h1 id="单元测试-idea下单元测试详解" tabindex="-1"><a class="header-anchor" href="#单元测试-idea下单元测试详解" aria-hidden="true">#</a> 单元测试 - IDEA下单元测试详解</h1><blockquote><p>工欲善其事必先利其器，我们在写单元测试一定要使用工具，这将能大幅度提升编码的效率。本文以IDEA为例，看看如何利用插件提升效率。</p></blockquote><h2 id="_1-场景准备" tabindex="-1"><a class="header-anchor" href="#_1-场景准备" aria-hidden="true">#</a> 1. 场景准备</h2><p>准备一个待测试的类, 其中还包含着错误。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>module</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * add.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">operand1</span> first param
     * <span class="token keyword">@param</span> <span class="token parameter">operand2</span> second param
     * <span class="token keyword">@return</span> sum
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> operand1<span class="token punctuation">,</span> <span class="token keyword">int</span> operand2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> operand1 <span class="token operator">+</span> operand2<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">int</span> operand1<span class="token punctuation">,</span> <span class="token keyword">int</span> operand2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> operand1 <span class="token operator">-</span> operand2<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multiple</span><span class="token punctuation">(</span><span class="token keyword">int</span> operand1<span class="token punctuation">,</span> <span class="token keyword">int</span> operand2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> operand1 <span class="token operator">*</span> operand2<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">//死循环</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> operand1<span class="token punctuation">,</span> <span class="token keyword">int</span> operand2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> operand1 <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-插件使用" tabindex="-1"><a class="header-anchor" href="#_2-插件使用" aria-hidden="true">#</a> 2. 插件使用</h2><h3 id="_2-1-自动生成单元测试" tabindex="-1"><a class="header-anchor" href="#_2-1-自动生成单元测试" aria-hidden="true">#</a> 2.1 自动生成单元测试</h3><p>第一个插件，首推的是JunitGeneratorV2.0</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210441494.png" alt="image-20220901210441494" tabindex="0" loading="lazy"><figcaption>image-20220901210441494</figcaption></figure><p>设置默认采用Junit4</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210524521.png" alt="image-20220901210524521" tabindex="0" loading="lazy"><figcaption>image-20220901210524521</figcaption></figure><p>如有必要可以设置生成的模板</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210553705.png" alt="image-20220901210553705" tabindex="0" loading="lazy"><figcaption>image-20220901210553705</figcaption></figure><p>测试下</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210619275.png" alt="image-20220901210619275" tabindex="0" loading="lazy"><figcaption>image-20220901210619275</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210637466.png" alt="image-20220901210637466" tabindex="0" loading="lazy"><figcaption>image-20220901210637466</figcaption></figure><p>生成单元测试</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210703509.png" alt="image-20220901210703509" tabindex="0" loading="lazy"><figcaption>image-20220901210703509</figcaption></figure><p>补充完整代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span>module</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Ignore</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Calculator</span> cal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@After</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cal<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span>cal<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cal<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>cal<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Ignore</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;Not yet implemented&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDivideByZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cal<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210749209.png" alt="image-20220901210749209" tabindex="0" loading="lazy"><figcaption>image-20220901210749209</figcaption></figure><h3 id="_2-2-并行测试" tabindex="-1"><a class="header-anchor" href="#_2-2-并行测试" aria-hidden="true">#</a> 2.2 并行测试</h3><p>在大量的单元测试时，如何提升测试的效率呢？肯定是并行，所以你可以用如下的插件</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210830070.png" alt="image-20220901210830070" tabindex="0" loading="lazy"><figcaption>image-20220901210830070</figcaption></figure><p>看下相关测试触发按钮和输出：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210853830.png" alt="image-20220901210853830" tabindex="0" loading="lazy"><figcaption>image-20220901210853830</figcaption></figure><h3 id="_2-3-代码覆盖率" tabindex="-1"><a class="header-anchor" href="#_2-3-代码覆盖率" aria-hidden="true">#</a> 2.3 代码覆盖率</h3><p>如何快速看本地代码测试覆盖率呢？</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210915853.png" alt="image-20220901210915853" tabindex="0" loading="lazy"><figcaption>image-20220901210915853</figcaption></figure><p>代码覆盖率</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210940253.png" alt="image-20220901210940253" tabindex="0" loading="lazy"><figcaption>image-20220901210940253</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901210954286.png" alt="image-20220901210954286" tabindex="0" loading="lazy"><figcaption>image-20220901210954286</figcaption></figure><h3 id="_2-4-profile" tabindex="-1"><a class="header-anchor" href="#_2-4-profile" aria-hidden="true">#</a> 2.4 Profile</h3><ul><li><strong>CPU Profile</strong></li></ul><p>Flame Graph</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901211027435.png" alt="image-20220901211027435" tabindex="0" loading="lazy"><figcaption>image-20220901211027435</figcaption></figure><p>Call Tree</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901211044053.png" alt="image-20220901211044053" tabindex="0" loading="lazy"><figcaption>image-20220901211044053</figcaption></figure><p>Method List</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901211101288.png" alt="image-20220901211101288" tabindex="0" loading="lazy"><figcaption>image-20220901211101288</figcaption></figure><ul><li><strong>Allocation Profile</strong></li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220901211126260.png" alt="image-20220901211126260" tabindex="0" loading="lazy"><figcaption>image-20220901211126260</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,44),u={href:"https://pdai.tech/md/develop/ut/dev-ut-x-junit-idea.html",target:"_blank",rel:"noopener noreferrer"},r=n("strong",null,"单元测试 - IDEA下单元测试详解",-1);function d(k,m){const s=o("ExternalLinkIcon");return t(),p("div",null,[l,n("p",null,[n("a",u,[r,e(s)])])])}const v=a(c,[["render",d],["__file","dev-ut-x-junit-idea.html.vue"]]);export{v as default};
