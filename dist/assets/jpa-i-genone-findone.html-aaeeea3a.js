import{_ as a,W as e,X as t,Y as n,Z as p,$ as c,a0 as o,D as l}from"./framework-f64bc974.js";const i={},u=o(`<h1 id="jpa中的getone-findone以及findbyid区别" tabindex="-1"><a class="header-anchor" href="#jpa中的getone-findone以及findbyid区别" aria-hidden="true">#</a> JPA中的getOne,findOne以及findById区别</h1><p>使用 Spring Data JPA 时，经常会看到 <code>findById</code>、<code>getOne</code>、<code>findOne</code> 三个方法。</p><p>从字面上理解，他们都是根据 ID 、或根据指定的查询条件，获取单个实体对象。</p><p>但他们的底层获取机制、返回值类型、以及抛异常的机制是不一样的，因此对应的使用场景也不一样。</p><h2 id="_1-findbyid-方法" tabindex="-1"><a class="header-anchor" href="#_1-findbyid-方法" aria-hidden="true">#</a> 1. findById 方法</h2><p><code>findById</code> 方法会立即（EAGER）访问数据库，并返回和指定 ID 关联的实体对象；如果没有找到，则返回 <code>Optional.empty()</code>。</p><p>定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Repository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>	
	<span class="token doc-comment comment">/**
	 * Retrieves an entity by its id.
	 *
	 * <span class="token keyword">@param</span> <span class="token parameter">id</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the entity with the given id or <span class="token punctuation">{</span><span class="token keyword">@literal</span> Optional#empty()<span class="token punctuation">}</span> if none found.
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if <span class="token punctuation">{</span><span class="token keyword">@literal</span> id<span class="token punctuation">}</span> is <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 */</span>
	<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-getone-方法" tabindex="-1"><a class="header-anchor" href="#_2-getone-方法" aria-hidden="true">#</a> 2. getOne 方法</h2><p><code>getOne</code> 是一个延迟加载方法，<strong>它并不立即访问数据库</strong>，而是返回一个代理（<code>proxy</code>）对象，这个代理对象是对实体对象的引用，仅在 <strong>使用代理对象访问对象属性时才会去真正访问数据库</strong> ，如果找不到，则抛出 <code>EntityNotFoundException</code>。</p><p>定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">PagingAndSortingRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> ID<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">QueryByExampleExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * Returns a reference to the entity with the given identifier. Depending on how the JPA persistence provider is
	 * implemented this is very likely to always return an instance and throw an
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">EntityNotFoundException</span></span><span class="token punctuation">}</span> on first access. Some of them will reject invalid identifiers
	 * immediately.
	 *
	 * <span class="token keyword">@param</span> <span class="token parameter">id</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> a reference to the entity with the given identifier.
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">EntityManager</span><span class="token punctuation">#</span><span class="token function">getReference</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">)</span></span> for details on when an exception is thrown.
	 */</span>
	<span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">ID</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-findone-方法" tabindex="-1"><a class="header-anchor" href="#_3-findone-方法" aria-hidden="true">#</a> 3. findOne 方法</h2><p>除了 <code>findById</code>、<code>getOne</code> 外，Spring Data JPA 还提供了两个 <code>findOne</code> 方法：</p><ul><li><code>Optional findOne(@Nullable Specification spec)</code></li><li><code> Optional findOne(Example example)</code></li></ul><p>这两个方法用于需要动态构建多条件查询的场景中，它们都是立即访问数据库的。</p><p>定义如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QueryByExampleExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
	 * Returns a single entity matching the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Example</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span> if none was found.
	 *
	 * <span class="token keyword">@param</span> <span class="token parameter">example</span> must not be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> a single entity matching the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Example</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Optional</span><span class="token punctuation">#</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> if none was found.
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">IncorrectResultSizeDataAccessException</span></span> if the Example yields more than one result.
	 */</span>
	<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> example<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token doc-comment comment">/**
	 * Returns a single entity matching the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Specification</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Optional</span><span class="token punctuation">#</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span> if none found.
	 *
	 * <span class="token keyword">@param</span> <span class="token parameter">spec</span> can be <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> never <span class="token punctuation">{</span><span class="token keyword">@literal</span> null<span class="token punctuation">}</span>.
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span><span class="token class-name">IncorrectResultSizeDataAccessException</span></span> if more than one entity found.
	 */</span>
	<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回类型为 <code>Optional</code> ，如果没有检索到，返回 <code>Optional.empty()</code>，结果满足条件的记录条数超过一条，则抛出 <code>IncorrectResultSizeDataAccessException</code></p><h2 id="_4-如何选择" tabindex="-1"><a class="header-anchor" href="#_4-如何选择" aria-hidden="true">#</a> 4. 如何选择</h2><p>从上面的描述可以看出：它们主要的区别在于 <strong>加载时期</strong> 及 <strong>是否支持动态构建查询条件</strong> 的不同。</p><h3 id="_4-1、多条件查询的场景中-可使用-findone" tabindex="-1"><a class="header-anchor" href="#_4-1、多条件查询的场景中-可使用-findone" aria-hidden="true">#</a> 4.1、多条件查询的场景中，可使用 findOne</h3><p>例如，根据 <code>openId</code> 以及 <code>state</code> 查询指定的用户：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span>
        postRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span>root<span class="token punctuation">,</span> query<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
                cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;openId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;state&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者使用 <code>findOne(Example example)</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
u<span class="token punctuation">.</span><span class="token function">setOpenId</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
u<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> postRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上两种写法是等效的，执行的 SQL 如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hibernate: select user0_.id as id1_0_, user0_.created_at as created_2_0_, user0_.open_id as open_id3_0_, user0_.state as state4_0_ from t_users user0_ where user0_.open_id=? and user0_.state=1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-2-按-id-检索的场景中-使用-findbyid-或-getone" tabindex="-1"><a class="header-anchor" href="#_4-2-按-id-检索的场景中-使用-findbyid-或-getone" aria-hidden="true">#</a> 4.2 按 ID 检索的场景中，使用 findById 或 getOne</h2><p>前面已经描述过，<code>findById</code> 和 <code>getOne</code> 的最大的区别是加载时期的不同。</p><p>因此：</p><p>1、在需要延迟加载时，选择 <code>getOne</code></p><p>2、不需要延迟加载时，选择 <code>findById</code></p><p>当然了，<code>findOne</code> 也可以根据 ID 进行查询，但是写法累赘、且晦涩不易读，不要那样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> user <span class="token operator">=</span> postRepository<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> query<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="_5、总结" tabindex="-1"><a class="header-anchor" href="#_5、总结" aria-hidden="true">#</a> 5、总结</h1><p>1、<code>getOne</code> 是延迟加载；而 <code>findById</code>、<code>findOne</code> 是立即加载。</p><p>2、 <code>getOne</code> 如果找不到记录会抛出<code>EntityNotFoundException</code>；而 <code>findById</code>、<code>findOne</code> 会返回 <code>Optional.empty()</code>。</p><p>3、 在 <code>@ManyToOne</code> 的场景中使用 <code>findOne</code> ，可以获得延迟加载机制带来的性能优势。</p><p>4、 在根据非 <code>ID</code> 查询、或动态查询的场景中，使用 <code>findOne</code>。</p><p>5、 <code>findOne</code> 查询结果不能返回超过一条，否则会抛出 <code>IncorrectResultSizeDataAccessException</code>。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,42),d={href:"https://www.cnblogs.com/ktgu/p/13772236.html",target:"_blank",rel:"noopener noreferrer"};function r(k,m){const s=l("ExternalLinkIcon");return e(),t("div",null,[u,n("p",null,[n("a",d,[p("Spring Data JPA 中 findById、getOne、findOne 的区别"),c(s)])])])}const g=a(i,[["render",r],["__file","jpa-i-genone-findone.html.vue"]]);export{g as default};
