import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,D as l}from"./framework-f64bc974.js";const u={},i=e(`<h1 id="spring-data-mongodb的query查询" tabindex="-1"><a class="header-anchor" href="#spring-data-mongodb的query查询" aria-hidden="true">#</a> spring-data-mongodb的Query查询</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>spring-data-mongodb 的查询方法定义的两种方式</p><ol><li>根据方法名来自动推测</li><li>自定义查询（复杂场景）</li></ol><h2 id="_2-query注解" tabindex="-1"><a class="header-anchor" href="#_2-query注解" aria-hidden="true">#</a> 2. @Query注解</h2><h3 id="_2-1-基础查询" tabindex="-1"><a class="header-anchor" href="#_2-1-基础查询" aria-hidden="true">#</a> 2.1 基础查询</h3><p>Mongodb使用的是基于json的查询语句。</p><p>通过将org.springframework.data.mongodb.repository.Query批注添加到存储库查询方法，可以指定要使用的MongoDB JSON查询字符串，而不是从方法名称派生查询，如以下示例所示：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> PersonRepository extends MongoRepository<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> String<span class="token operator">&gt;</span>

  <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;{ &#39;firstname&#39; : ?0 }&quot;</span></span><span class="token punctuation">)</span>
  List<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">findByThePersonsFirstname</span><span class="token punctuation">(</span>String firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>占位符 ?0 是函数的参数。</strong></p><blockquote><p>注意： String类型的参数在绑定过程中会进行转义， 这意味着不能为之添加特殊的参数。</p></blockquote><h3 id="_2-2-设置返回的字段" tabindex="-1"><a class="header-anchor" href="#_2-2-设置返回的字段" aria-hidden="true">#</a> 2.2 设置返回的字段</h3><p>使用fields来设置返回的字段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;{ &#39;firstname&#39; : ?0 }&quot;</span><span class="token punctuation">,</span> fields<span class="token operator">=</span><span class="token string">&quot;{ &#39;firstname&#39; : 1, &#39;lastname&#39; : 1}&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByThePersonsFirstname</span><span class="token punctuation">(</span><span class="token class-name">String</span> firstname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中结果Person对象中只会有firstname、lastname 和id 属性 ， 其他属性没有 。</p><h3 id="_2-3-spel表达式" tabindex="-1"><a class="header-anchor" href="#_2-3-spel表达式" aria-hidden="true">#</a> 2.3 SpEL表达式</h3><p>在基于json的查询中使用SpEL表达式</p><p>查询串和field返回定义可以使用SpEL表达式 在运行时进行动态创建 。 表达式通过包含所有参数的数组公开方法参数。 以下查询使用[0]声明lastname的谓词值（相当于?0参数绑定）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonRepository</span> <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>

  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;{&#39;lastname&#39;: ?#{[0]} }&quot;</span><span class="token punctuation">)</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByQueryWithExpression</span><span class="token punctuation">(</span><span class="token class-name">String</span> param0<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-参数为对象" tabindex="-1"><a class="header-anchor" href="#_2-4-参数为对象" aria-hidden="true">#</a> 2.4 参数为对象</h3><p>当传入参数为对象时， 实例：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code>    @<span class="token function">Query</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">=</span><span class="token string">&quot;{&#39;name&#39;: ?#{ [0].name }}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token return-type class-name">Page<span class="token punctuation">&lt;</span>RcControllJournalDo<span class="token punctuation">&gt;</span></span> <span class="token function">querylikepages</span><span class="token punctuation">(</span><span class="token class-name">RcControllJournalDo</span> mdo<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,22),r={href:"http://mdo.name",target:"_blank",rel:"noopener noreferrer"},k=e(`<h3 id="_2-5-三目表达式" tabindex="-1"><a class="header-anchor" href="#_2-5-三目表达式" aria-hidden="true">#</a> 2.5 三目表达式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 当mdo.name为空时， 查询条件为  <span class="token punctuation">{</span> &quot;name&quot; : <span class="token punctuation">{</span> &quot;$exists&quot; : true <span class="token punctuation">}</span> <span class="token punctuation">}</span> ，即查询所有name列存在的记录（包括值为null的记录，但是对于没有name列的查询不到） ；
     * 当mdo.name不空时，查询条件为   <span class="token punctuation">{</span> &quot;name&quot; : [0].name <span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot; { &#39;name&#39;: ?#{ ([0].name == null) or ([0].name.length() == 0)  ? &#39;{$exists:true}&#39; : [0].name } } &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RcControllJournalDo</span><span class="token punctuation">&gt;</span></span> <span class="token function">querylikepages2</span><span class="token punctuation">(</span><span class="token class-name">RcControllJournalDo</span> mdo<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>#{ ([0].name == null) or ([0].name.length() == 0) ? &#39;{$exists:true}&#39; : [0].name }</code> 为SpEL表达式 （三目表达式）。</p><h3 id="_2-6-模糊查询例子" tabindex="-1"><a class="header-anchor" href="#_2-6-模糊查询例子" aria-hidden="true">#</a> 2.6 模糊查询例子：</h3><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token comment">/**
     * 使用正则表达式模糊查询 
     */</span>
    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">&quot; { &#39;idno&#39;: ?#{ ([0].name == null) or ([0].name.length() == 0)  ? {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">exists</span></span><span class="token string">:true} : {</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">regex</span></span><span class="token string">: [0].name } } } &quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Page<span class="token operator">&lt;</span>RcControllJournalDo<span class="token operator">&gt;</span> <span class="token function">querylikepages21</span><span class="token punctuation">(</span>RcControllJournalDo mdo<span class="token punctuation">,</span> Pageable pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mongodb的正则表达式查询语法为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">&gt;db.posts.find(</span><span class="token punctuation">{</span><span class="token selector">post_text:</span><span class="token punctuation">{</span>$<span class="token property">regex</span><span class="token punctuation">:</span><span class="token string">&quot;runoob&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">)
&gt;db.posts.find(</span><span class="token punctuation">{</span><span class="token selector">post_text:</span><span class="token punctuation">{</span>$<span class="token property">regex</span><span class="token punctuation">:</span><span class="token string">&quot;runoob&quot;</span><span class="token punctuation">,</span>$<span class="token property">options</span><span class="token punctuation">:</span><span class="token string">&quot;$i&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例子： 根据前端上送的查询条件模糊匹配name 和idno ， 当有值时查询之，无则查询所有：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 模糊查询name 和 idno  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
     * 1. mongodb or语法  ：<span class="token punctuation">{</span> $or :[<span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token punctuation">}</span>,...] <span class="token punctuation">}</span>  例子： <span class="token punctuation">{</span>$or:[<span class="token punctuation">{</span>&quot;by&quot;:&quot;aaa&quot;<span class="token punctuation">}</span> , <span class="token punctuation">{</span>&quot;title&quot;: &quot;bbb&quot;<span class="token punctuation">}</span>]<span class="token punctuation">}</span>  ， 即 where by=aaa or title=bbb <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">&gt;</span></span>
     * 2. <span class="token punctuation">{</span> $or :[<span class="token punctuation">{</span>&#39;name&#39; : ?#<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>&#39;idno&#39; : ?#<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>] <span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>
     * 
     */</span>
    <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot; { $or :[{&#39;name&#39; : ?#{ ([0].name == null) or ([0].name.length() == 0)  ? &#39;{$exists:true}&#39; :  {$regex:[0].name} }},&quot;</span>
            <span class="token operator">+</span> <span class="token string">&quot; {&#39;idno&#39; : ?#{ ([0].idno == null) or ([0].idno.length() == 0)  ? &#39;{$exists:true}&#39; : {$regex: [0].idno} }}] } &quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RcControllJournalDo</span><span class="token punctuation">&gt;</span></span> <span class="token function">querylikepages3</span><span class="token punctuation">(</span><span class="token class-name">RcControllJournalDo</span> mdo<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入参数： mdo.setName(&quot;宋&quot;); mdo.setIdno(&quot;112&quot;); 打印的日志为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>find using query: { &quot;$or&quot; : [{ &quot;name&quot; : { &quot;$regex&quot; : &quot;宋&quot; } }, { &quot;idno&quot; : { &quot;$regex&quot; : &quot;112&quot; } }] }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-自定义查询-复杂场景" tabindex="-1"><a class="header-anchor" href="#_3-自定义查询-复杂场景" aria-hidden="true">#</a> 3. 自定义查询（复杂场景）</h2><ol><li>创建接口</li><li>创建实现类 （命名与接口名一致，且以Impl结尾）</li><li>在实现类中实现方法， 可以使用MongoTemplate 或 其他数据源的模板</li><li>直接使用repo调用即可。</li></ol><p>下面着重介绍使用Query 、Criteria 来创建查询条件 并使用分页：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RcControllJournalDo</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectSearchNameIdno</span><span class="token punctuation">(</span><span class="token class-name">RcControllJournalDo</span> mdo<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;开始搜风控流水，使用姓名和身份证号模糊匹配：&quot;</span> <span class="token operator">+</span> mdo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>mdo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>mdo<span class="token punctuation">.</span><span class="token function">getIdno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orOperator</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span>mdo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                    <span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;idno&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span>mdo<span class="token punctuation">.</span><span class="token function">getIdno</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 分页 和 排序 </span>
        query<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        query<span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Direction</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">,</span> <span class="token string">&quot;dateTm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">long</span> totoal <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token class-name">RcControllJournalDo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;查询统计总条数 :&quot;</span> <span class="token operator">+</span> totoal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;分页参数：&quot;</span> <span class="token operator">+</span> pageable<span class="token punctuation">.</span><span class="token function">getPageNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;;&quot;</span> <span class="token operator">+</span> pageable<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RcControllJournalDo</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>query <span class="token punctuation">,</span> <span class="token class-name">RcControllJournalDo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;查询结束：&quot;</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PageImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RcControllJournalDo</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> pageable<span class="token punctuation">,</span> totoal<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点是， 总条数需要主动查询 。 query内部会根据上送的分页条件，综合使用skip 、limit 来实现分页效果。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,17),d={href:"https://www.jianshu.com/p/24a44c4c7651",target:"_blank",rel:"noopener noreferrer"};function m(g,v){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("上例等价于 where name = "),n("a",r,[s("mdo.name"),t(a)]),s(" .")]),k,n("p",null,[n("a",d,[s("spring data mongodb Query 及分页"),t(a)])])])}const h=p(u,[["render",m],["__file","mongodb-action-query.html.vue"]]);export{h as default};
