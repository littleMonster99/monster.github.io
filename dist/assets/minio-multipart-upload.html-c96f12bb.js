import{_ as n,W as s,X as a,a0 as t}from"./framework-f64bc974.js";const p={},e=t(`<h1 id="minio进阶-minio分片上传文件putobject接口流程源码分析" tabindex="-1"><a class="header-anchor" href="#minio进阶-minio分片上传文件putobject接口流程源码分析" aria-hidden="true">#</a> Minio进阶 - Minio分片上传文件putObject接口流程源码分析</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>为了更好的理解和优化Minio文件上传，本篇文档对MInio中上传文件putObject接口源码分析以下。</p><p>基于Java 客户端 API</p><p>Controller层上传文件接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> minioTemplate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>MinioTemplate接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>
                <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>uuidFileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>
                        inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-源码分析" tabindex="-1"><a class="header-anchor" href="#_2-源码分析" aria-hidden="true">#</a> 2. 源码分析</h2><h3 id="_2-1-进入controller层接口" tabindex="-1"><a class="header-anchor" href="#_2-1-进入controller层接口" aria-hidden="true">#</a> 2.1 进入Controller层接口</h3><p>首先我在页面上上传了一个9M左右的文件：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724200722531.png" alt="image-20220724200722531" tabindex="0" loading="lazy"><figcaption>image-20220724200722531</figcaption></figure><p>文件上传，经过Tomcat服务器进行处理，然后到达我们的Controller层上传文件接口，我们使用的是MultipartFile 对象来接受文件，可以看到当前MultipartFile 对象存放了文件相关信息，而此时实际的文件是由Tomcat存放在硬盘临时目录的。</p><p>MultipartFile实际的对象是StandardMultipartHttpServletRequest的实例，他包含了ApplicationPart对象，ApplicationPart包含了图片中的文件信息。 <img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724200830484.png" alt="image-20220724200830484" loading="lazy"></p><p>接收到对象后，调用的就是MinioTemplate，这里传入了各种参数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>minioTemplate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最重要的是传入了一个InputStream，调用的是MultipartFile 对象的getInputStream()方法。</p><p>getInputStream获取输入流，是调用ApplicationPart中的DiskFileItem对象的getInputStream()方法。这个方法会将临时文件，直接转为FileInputStream并返回。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 直接将临时文件转为输入流</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dfos<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedContent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>cachedContent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dfos<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cachedContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-构建参数对象putobjectargs-参数校验-分片" tabindex="-1"><a class="header-anchor" href="#_2-2-构建参数对象putobjectargs-参数校验-分片" aria-hidden="true">#</a> 2.2 构建参数对象PutObjectArgs（参数校验，分片）</h3><p>InputStream获取到了以后，接着就是调用MinioTemplate中的putObject方法了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>     minioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>
             <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>uuidFileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>
                     inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>putObject方法实际调用的就是 MinioClient的putObject，调用之前会创建PutObjectArgs参数对象，使用的是建造者模式。</p><p>PutObjectArgs首先会对存储桶名称进行校验，所以创建存储桶名称时，要格外注意。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">validateBucketName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 非空校验</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateNotNull</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;bucket name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 1. 校验长度，3-63之间</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
            <span class="token comment">// 2. 不能包含“..”</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                msg <span class="token operator">=</span> <span class="token string">&quot;bucket name cannot contain successive periods. For more information refer http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 3. 正则校验</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-z0-9][a-z0-9\\\\.\\\\-]+[a-z0-9]$&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                msg <span class="token operator">=</span> <span class="token string">&quot;bucket name does not follow Amazon S3 standards. For more information refer http://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; : &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; : bucket name must be at least 3 and no more than 63 characters long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后对对象名称进行校验：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">validateObjectName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 1. 非空和Null校验</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateNotEmptyString</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;object name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var2 <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 按照反斜杠分割为字符串数组</span>
        <span class="token keyword">int</span> var3 <span class="token operator">=</span> var2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
		<span class="token comment">//  2. 循环字符串数组，校验每个斜杠分割的字段不能是“.”或者“..”</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var4 <span class="token operator">&lt;</span> var3<span class="token punctuation">;</span> <span class="token operator">++</span>var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> token <span class="token operator">=</span> var2<span class="token punctuation">[</span>var4<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;..&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;object name with &#39;.&#39; or &#39;..&#39; path segment is not supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后对InputStream进行构建。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">PutObjectArgs<span class="token punctuation">.</span>Builder</span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> stream<span class="token punctuation">,</span> <span class="token keyword">long</span> objectSize<span class="token punctuation">,</span> <span class="token keyword">long</span> partSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>			
        <span class="token comment">// 1. 非空</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateNotNull</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token string">&quot;stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 获取分片数，5M分割</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> partinfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPartInfo</span><span class="token punctuation">(</span>objectSize<span class="token punctuation">,</span> partSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> pSize <span class="token operator">=</span> partinfo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分片大小 5M=5242880字节</span>
        <span class="token keyword">int</span> pCount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>partinfo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 分片数，这里上传的9m文件，所以有两片</span>
        <span class="token comment">// 3. 将FileInputStream=》BufferedInputStream</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> stream <span class="token keyword">instanceof</span> <span class="token class-name">BufferedInputStream</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">)</span>stream <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4. 将这些参数添加到PutObjectArgs对象中</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">,</span> objectSize<span class="token punctuation">,</span> pSize<span class="token punctuation">,</span> pCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在构建InputStream时，会进行分片操作，我们可以了解到上传文件大小的一些限制：</p><ul><li>分片大小不能小于5MB，大于5GB</li><li>对象大小不能超过5TiB</li><li>partSize传入-1，默认按照5MB进行分割</li><li>分片数量不能超过10000</li></ul><p>分片规则如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token comment">// 参数为 文件大小objectSize、分片大小partSize，分片数我们传入的是-1，表示使用默认配置</span>
    <span class="token keyword">protected</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPartInfo</span><span class="token punctuation">(</span><span class="token keyword">long</span> objectSize<span class="token punctuation">,</span> <span class="token keyword">long</span> partSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 1. 校验大小，如果设置的分片大小 小于5M或者大于5GB，报错不支持</span>
    	<span class="token comment">//  对象大小超过5TiB，报错不支持</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateSizes</span><span class="token punctuation">(</span>objectSize<span class="token punctuation">,</span> partSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>objectSize <span class="token operator">&lt;</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>partSize<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 2. 没有设置分片数据大小，怎按照默认的5M进行分割</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>partSize <span class="token operator">&lt;=</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">double</span> dPartSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>objectSize <span class="token operator">/</span> <span class="token number">10000.0D</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                dPartSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>dPartSize <span class="token operator">/</span> <span class="token number">5242880.0D</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5242880.0D</span><span class="token punctuation">;</span>
                partSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>dPartSize<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>partSize <span class="token operator">&gt;</span> objectSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                partSize <span class="token operator">=</span> objectSize<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">long</span> partCount <span class="token operator">=</span> partSize <span class="token operator">&gt;</span> <span class="token number">0L</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>objectSize <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>partSize<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1L</span><span class="token punctuation">;</span>
            <span class="token comment">// 3. 分片数量不能超过10000</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>partCount <span class="token operator">&gt;</span> <span class="token number">10000L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;object size &quot;</span> <span class="token operator">+</span> objectSize <span class="token operator">+</span> <span class="token string">&quot; and part size &quot;</span> <span class="token operator">+</span> partSize <span class="token operator">+</span> <span class="token string">&quot; make more than &quot;</span> <span class="token operator">+</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token string">&quot;parts for upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            	<span class="token comment">// 4. 返回一个数组，第一个值为分片数据大小，第二个为分片数量</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>partSize<span class="token punctuation">,</span> partCount<span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终构建的PutObjectArgs对象如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724201355357.png" alt="image-20220724201355357" tabindex="0" loading="lazy"><figcaption>image-20220724201355357</figcaption></figure><p>该对象包含了文件流、对象名、分片信息等重要数据。</p><h3 id="_2-3-进入minioclient-上传分片、合并" tabindex="-1"><a class="header-anchor" href="#_2-3-进入minioclient-上传分片、合并" aria-hidden="true">#</a> 2.3 进入MinioClient（上传分片、合并）</h3><p>接着进入到MinioClient的putObject方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">PutObjectArgs</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span> <span class="token punctuation">{</span>
 	<span class="token comment">// 1. 检查参数是否为Null</span>
     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 2. 校验是否开启了SSE加密，如果开启了SSE，而不是Https请求则报错</span>
     args<span class="token punctuation">.</span><span class="token function">validateSse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 3. 执行上传文件</span>
     <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">objectSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">partSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">partCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用重载的putObject方法，会进行分块创建=》分块上传=》合并文件流程操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">PutObjectBaseArgs</span> args<span class="token punctuation">,</span> <span class="token class-name">Object</span> data<span class="token punctuation">,</span> <span class="token keyword">long</span> objectSize<span class="token punctuation">,</span> <span class="token keyword">long</span> partSize<span class="token punctuation">,</span> <span class="token keyword">int</span> partCount<span class="token punctuation">,</span> <span class="token class-name">String</span> contentType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span> <span class="token punctuation">{</span>
	<span class="token comment">// 1.设置消息头</span>
    <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newMultimap</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">extraHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">genHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2. 设置 Content-Type</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> uploadId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 3. 创建块读取对象</span>
    <span class="token class-name">PartReader</span> partReader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newPartReader</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> objectSize<span class="token punctuation">,</span> partSize<span class="token punctuation">,</span> partCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>partReader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;data must be RandomAccessFile or InputStream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            	<span class="token comment">// 4. 分块操作，并返回块对象</span>
                <span class="token class-name">PartSource</span> partSource <span class="token operator">=</span> partReader<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>baseUrl<span class="token punctuation">.</span><span class="token function">isHttps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>partSource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	<span class="token comment">// 没有分片时，表示分片全部上传成功，执行合并文件操作。</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
				<span class="token comment">// 5. 如果对象只有一块，也就是5MB之内，执行上传</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>partReader<span class="token punctuation">.</span><span class="token function">partCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partSource<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">extraQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
				
                <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	<span class="token comment">// 6. 执行分块上传请求，返回uploadId</span>
                    <span class="token class-name">CreateMultipartUploadResponse</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createMultipartUpload</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">extraQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    uploadId <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ssecHeaders <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">sse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span><span class="token function">sse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ServerSideEncryptionCustomerKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    ssecHeaders <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">sse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
				<span class="token comment">// 7. 根据创建的请求，正式执行上传分片的操作</span>
                <span class="token keyword">int</span> partNumber <span class="token operator">=</span> partSource<span class="token punctuation">.</span><span class="token function">partNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">UploadPartResponse</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">uploadPart</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> partSource<span class="token punctuation">,</span> partNumber<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> ssecHeaders <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">Multimaps</span><span class="token punctuation">.</span><span class="token function">forMap</span><span class="token punctuation">(</span>ssecHeaders<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> etag <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">etag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                parts<span class="token punctuation">[</span>partNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Part</span><span class="token punctuation">(</span>partNumber<span class="token punctuation">,</span> etag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> var18<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">abortMultipartUpload</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">throw</span> var18<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> var19<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">abortMultipartUpload</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">region</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Multimap</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">throw</span> var19<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-创建分片" tabindex="-1"><a class="header-anchor" href="#_2-4-创建分片" aria-hidden="true">#</a> 2.4 创建分片</h3><p>putObject方法首先会创建PartReader 块读取对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token class-name">PartReader</span> <span class="token function">newPartReader</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">,</span> <span class="token keyword">long</span> objectSize<span class="token punctuation">,</span> <span class="token keyword">long</span> partSize<span class="token punctuation">,</span> <span class="token keyword">int</span> partCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>		
 	<span class="token comment">// 1. 如果是RandomAccessFile（RandomAccessFile允许自由定义文件记录指针，</span>
 	<span class="token comment">// RandomAccessFile可以不从开始的地方开始输出，因此RandomAccessFile可以向已存在的文件后追加内容。）</span>
 	<span class="token comment">// 创建RandomAccessFile类型的PartReader </span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PartReader</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> objectSize<span class="token punctuation">,</span> partSize<span class="token punctuation">,</span> partCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
     	<span class="token comment">// 2. 创建不同输入流的PartReader 对象</span>
         <span class="token keyword">return</span> data <span class="token keyword">instanceof</span> <span class="token class-name">InputStream</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">PartReader</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> objectSize<span class="token punctuation">,</span> partSize<span class="token punctuation">,</span> partCount<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PartReader 包含了文件数据流及分片信息。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724201815010.png" alt="image-20220724201815010" tabindex="0" loading="lazy"><figcaption>image-20220724201815010</figcaption></figure><p>接着进入一个死循环，PartReader 会获取PartSource块对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">PartSource</span> <span class="token function">getPart</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> computeSha256<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>partNumber <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>partCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 1. 获取分片，从第一个开始获取</span>
            <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>partNumber<span class="token punctuation">;</span>
            <span class="token class-name">MessageDigest</span> md5 <span class="token operator">=</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;MD5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MD5 加密对象</span>
            <span class="token class-name">MessageDigest</span> sha256 <span class="token operator">=</span> computeSha256 <span class="token operator">?</span> <span class="token class-name">MessageDigest</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">&quot;SHA-256&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// SHA-256加密对象</span>
            <span class="token keyword">long</span> partSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>partSize<span class="token punctuation">;</span> <span class="token comment">// 分片大小 5MB</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>partNumber <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>partCount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 判断当前分片是不是最后一个分片</span>
                partSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>objectSize <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalDataRead<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
			<span class="token comment">// 2. 使用算法读取分块数据</span>
            <span class="token keyword">long</span> bytesRead <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>partSize<span class="token punctuation">,</span> md5<span class="token punctuation">,</span> sha256<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>totalDataRead <span class="token operator">+=</span> bytesRead<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objectSize <span class="token operator">&lt;</span> <span class="token number">0L</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eof<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>partCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>partNumber<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
			<span class="token comment">// 3. 加密</span>
            <span class="token class-name">String</span> md5Hash <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>md5<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> sha256Hash <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>computeSha256<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sha256Hash <span class="token operator">=</span> <span class="token class-name">BaseEncoding</span><span class="token punctuation">.</span><span class="token function">base16</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sha256<span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
			<span class="token comment">// 4. 返回PartSource对象</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>file <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">PartSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>partNumber<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>file<span class="token punctuation">,</span> bytesRead<span class="token punctuation">,</span> md5Hash<span class="token punctuation">,</span> sha256Hash<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">PartSource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>partNumber<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffers<span class="token punctuation">,</span> bytesRead<span class="token punctuation">,</span> md5Hash<span class="token punctuation">,</span> sha256Hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个PartSource对象，就对应一个块对象，其中包含了块数据和加密返回的签名。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724201918590.png" alt="image-20220724201918590" tabindex="0" loading="lazy"><figcaption>image-20220724201918590</figcaption></figure><h3 id="_2-5-创建分片请求-获取uploadid" tabindex="-1"><a class="header-anchor" href="#_2-5-创建分片请求-获取uploadid" aria-hidden="true">#</a> 2.5. 创建分片请求（获取uploadId）</h3><p>createMultipartUpload方法会创建分块请求，根据对象名和存储桶名去Minio获取上传当前对象的uploadId。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">CreateMultipartUploadResponse</span> <span class="token function">createMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
    	<span class="token comment">// 构建请求参数</span>
        <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newMultimap</span><span class="token punctuation">(</span>extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;uploads&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headersCopy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">newMultimap</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headersCopy<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            headersCopy<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token comment">// 执行HTTP请求</span>
        <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token constant">POST</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRegion</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">httpHeaders</span><span class="token punctuation">(</span>headersCopy<span class="token punctuation">)</span><span class="token punctuation">,</span> queryParams<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Throwable</span> var9 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token class-name">CreateMultipartUploadResponse</span> var11<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
        	<span class="token comment">// 解析返回结果</span>
            <span class="token class-name">InitiateMultipartUploadResult</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InitiateMultipartUploadResult</span><span class="token punctuation">)</span><span class="token class-name">Xml</span><span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span><span class="token class-name">InitiateMultipartUploadResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            var11 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateMultipartUploadResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uploadId在循环中使用的都是同一个，说明分片上传的时候都会使用同一个uploadId，最后合并同一个uploadId的文件。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724202032288.png" alt="image-20220724202032288" tabindex="0" loading="lazy"><figcaption>image-20220724202032288</figcaption></figure><h3 id="_2-6-上传分片" tabindex="-1"><a class="header-anchor" href="#_2-6-上传分片" aria-hidden="true">#</a> 2.6 上传分片</h3><p>获取到了uploadId以后，就会执行上传操作，调用uploadPart方法，uploadPart最终也是调用execute，可以看到该方法，是调用的OkHttpClient 去执行的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">Response</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">Headers</span> headers<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParamMap<span class="token punctuation">,</span> <span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">XmlParserException</span> <span class="token punctuation">{</span>
    	<span class="token comment">//......</span>
        <span class="token comment">// 构建URL ：http://127.0.0.1:9000/pearl-buckent/files/2021-10-26/d9e9d6fc-73fc-4323-b317-b8b26b6b6fe0_apache-maven-3.6.2-bin.zip?uploadId=70174335-85ec-47c6-acaf-afa12c8add48&amp;partNumber=2</span>
        <span class="token class-name">HttpUrl</span> url <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildUrl</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> queryParamMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 省略构建其他对象</span>
        <span class="token comment">// 调用 httpClient执行上传文件</span>
        <span class="token class-name">Response</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 处理响应，异常处理等。</span>
        <span class="token class-name">ResponseBody</span> responseBody<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           
 					<span class="token comment">// 省略大量代码.....</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-7-合并文件" tabindex="-1"><a class="header-anchor" href="#_2-7-合并文件" aria-hidden="true">#</a> 2.7 合并文件</h3><p>分片的数据都上传后，进入到completeMultipartUpload方法，在这个方法执行之前，在Minio控制台是看不到上传对象的。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724202212381.png" alt="image-20220724202212381" tabindex="0" loading="lazy"><figcaption>image-20220724202212381</figcaption></figure><p>这个方法传入了文件对象名，uploadID等，</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724202251788.png" alt="image-20220724202251788" tabindex="0" loading="lazy"><figcaption>image-20220724202251788</figcaption></figure><p>该方法最终也是执行的execute，使用httpclient去调用的Minio服务器合并分片，最后完成了分片上传操作。之后Tomcat回调，完成清理临时文件等操作，最后返回信息给前端，也对应了整个Servlet请求响应的整个流程。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724202351886.png" alt="image-20220724202351886" tabindex="0" loading="lazy"><figcaption>image-20220724202351886</figcaption></figure><h2 id="_3-简单流程图" tabindex="-1"><a class="header-anchor" href="#_3-简单流程图" aria-hidden="true">#</a> 3. 简单流程图</h2><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724202421408.png" alt="image-20220724202421408" tabindex="0" loading="lazy"><figcaption>image-20220724202421408</figcaption></figure>`,67),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","minio-multipart-upload.html.vue"]]);export{k as default};
