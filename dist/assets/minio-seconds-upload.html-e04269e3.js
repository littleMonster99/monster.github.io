import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,D as l}from"./framework-f64bc974.js";const i={},u=p(`<h1 id="minio进阶-minio秒传" tabindex="-1"><a class="header-anchor" href="#minio进阶-minio秒传" aria-hidden="true">#</a> Minio进阶 - Minio秒传</h1><h2 id="_1-md5秒传" tabindex="-1"><a class="header-anchor" href="#_1-md5秒传" aria-hidden="true">#</a> 1. MD5秒传</h2><h3 id="_1-1-摘要算法" tabindex="-1"><a class="header-anchor" href="#_1-1-摘要算法" aria-hidden="true">#</a> 1.1 摘要算法</h3><p>摘要算法是一种能产生特殊输出格式的算法，这种算法的特点是：无论用户输入什么长度的原始数据，经过计算后输出的密文都是固定长度的，这种算法的原理是根据一定的运算规则对原数据进行某种形式的提取，这种提取就是摘要，被摘要的数据内容与原数据有密切联系，只要原数据稍有改变，输出的“摘要”便完全不同，因此，基于这种原理的算法便能对数据完整性提供较为健全的保障。</p><p>但是，由于输出的密文是提取原数据经过处理的定长值，所以它已经不能还原为原数据，即消息摘要算法是不可逆的，理论上无法通过反向运算取得原数据内容，因此它通常只能被用来做数据完整性验证。</p><p>摘要算法:</p><ul><li>MD2</li><li>MD5</li><li>SHA-1</li><li>SHA-256</li><li>SHA-384</li><li>SHA-512</li></ul><h3 id="_1-2-md5加密" tabindex="-1"><a class="header-anchor" href="#_1-2-md5加密" aria-hidden="true">#</a> 1.2 MD5加密</h3><p>MD5即Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。</p><p>任意长度的数据经过MD5加密后得到的值的长度都是固定的，并且对原数据修改一个字符对于加密后的值都有很大的变动。</p><p>比如使用hutool工具类对字符串进行加密：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Digester</span> md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token class-name">DigestAlgorithm</span><span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> digestHex <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">digestHex</span><span class="token punctuation">(</span><span class="token string">&quot;testStr&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>digestHex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 32e3f38e0012b78faf9b7d1adb34cb48</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以对文件进行加密：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Digester</span> md5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token class-name">DigestAlgorithm</span><span class="token punctuation">.</span><span class="token constant">MD5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;F:\\\\AuthUser.java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> digestHex <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">digestHex</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>digestHex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 835bb25fab66d6fc70ea497f49363194</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：MD5是一种摘要加密算法，可以对文件、字符串等进行加密规则运算，然后得到一个固定长度的字符串，如果数据有一点修改，加密后的密文就不一样。</p><h3 id="_1-3-md5秒传" tabindex="-1"><a class="header-anchor" href="#_1-3-md5秒传" aria-hidden="true">#</a> 1.3 MD5秒传</h3><p><strong>MD5秒传的基本原理</strong>：在实际文件上传应用场景中，当文件体积大、量比较多时，可以对上传前做文件md5值验证，查看该文件是否已上传过，如果已上传，则直接显示上传成功，返回之前文件的访问链接，如果未上传过，则再执行上传。</p><h2 id="_2-入门案例" tabindex="-1"><a class="header-anchor" href="#_2-入门案例" aria-hidden="true">#</a> 2. 入门案例</h2><h3 id="_2-1-搭建前端项目" tabindex="-1"><a class="header-anchor" href="#_2-1-搭建前端项目" aria-hidden="true">#</a> 2.1 搭建前端项目</h3>`,19),r={href:"https://github.com/simple-uploader/vue-uploader",target:"_blank",rel:"noopener noreferrer"},k=p(`<p>创建一个VUE 项目，将官网中的测试案例复制进来：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221001232458133.png" alt="image-20221001232458133" tabindex="0" loading="lazy"><figcaption>image-20221001232458133</figcaption></figure><p>修改<code>main.js</code>中的一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">uploader</span> from &#39;vue<span class="token operator">-</span>simple<span class="token operator">-</span>uploader&#39;<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),d={href:"https://so.csdn.net/so/search?q=Minio&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},m=p(`<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221001232532357.png" alt="image-20221001232532357" tabindex="0" loading="lazy"><figcaption>image-20221001232532357</figcaption></figure><p>关闭自动上传：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uploader</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploader<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:auto-start</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>options<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:file-status-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>statusText<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploader-example<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@file-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fileComplete<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>complete<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后启动项目：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vue-simple-uploader <span class="token parameter variable">--save</span>
cnpm <span class="token function">install</span> 
<span class="token function">npm</span> run start
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问主页地址，测试上传文件：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221001232628653.png" alt="image-20221001232628653" tabindex="0" loading="lazy"><figcaption>image-20221001232628653</figcaption></figure><h3 id="_2-2-集成sparkmd5" tabindex="-1"><a class="header-anchor" href="#_2-2-集成sparkmd5" aria-hidden="true">#</a> 2.2 集成SparkMD5</h3>`,8),v={href:"https://www.npmjs.com/package/spark-md5",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>SparkMD5 是 MD5 算法的快速 md5 实现。该脚本基于 JKM md5 库，这是最快的算法。</p><p>安装：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> spark-md5 <span class="token parameter variable">--save</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在App.vue中引入SparkMD5 ，onFileAdded 添加文件事件中，调用计算MD5方法computeMD5：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> SparkMD5 <span class="token keyword">from</span> <span class="token string">&#39;spark-md5&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 目标上传 URL，可以是字符串也可以是函数，如果是函数的话，则会传入 Uploader.File 实例、当前块 Uploader.Chunk 以及是否是测试模式，默认值为 &#39;/&#39;</span>
        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;//localhost:8081/file/upload&#39;</span><span class="token punctuation">,</span> <span class="token comment">// &#39;//jsonplaceholder.typicode.com/posts/&#39;,</span>
        <span class="token comment">// 是否测试每个块是否在服务端已经上传了，主要用来实现秒传、跨浏览器上传等，默认 true。</span>
        <span class="token literal-property property">testChunks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token comment">// 分块时按照该值来分。最后一个上传块的大小是可能是大于等于1倍的这个值但是小于两倍的这个值大小，</span>
        <span class="token comment">// 可见这个 Issue #51，默认 1*1024*1024。</span>
        <span class="token literal-property property">chunkSize</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">attrs</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">accept</span><span class="token operator">:</span> <span class="token string">&#39;image/*&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">statusText</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">success</span><span class="token operator">:</span> <span class="token string">&#39;成功了&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token string">&#39;出错了&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">uploading</span><span class="token operator">:</span> <span class="token string">&#39;上传中&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">paused</span><span class="token operator">:</span> <span class="token string">&#39;暂停中&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">waiting</span><span class="token operator">:</span> <span class="token string">&#39;等待中&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      window<span class="token punctuation">.</span>uploader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>uploader<span class="token punctuation">.</span>uploader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">onFileAdded</span><span class="token punctuation">(</span><span class="token parameter">file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件被添加：&#39;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>panelShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token comment">// 计算MD5</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeMD5</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options<span class="token punctuation">.</span>chunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token doc-comment comment">/**
     * 计算文件的MD5 值
     */</span>
    <span class="token function">computeMD5</span><span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> chunkSize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;开始计算MD5&#39;</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> blobSlice <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice <span class="token operator">||</span> <span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>mozSlice <span class="token operator">||</span> <span class="token class-name">File</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>webkitSlice<span class="token punctuation">;</span>
      <span class="token keyword">let</span> currentChunk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> chunks <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>size <span class="token operator">/</span> chunkSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> spark <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkMD5<span class="token punctuation">.</span>ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      file<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">loadNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        spark<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentChunk <span class="token operator">&lt;</span> chunks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          currentChunk<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token function">loadNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> md5 <span class="token operator">=</span> spark<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          file<span class="token punctuation">.</span>uniqueIdentifier <span class="token operator">=</span> md5<span class="token punctuation">;</span>
          file<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">MD5计算完毕：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\nMD5：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>md5<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> \\n分片：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>chunks<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 大小:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token punctuation">.</span>size<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 用时：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ms</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      fileReader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">文件</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>file<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">读取出错，请检查该文件</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">function</span> <span class="token function">loadNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> start <span class="token operator">=</span> currentChunk <span class="token operator">*</span> chunkSize<span class="token punctuation">;</span>
        <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>start <span class="token operator">+</span> chunkSize<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> file<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token operator">?</span> file<span class="token punctuation">.</span>size <span class="token operator">:</span> start <span class="token operator">+</span> chunkSize<span class="token punctuation">;</span>
        fileReader<span class="token punctuation">.</span><span class="token function">readAsArrayBuffer</span><span class="token punctuation">(</span><span class="token function">blobSlice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>file<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">complete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;complete&#39;</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">fileComplete</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;file complete&#39;</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加几个文件，可以在控制台中看到打印的文件MD5信息：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221001232850838.png" alt="image-20221001232850838" tabindex="0" loading="lazy"><figcaption>image-20221001232850838</figcaption></figure><p>查看上传文件接口，可以看到，将MD5 传给了后台。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221001232907340.png" alt="image-20221001232907340" tabindex="0" loading="lazy"><figcaption>image-20221001232907340</figcaption></figure><h3 id="_2-3-后台代码" tabindex="-1"><a class="header-anchor" href="#_2-3-后台代码" aria-hidden="true">#</a> 2.3 后台代码</h3><p>既然前端计算出MD5已经穿了过来，就比较简单了，只需要在保存文件之前判断，该文件的MD5 是否已存在，若存在直接返回之前的访问路径，不存在则再执行上传操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// MD5 秒传</span>
        <span class="token comment">// 1. 获取到该文件的MD5</span>
        <span class="token class-name">String</span> md5 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;uniqueIdentifier&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 判断该MD5 是否已存在</span>
        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> md5Set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 已存在直接返回访问路径</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contains<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;该文件已上传，链接为：&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;http:xxxxxxxxxxxx&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 4. 不存在则执行上传并保存MD5 记录到数据库</span>
            <span class="token class-name">OssFile</span> ossFile <span class="token operator">=</span> minioTemplate<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            md5Set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> ossFile<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-案例存在的问题" tabindex="-1"><a class="header-anchor" href="#_3-案例存在的问题" aria-hidden="true">#</a> 3. 案例存在的问题</h2><p>入门案例中，存在不少问题，实际开发时自行解决：</p><ul><li>应该在上传之前进行MD5校验，单独写一个校验接口，而不是上传的过程中校验</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,16),g={href:"https://yunyanchengyu.blog.csdn.net/article/details/123393489",target:"_blank",rel:"noopener noreferrer"};function f(h,y){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("前端上传组件使用的是"),n("a",r,[s("vue-uploader"),t(a)]),s("。")]),k,n("p",null,[s("修改App.vue 中上传地址为之前我们写的"),n("a",d,[s("Minio"),t(a)]),s(" 上传地址：")]),m,n("p",null,[n("a",v,[s("文档地址"),t(a)])]),b,n("p",null,[n("a",g,[s("Minio入门系列【17】MD5秒传原理及入门案例"),t(a)])])])}const w=e(i,[["render",f],["__file","minio-seconds-upload.html.vue"]]);export{w as default};
