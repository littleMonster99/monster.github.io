import{_ as s,W as t,X as e,Y as n,Z as p,$ as c,a0 as o,D as i}from"./framework-f64bc974.js";const l={},u=o(`<h1 id="vue自定义防抖指令" tabindex="-1"><a class="header-anchor" href="#vue自定义防抖指令" aria-hidden="true">#</a> Vue自定义防抖指令</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>项目中经常会遇到说，一个按钮因为网络IO等问题，可能还在请求过程中，用户连续点击。导致重复发送请求。</p><p>这种情况下我们使用防抖/节流就能很好的解决，实现得方案有很多，但是自定义指令的方式是最简单的。后面有需要使用防抖的地方只要使用改指令即可。</p><h2 id="_2-原始情况" tabindex="-1"><a class="header-anchor" href="#_2-原始情况" aria-hidden="true">#</a> 2. 原始情况</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sayHello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们连续点击多次，控制台会输出多次 Hello!</p><h2 id="_3-我想达到的效果" tabindex="-1"><a class="header-anchor" href="#_3-我想达到的效果" aria-hidden="true">#</a> 3. 我想达到的效果：</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-throttle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“200”</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sayHello<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过此设置，可以让提交按钮在200ms内的多次点击只能执行一次，并且刚点击时就执行。若不设置时间（200），则默认2000ms内只执行一次。</p><h2 id="_4-防抖-节流的区别和选择" tabindex="-1"><a class="header-anchor" href="#_4-防抖-节流的区别和选择" aria-hidden="true">#</a> 4. 防抖 / 节流的区别和选择</h2><h3 id="_4-1-解释" tabindex="-1"><a class="header-anchor" href="#_4-1-解释" aria-hidden="true">#</a> 4.1 解释</h3><ul><li><p>节流</p><p>指一定时间内js方法只跑一次。比如人的眨眼睛，就是一定时间内眨一次。这是函数。</p></li><li><p>防抖</p><p>指频繁触发的情况下，只有足够的空闲时间，才执行代码一次。比如生活中的坐公交，就是一定时间内，如果有人陆续刷卡上车，司机就不会开车。只有别人没刷卡了，司机才开车。</p></li></ul><h3 id="_4-2-区别" tabindex="-1"><a class="header-anchor" href="#_4-2-区别" aria-hidden="true">#</a> 4.2 区别</h3><p>在我看来它们的差别在于应用场景，举例如下：</p><p>【应用场景】：分别在时间段0.2s,0.4s,0.6s,0.8s进行连续点击，触发searchAPI。</p><p>【防抖后的效果】：0.8s后才真正进行searchAPI的发送；</p><p>【节流的效果】：0.2s时发现有人点击，立即触发searchAPI接口，并且在x秒内，用户点击无效。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7f58e1a53d1a476db7dbea470ad29b57~tplv-k3u1fbpfcp-watermark.awebp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_4-3-如何选择" tabindex="-1"><a class="header-anchor" href="#_4-3-如何选择" aria-hidden="true">#</a> 4.3 如何选择</h3><p>我这边需要在用户刚点击的时候就立即响应，后面几秒钟的点击无效，是节流的效果，所以选择节流。</p><h2 id="_5-如何创建自定义指令" tabindex="-1"><a class="header-anchor" href="#_5-如何创建自定义指令" aria-hidden="true">#</a> 5. 如何创建自定义指令</h2><h3 id="_5-1-选择合适的钩子函数" tabindex="-1"><a class="header-anchor" href="#_5-1-选择合适的钩子函数" aria-hidden="true">#</a> 5.1 选择合适的钩子函数</h3><p>自定义指令的钩子函数：bind，inserted，update，componentUpdated，unbind</p><p>我选用bind，只需要一次性的初始化就够了。</p><h3 id="_5-2-钩子函数参数" tabindex="-1"><a class="header-anchor" href="#_5-2-钩子函数参数" aria-hidden="true">#</a> 5.2 钩子函数参数</h3><p>el：可直接操作DOM(例如， <code>el.addEventListener</code> , <code>el.onclick</code> )。</p><p>binding：可通过value获得指令绑定值。</p><h3 id="_5-3-思考-如何在不妨碍原本click事件的情况下-添加监听click事件" tabindex="-1"><a class="header-anchor" href="#_5-3-思考-如何在不妨碍原本click事件的情况下-添加监听click事件" aria-hidden="true">#</a> 5.3 思考：如何在不妨碍原本click事件的情况下，添加监听click事件</h3><blockquote><p>onclick事件的处理程序在有多个的情况下，后者会覆盖前者。addEventListener给一个事件注册多个listener，不会出现覆盖的情况。</p></blockquote><p>当然是使用<code>addEventListener</code>（<em>IE浏览器要用 <code>attachEvent</code> ，然而我的项目中只需要支持chrome即可，就不考虑啦</em>）</p><h2 id="_6-实现" tabindex="-1"><a class="header-anchor" href="#_6-实现" aria-hidden="true">#</a> 6. 实现</h2><h3 id="_6-1-定义防抖指令" tabindex="-1"><a class="header-anchor" href="#_6-1-定义防抖指令" aria-hidden="true">#</a> 6.1 定义防抖指令：</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;throttle&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">bind</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> throttleTime <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span> <span class="token comment">// 防抖时间</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>throttleTime<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 用户若不设置防抖时间，则默认2s</span>
      throttleTime <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> cbFun<span class="token punctuation">;</span>
    el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbFun<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 第一次执行</span>
        cbFun <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          cbFun <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> throttleTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        event <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">stopImmediatePropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-使用指令" tabindex="-1"><a class="header-anchor" href="#_6-2-使用指令" aria-hidden="true">#</a> 6.2 使用指令：</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sayHello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-throttle</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,39),r={href:"https://juejin.cn/post/6844903944653651981",target:"_blank",rel:"noopener noreferrer"};function d(k,h){const a=i("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[p("【实战】Vue自定义防抖指令"),c(a)])])])}const m=s(l,[["render",d],["__file","vue-shake-instructions.html.vue"]]);export{m as default};
