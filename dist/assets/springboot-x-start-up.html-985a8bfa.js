import{_ as a,W as s,X as o,Y as n,Z as p,$ as t,a0 as e,D as l}from"./framework-f64bc974.js";const r={},c=e(`<h1 id="springboot进阶-springboot启动过程" tabindex="-1"><a class="header-anchor" href="#springboot进阶-springboot启动过程" aria-hidden="true">#</a> SpringBoot进阶 - SpringBoot启动过程</h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><p>SpringBoot 的启动很简单，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码上可以看出，调用了SpringApplication的静态方法run。这个run 方法会<strong>构造一个SpringApplication的实例</strong>，然后再调用这里实例的<strong>run方法就表示启动SpringBoot</strong>。</p><ol><li>构造一个SpringApplication的实例</li><li>run方法就表示启动SpringBoot</li></ol><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200321004400020.png" alt="image-20200321004400020" tabindex="0" loading="lazy"><figcaption>image-20200321004400020</figcaption></figure><h2 id="_2-总结" tabindex="-1"><a class="header-anchor" href="#_2-总结" aria-hidden="true">#</a> 2. 总结</h2><p>SpringBoot启动的时候，不论调用什么方法，都会构造一个SpringApplication的实例，然后调用这个实例的run方法，这样就表示启动SpringBoot。</p><h3 id="_2-1-构造一个springapplication的实例" tabindex="-1"><a class="header-anchor" href="#_2-1-构造一个springapplication的实例" aria-hidden="true">#</a> 2.1 构造一个SpringApplication的实例</h3><p>在run方法调用之前，也就是<strong>构造SpringApplication的时候会进行初始化的工作</strong>，初始化的时候会做以下几件事：</p><ol><li>把参数sources设置到SpringApplication属性中，这个sources可以是任何类型的参数。本文的例子中这个sources就是MyApplication的class对象</li><li>判断是否是web程序，并设置到webEnvironment这个boolean属性中</li><li>找出所有的初始化器，默认有5个，设置到initializers属性中</li><li>找出所有的应用程序监听器，默认有9个，设置到listeners属性中</li><li>找出运行的主类(main class)</li></ol><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200321004534266.png" alt="image-20200321004534266" tabindex="0" loading="lazy"><figcaption>image-20200321004534266</figcaption></figure><h3 id="_2-2-run方法" tabindex="-1"><a class="header-anchor" href="#_2-2-run方法" aria-hidden="true">#</a> 2.2 run方法</h3><p>SpringApplication构造完成之后调用run方法，启动SpringApplication，run方法执行的时候会做以下几件事：</p><ol><li>构造一个StopWatch，观察SpringApplication的执行</li><li>找出所有的SpringApplicationRunListener并封装到SpringApplicationRunListeners中，用于监听run方法的执行。监听的过程中会封装成事件并广播出去让初始化过程中产生的应用程序监听器进行监听</li><li>构造Spring容器(ApplicationContext)，并返回 <ol><li>创建Spring容器的判断是否是web环境，是的话构造AnnotationConfigEmbeddedWebApplicationContext，否则构造AnnotationConfigApplicationContext</li><li>初始化过程中产生的初始化器在这个时候开始工作</li><li>Spring容器的刷新(完成bean的解析、各种processor接口的执行、条件注解的解析等等)</li></ol></li><li>从Spring容器中找出ApplicationRunner和CommandLineRunner接口的实现类并排序后依次执行</li></ol><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200321004718521.png" alt="image-20200321004718521" tabindex="0" loading="lazy"><figcaption>image-20200321004718521</figcaption></figure><p>run方法的第4步</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200321010602661.png" alt="image-20200321010602661" tabindex="0" loading="lazy"><figcaption>image-20200321010602661</figcaption></figure><h2 id="面试真题" tabindex="-1"><a class="header-anchor" href="#面试真题" aria-hidden="true">#</a> 面试真题</h2><p>你能讲一下SpringBootApplication的启动过程是怎么样子？</p><blockquote><p>SpringBoot启动的时候，会构造一个SpringApplication的实例，然后调用这个实例的run方法。这就表示启动了SpringBoot</p><p>构造SpringApplication实例的时候</p><ol><li>把参数设置到SpringApplication属性</li><li>判断是否是web程序</li><li>找出所有的初始化器</li><li>找出所有的应用程序监听器</li><li>找出运行的主类</li></ol><p>运行run方法</p><ol><li>构造一个StopWatch，观察SpringApplication的执行</li><li>SpringApplicationRunListener 监听run方法的执行</li><li>构造Spring容器(ApplicationContext)，并返回</li><li>从Spring容器中找出ApplicationRunner和CommandLineRunner接口的实现类并排序后依次执行</li></ol></blockquote><p>业务提炼 精简版</p><blockquote><p>springboot 通过根据配置文件自动装配所属依赖的类，再用动态代理的方式注入到Spring容器里面</p></blockquote><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,25),g={href:"https://fangjian0423.github.io/2017/04/30/springboot-startup-analysis/",target:"_blank",rel:"noopener noreferrer"};function u(d,m){const i=l("ExternalLinkIcon");return s(),o("div",null,[c,n("p",null,[n("a",g,[p("SpringBoot源码分析之SpringBoot的启动过程"),t(i)])])])}const h=a(r,[["render",u],["__file","springboot-x-start-up.html.vue"]]);export{h as default};
