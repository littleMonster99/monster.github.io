import{_ as s,W as e,X as t,Y as a,Z as p,$ as c,a0 as o,D as i}from"./framework-f64bc974.js";const l={},u=o(`<h1 id="vue过滤器" tabindex="-1"><a class="header-anchor" href="#vue过滤器" aria-hidden="true">#</a> Vue过滤器</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-1-作用" tabindex="-1"><a class="header-anchor" href="#_1-1-作用" aria-hidden="true">#</a> 1.1 作用</h3><p>Vue 过滤器用于一些常见的文本格式化</p><h3 id="_1-2-在哪用" tabindex="-1"><a class="header-anchor" href="#_1-2-在哪用" aria-hidden="true">#</a> 1.2 在哪用</h3><ul><li><p>双花括号插值</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在双花括号中 --&gt;</span>
{{ message | capitalize }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>v-bind</code> 表达式</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 在 \`v-bind\` 中 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rawId | formatId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示：</p><h2 id="_2-定义过滤器" tabindex="-1"><a class="header-anchor" href="#_2-定义过滤器" aria-hidden="true">#</a> 2. 定义过滤器</h2><h3 id="_2-1-组件中定义本地过滤器" tabindex="-1"><a class="header-anchor" href="#_2-1-组件中定义本地过滤器" aria-hidden="true">#</a> 2.1 组件中定义本地过滤器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">capitalize</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
    value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-创建vue-实例之前全局定义过滤器" tabindex="-1"><a class="header-anchor" href="#_2-2-创建vue-实例之前全局定义过滤器" aria-hidden="true">#</a> 2.2 创建Vue 实例之前全局定义过滤器</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;capitalize&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;&#39;</span>
  value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器。</p><h2 id="_3-过滤器参数原则" tabindex="-1"><a class="header-anchor" href="#_3-过滤器参数原则" aria-hidden="true">#</a> 3. 过滤器参数原则</h2><p>过滤器函数总接收表达式的值 (之前的操作链的结果) 作为第一个参数。</p><h3 id="_3-1-简单情况" tabindex="-1"><a class="header-anchor" href="#_3-1-简单情况" aria-hidden="true">#</a> 3.1 简单情况</h3><p>在上述例子中，<code>capitalize</code> 过滤器函数将会收到 <code>message</code> 的值作为第一个参数。</p><h3 id="_3-2-过滤器串联情况" tabindex="-1"><a class="header-anchor" href="#_3-2-过滤器串联情况" aria-hidden="true">#</a> 3.2 过滤器串联情况</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ message | filterA | filterB }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，<code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数中。然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。</p><h3 id="_3-3-多个参数情况" tabindex="-1"><a class="header-anchor" href="#_3-3-多个参数情况" aria-hidden="true">#</a> 3.3 多个参数情况</h3><p>过滤器是 JavaScript 函数，因此可以接收参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{ message | filterA(&#39;arg1&#39;, arg2) }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>filterA</code> 被定义为接收三个参数的过滤器函数。其中 <code>message</code> 的值作为第一个参数，普通字符串 <code>&#39;arg1&#39;</code> 作为第二个参数，表达式 <code>arg2</code> 的值作为第三个参数。</p><h2 id="_4-补充" tabindex="-1"><a class="header-anchor" href="#_4-补充" aria-hidden="true">#</a> 4. 补充</h2><ul><li><p>如果在element 的table 中，需要格式化数据也可以使用:formatter 达到文本格式化效果</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>状态<span class="token punctuation">&quot;</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>center<span class="token punctuation">&quot;</span></span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>status<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:formatter</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>statusFormat<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 岗位状态字典翻译</span>
    <span class="token function">statusFormat</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">selectDictLabel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>statusOptions<span class="token punctuation">,</span> row<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_5-使用全局的过滤器" tabindex="-1"><a class="header-anchor" href="#_5-使用全局的过滤器" aria-hidden="true">#</a> 5. 使用全局的过滤器</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let dateStr = this.$options.filters[&quot;dateFormat&quot;](new Date(), &quot;YYYYMMDDHHmmss&quot;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,29),r={href:"https://cn.vuejs.org/v2/guide/filters.html",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const n=i("ExternalLinkIcon");return e(),t("div",null,[u,a("p",null,[a("a",r,[p("官方文档"),c(n)])])])}const m=s(l,[["render",d],["__file","vue-filter.html.vue"]]);export{m as default};
