import{_ as t,W as l,X as o,Y as n,Z as a,$ as e,a0 as i,D as p}from"./framework-f64bc974.js";const c={},u=i(`<h1 id="jenkins详解" tabindex="-1"><a class="header-anchor" href="#jenkins详解" aria-hidden="true">#</a> Jenkins详解</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-1-jenkins是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-jenkins是什么" aria-hidden="true">#</a> 1.1 jenkins是什么?</h3><p>Jenkins是一款开源持续集成(CI&amp;CD ) 工具软件，用于自动化各种任务，包括构建、测试和部署软件。</p><ul><li><p>CI 持续集成: 是借助工具对软件项目进行持续的自动化的编译打包构建测试发布，来检查软件交付质量的一种行为。</p></li><li><p>CD持续部署: 是基于持续交付的优势自动将经过测试的代码推入生产环境的过程。</p></li></ul><blockquote><p>将软件开发生命周期的整个过程都自动化，<strong>从开发人员向代码库中提交代码开始，到将此代码投入生产环境中使用为止</strong>。为了使整个软件开发流程处于 DevOps 模式或自动化模式，我们就需要对 CI/CD 流水线进行自动化。</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805153241027.png" alt="image-20220805153241027" tabindex="0" loading="lazy"><figcaption>image-20220805153241027</figcaption></figure><h3 id="_1-2-发展历史" tabindex="-1"><a class="header-anchor" href="#_1-2-发展历史" aria-hidden="true">#</a> 1.2 发展历史</h3><ul><li>Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。</li><li>Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。</li><li>2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。</li><li>在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。</li><li>在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间， 尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。</li><li>甲骨文在2010年12月声明拥有该名称并申请商标的权利。因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。</li><li>2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。</li><li>2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。</li><li>到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。</li></ul><h3 id="_1-3-持续集成-ci-cd" tabindex="-1"><a class="header-anchor" href="#_1-3-持续集成-ci-cd" aria-hidden="true">#</a> 1.3 持续集成(CI&amp;CD )</h3><h2 id="_2-安装与配置" tabindex="-1"><a class="header-anchor" href="#_2-安装与配置" aria-hidden="true">#</a> 2. 安装与配置</h2><h3 id="_2-1-docker-中安装jenkins" tabindex="-1"><a class="header-anchor" href="#_2-1-docker-中安装jenkins" aria-hidden="true">#</a> 2.1 docker 中安装Jenkins</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">18080</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">50000</span>:5000 <span class="token parameter variable">--name</span> jenkins <span class="token punctuation">\\</span>
<span class="token parameter variable">-u</span> root <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /Users/zsz/Project/docker/jenkins/jenkins_home:/var/jenkins_home <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> jenkins/jenkins:lts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-jenkins-初始化配置" tabindex="-1"><a class="header-anchor" href="#_2-2-jenkins-初始化配置" aria-hidden="true">#</a> 2.2 Jenkins 初始化配置</h3>`,14),r=n("p",null,"运行成功后访问该地址登录Jenkins，第一次登录需要输入管理员密码：",-1),d={href:"http://localhost:18080/",target:"_blank",rel:"noopener noreferrer"},g=n("figure",null,[n("img",{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718162800163.png",alt:"image-20220718162800163",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220718162800163")],-1),m=i(`<li><p>查看登录默认密码</p><ol><li><p>/var/jenkins_home/secrets/initialAdminPassword 文件查看</p></li><li><p>Jenkins 的启动日志中查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs jenkins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164259903.png" alt="image-20220718164259903" tabindex="0" loading="lazy"><figcaption>image-20220718164259903</figcaption></figure></li></ol></li><li><p>安装插件</p><p>选择安装插件方式，这里我们直接安装推荐的插件：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718163403228.png" alt="image-20220718163403228" tabindex="0" loading="lazy"><figcaption>image-20220718163403228</figcaption></figure><p>进入插件安装界面，联网等待插件安装：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718163528739.png" alt="image-20220718163528739" tabindex="0" loading="lazy"><figcaption>image-20220718163528739</figcaption></figure></li><li><p>安装完成后，创建管理员账号：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164407366.png" alt="image-20220718164407366" tabindex="0" loading="lazy"><figcaption>image-20220718164407366</figcaption></figure></li><li><p>进行实例配置，配置Jenkins的URL：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164430212.png" alt="image-20220718164430212" tabindex="0" loading="lazy"><figcaption>image-20220718164430212</figcaption></figure></li><li><p>点击系统管理-&gt;插件管理，进行一些自定义的插件安装：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164455056.png" alt="image-20220718164455056" tabindex="0" loading="lazy"><figcaption>image-20220718164455056</figcaption></figure></li><li><p>确保以下插件被正确安装：</p><ul><li>根据角色管理权限的插件：Role-based Authorization Strategy</li><li>远程使用ssh的插件：SSH plugin</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164526521.png" alt="image-20220718164526521" tabindex="0" loading="lazy"><figcaption>image-20220718164526521</figcaption></figure></li>`,6),v=i(`<h3 id="_2-3-角色权限管理" tabindex="-1"><a class="header-anchor" href="#_2-3-角色权限管理" aria-hidden="true">#</a> 2.3 角色权限管理</h3><blockquote><p>我们可以使用Jenkins的角色管理插件来管理Jenkins的用户，比如我们可以给管理员赋予所有权限，运维人员赋予执行任务的相关权限，其他人员只赋予查看权限。</p></blockquote><ul><li>在系统管理-&gt;全局安全配置中启用基于角色的权限管理：</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915173908996.png" alt="image-20210915173908996" tabindex="0" loading="lazy"><figcaption>image-20210915173908996</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915184054625.png" alt="image-20210915184054625" tabindex="0" loading="lazy"><figcaption>image-20210915184054625</figcaption></figure><ul><li>进入系统管理-&gt;Manage and Assign Roles界面：</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915184216609.png" alt="image-20210915184216609" tabindex="0" loading="lazy"><figcaption>image-20210915184216609</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915184242961.png" alt="image-20210915184242961" tabindex="0" loading="lazy"><figcaption>image-20210915184242961</figcaption></figure><ul><li>添加角色与权限的关系：</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915184813357.png" alt="image-20210915184813357" tabindex="0" loading="lazy"><figcaption>image-20210915184813357</figcaption></figure><ul><li>给用户分配角色：</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210915184857025.png" alt="image-20210915184857025" tabindex="0" loading="lazy"><figcaption>image-20210915184857025</figcaption></figure><h3 id="_2-4-凭据管理" tabindex="-1"><a class="header-anchor" href="#_2-4-凭据管理" aria-hidden="true">#</a> 2.4 凭据管理</h3><p>凭证（cridential）是Jenkins进行受限操作时的凭据。</p><ul><li>比如使用SSH登录远程机器时，用户名和密码或SSH key就是凭证。</li><li>拉取git代码时，git的用户名和密码 就是凭证</li></ul><p>而这些凭证不可能以明文写在Jenkinsfile中。<strong>Jenkins凭证管理指的就是对这些凭证进行管理</strong>。</p><h4 id="_2-4-1-查看凭据" tabindex="-1"><a class="header-anchor" href="#_2-4-1-查看凭据" aria-hidden="true">#</a> 2.4.1 查看凭据</h4><ul><li><p>凭据-&gt; 系统-&gt; 全局凭据</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719162249565.png" alt="image-20220719162249565" tabindex="0" loading="lazy"><figcaption>image-20220719162249565</figcaption></figure></li></ul><h4 id="_2-4-2-新建凭据" tabindex="-1"><a class="header-anchor" href="#_2-4-2-新建凭据" aria-hidden="true">#</a> 2.4.2 新建凭据</h4><p>在点击【添加凭据】，类型选择【Username with password】，将gitlab的用户名 密码分别添加至【用户名】【密码】一栏，ID一栏自行定夺，可以写一个有含义的便于分辨的ID , 点击【确定】即可。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719162332282.png" alt="image-20220719162332282" tabindex="0" loading="lazy"><figcaption>image-20220719162332282</figcaption></figure><h4 id="_2-4-3-更新凭据" tabindex="-1"><a class="header-anchor" href="#_2-4-3-更新凭据" aria-hidden="true">#</a> 2.4.3 更新凭据</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719164250279.png" alt="image-20220719164250279" tabindex="0" loading="lazy"><figcaption>image-20220719164250279</figcaption></figure><h4 id="_2-4-4-删除凭据" tabindex="-1"><a class="header-anchor" href="#_2-4-4-删除凭据" aria-hidden="true">#</a> 2.4.4 删除凭据</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719164322687.png" alt="image-20220719164322687" tabindex="0" loading="lazy"><figcaption>image-20220719164322687</figcaption></figure><h3 id="_2-5-构建工具集成" tabindex="-1"><a class="header-anchor" href="#_2-5-构建工具集成" aria-hidden="true">#</a> 2.5 构建工具集成</h3><p>Jenkins调用这些工具的方式是通过环境变量调用。有两种方式</p><ul><li>一种是在Jenkins系统配置中添加构建工具的环境变量</li><li>一种是直接在Jenkinsfile中定义</li></ul><h4 id="_2-4-1-集成maven" tabindex="-1"><a class="header-anchor" href="#_2-4-1-集成maven" aria-hidden="true">#</a> 2.4.1 集成maven</h4><ul><li><p>通过系统管理-&gt;全局工具配置来进行全局工具的配置，比如maven的配置：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719171244730.png" alt="image-20220719171244730" tabindex="0" loading="lazy"><figcaption>image-20220719171244730</figcaption></figure></li><li><p>新增maven的安装配置：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220718164627533.png" alt="image-20220718164627533" tabindex="0" loading="lazy"><figcaption>image-20220718164627533</figcaption></figure></li></ul><h4 id="_2-4-2-集成node" tabindex="-1"><a class="header-anchor" href="#_2-4-2-集成node" aria-hidden="true">#</a> 2.4.2 集成node</h4><ol><li>安装node插件</li></ol><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719171421702.png" alt="image-20220719171421702" tabindex="0" loading="lazy"><figcaption>image-20220719171421702</figcaption></figure><ol start="2"><li>配置node</li></ol><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719171832103.png" alt="image-20220719171832103" tabindex="0" loading="lazy"><figcaption>image-20220719171832103</figcaption></figure><h2 id="_3-构建项目" tabindex="-1"><a class="header-anchor" href="#_3-构建项目" aria-hidden="true">#</a> 3. 构建项目</h2><p>项目构建流程：拉取代码-&gt;编译-&gt;打包-&gt;部署</p><h3 id="_3-1-构建类型" tabindex="-1"><a class="header-anchor" href="#_3-1-构建类型" aria-hidden="true">#</a> 3.1 构建类型</h3><p>Jenkins中自动构建项目的类型有很多，常用的</p><ul><li>自由风格软件项目（ FreeStyle Project）</li><li>构建maven项目</li><li>流水线项目（ Pipeline Project）</li><li>多分支流水线</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804163341844.png" alt="image-20220804163341844" tabindex="0" loading="lazy"><figcaption>image-20220804163341844</figcaption></figure><blockquote><p>每种类型的构建其实都可以完成一样的构建过程与结果，只是在操作方式、灵活度等方面有所区别，在实际开发中可以根据自己的需求和习惯来选择。</p></blockquote><h2 id="_4-构建-自由风格项目构建" tabindex="-1"><a class="header-anchor" href="#_4-构建-自由风格项目构建" aria-hidden="true">#</a> 4. 构建 - 自由风格项目构建</h2><h3 id="_4-1-general-基础配置" tabindex="-1"><a class="header-anchor" href="#_4-1-general-基础配置" aria-hidden="true">#</a> 4.1 General （基础配置）</h3><p>项目基本配置 项目名字,描述,参数,禁用项目,并发构建,限制构建默认node等</p><blockquote><ul><li>Description： 项目描述信息</li><li><strong>Discard old builds</strong> ：丢弃旧的构建</li><li>Days to keep builds： 保持构建的天数</li><li>Max # of builds to keep： 保持构建的最大个数</li><li><strong>This project is parameterized</strong>：参数化构建过来</li><li>是否需要部署到测试环境</li><li>打包的版本号</li><li>JDK: 指定JDK 的版本</li></ul></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804163554777.png" alt="image-20220804163554777" tabindex="0" loading="lazy"><figcaption>image-20220804163554777</figcaption></figure><h3 id="_4-2-source-code-management-源码管理" tabindex="-1"><a class="header-anchor" href="#_4-2-source-code-management-源码管理" aria-hidden="true">#</a> 4.2 Source Code Management（源码管理）</h3><p>代码库信息,支持git 和 svn 等</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804163653770.png" alt="image-20220804163653770" tabindex="0" loading="lazy"><figcaption>image-20220804163653770</figcaption></figure><h3 id="_4-3-build-triggers-构建触发器" tabindex="-1"><a class="header-anchor" href="#_4-3-build-triggers-构建触发器" aria-hidden="true">#</a> 4.3 Build Triggers （构建触发器）</h3><p>构建触发方式 周期性构建,poll scm,远程脚本触发构建,其他项目构建结束后触发等</p><blockquote><ul><li><p>Trigger builds remotely (e.g., from scripts) ：触发远程构建 (例如,使用脚本)</p></li><li><p>Build after other projects are built：其他工程构建后触发</p></li><li><p><strong>Build periodically</strong>：定时构建</p></li><li><p>GitHub hook trigger for GITScm polling：git 提交后立马构建</p></li><li><p>Gitlab Merge Requests Builder：git 合并请求后构建</p></li><li><p>轮询 SCM</p></li></ul></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220720174622820.png" alt="image-20220720174622820" tabindex="0" loading="lazy"><figcaption>image-20220720174622820</figcaption></figure><h3 id="_4-4-build-environment-构建环境" tabindex="-1"><a class="header-anchor" href="#_4-4-build-environment-构建环境" aria-hidden="true">#</a> 4.4 Build Environment (构建环境)</h3><p>构建环境相关设置 构建前删除workspace,向Console输出添加时间戳,设置构建名称,插入环境变量等</p><blockquote><ul><li>Delete workspace before build starts：在构建开始之前删除工作区</li><li>Use secret text(s) or file(s)： 使用秘密文本或文件</li><li>Send files or execute commands over SSH before the build starts：在构建开始之前，通过SSH发送文件或执行命令</li><li>Send files or execute commands over SSH after the build runs：生成运行后，通过SSH发送文件或执行命令</li><li>Provide Configuration files：提供配置文件</li><li>Add timestamps to the Console Output：将时间戳添加到控制台输出</li><li>Inspect build log for published Gradle build scans：检查已发布的Gradle构建扫描的构建日志</li><li>Provide Node &amp; npm bin/ folder to PATH：向路径提供节点和npm bin/文件夹</li><li>Terminate a build if it&#39;s stuck：如果构建卡住了，请终止它</li><li>With Ant</li></ul></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220802164409193.png" alt="image-20220802164409193" tabindex="0" loading="lazy"><figcaption>image-20220802164409193</figcaption></figure><h3 id="_4-5-build-构建" tabindex="-1"><a class="header-anchor" href="#_4-5-build-构建" aria-hidden="true">#</a> 4.5 Build (构建)</h3><p>项目构建任务</p><p>添加1个或者多个构建步骤</p><blockquote><ul><li><strong>Execute shell</strong> : 执行shell脚本</li></ul><blockquote><p>使用shell 最方便，相当于在终端，想执行什么命令执行什么</p></blockquote><ul><li><p>Execute NodeJS script：执行NodeJS脚本</p></li><li><p>Invoke Gradle script：调用Gradle脚本</p></li><li><p>Get linked maven deployments：获取链接maven部署</p></li></ul></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804164222858.png" alt="image-20220804164222858" tabindex="0" loading="lazy"><figcaption>image-20220804164222858</figcaption></figure><h3 id="_4-6-post-build-actions-构建后操作" tabindex="-1"><a class="header-anchor" href="#_4-6-post-build-actions-构建后操作" aria-hidden="true">#</a> 4.6 Post-build Actions (构建后操作)</h3><p>构建后行为 Artifact归档,邮件通知,发布单元测试报告,触发下游项目等</p><blockquote><ul><li>Post-build Actions：归档成品</li><li>Build other projects： 构建其他工程</li><li>E-mail Notification : 邮件通知</li><li>Send build artifacts over SSH ： 通过SSH发送构建工件</li><li>Aggregate downstream test results: 汇总测试结果</li><li>Publish JUnit test result report：发布JUnit测试结果报告</li></ul></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804164405332.png" alt="image-20220804164405332" tabindex="0" loading="lazy"><figcaption>image-20220804164405332</figcaption></figure><h2 id="_5-构建-maven项目" tabindex="-1"><a class="header-anchor" href="#_5-构建-maven项目" aria-hidden="true">#</a> 5. 构建 - maven项目</h2><p>拉取代码和远程部署的过程和自由风格项目一样，只是&quot;构建&quot;部分不同。</p><p>默认配置好了maven 环境</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220804170018918.png" alt="image-20220804170018918" tabindex="0" loading="lazy"><figcaption>image-20220804170018918</figcaption></figure><h2 id="_6-构建-流水线项目-pipeline-project" tabindex="-1"><a class="header-anchor" href="#_6-构建-流水线项目-pipeline-project" aria-hidden="true">#</a> 6. 构建 - 流水线项目（ Pipeline Project）</h2><p>Pipeline，就是一套运行于Jenkins上的<strong>工作流框架</strong>，<strong>将原本独立运行于单个或者多个节点的任务连接起来</strong>，实现单个任务难以完成的复杂流程编排与可视化。</p><h3 id="_6-1-使用pipeline有什么好处" tabindex="-1"><a class="header-anchor" href="#_6-1-使用pipeline有什么好处" aria-hidden="true">#</a> 6.1 使用Pipeline有什么好处：</h3><ul><li>更好的版本化：将pipeline提交到版本库中进行版本控制</li><li>更好地协作：pipeline的每次修改对所有人都是可见的。除此之外，还可以对pipeline进行代码审查</li><li>更好的重用性：手动操作没法重用，但是代码可以重用</li></ul><h3 id="_6-2-如何创建-jenkins-pipeline呢" tabindex="-1"><a class="header-anchor" href="#_6-2-如何创建-jenkins-pipeline呢" aria-hidden="true">#</a> 6.2 如何创建 Jenkins Pipeline呢</h3><ul><li><p>Pipeline 脚本是由 Groovy 语言实现的，但是我们没必要单独去学习 Groovy</p></li><li><p>Pipeline 支持两种语法：Declarative(声明式)和 Scripted Pipeline(脚本式)语法</p></li><li><p>Pipeline 也有两种创建方法：</p><ul><li>可以直接在 Jenkins 的 Web UI 界面中输入脚本；</li><li>也可以通过创建一个 <strong>Jenkinsfile 脚本文件放入项目源码库中</strong>（一般我们都推荐在 Jenkins 中直接从源代码控制(SCM)中直接载入 Jenkinsfile Pipeline 这种方法）</li></ul></li></ul><h3 id="_6-3-三个核心概念" tabindex="-1"><a class="header-anchor" href="#_6-3-三个核心概念" aria-hidden="true">#</a> 6.3 三个核心概念</h3><p>Pipeline 语法基础主要分为3个部分</p><h4 id="_6-3-1-node-agent-节点" tabindex="-1"><a class="header-anchor" href="#_6-3-1-node-agent-节点" aria-hidden="true">#</a> 6.3.1 node/agent(节点)</h4><p>节点。指定节点执行该 Pipeline，即我们可以指定加入 Jenkins 管理的节点去执行</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>agent <span class="token punctuation">{</span>
        node <span class="token punctuation">{</span>
            label <span class="token string">&#39;master&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-2-stage-阶段" tabindex="-1"><a class="header-anchor" href="#_6-3-2-stage-阶段" aria-hidden="true">#</a> 6.3.2 Stage (阶段)</h4><p>阶段。在整个Pipeline 中，一个 stage 块定义了任务执行的不同的阶段，如构建、测试和部署阶段。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline<span class="token punctuation">{</span>
    agent any
    stages<span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;build&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//steps  </span>
        <span class="token punctuation">}</span>
        
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//step</span>
        <span class="token punctuation">}</span>
      
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;deploy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//step</span>
        <span class="token punctuation">}</span>
    
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-3-3-step-步骤" tabindex="-1"><a class="header-anchor" href="#_6-3-3-step-步骤" aria-hidden="true">#</a> 6.3.3 <strong>Step(步骤)</strong></h4><p>Step：步骤，step是每个阶段中要执行的每个步骤。<strong>Step是最基本的操作单元</strong>，小到创建一个目录，大到构建一个Docker镜像，由各类Jenklins Plugin提供，例如：sh ‘make’</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline<span class="token punctuation">{</span>
    agent any
    stages<span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;GetCode&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            steps<span class="token punctuation">{</span> 
                sh <span class="token interpolation-string"><span class="token string">&quot;ls &quot;</span></span>    <span class="token comment">//step</span>
            <span class="token punctuation">}</span>
        
        <span class="token punctuation">}</span>    
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-pipeline的基础语法" tabindex="-1"><a class="header-anchor" href="#_6-4-pipeline的基础语法" aria-hidden="true">#</a> 6.4 Pipeline的基础语法</h3><h4 id="_6-4-1-agent-代理" tabindex="-1"><a class="header-anchor" href="#_6-4-1-agent-代理" aria-hidden="true">#</a> 6.4.1 agent 代理</h4><p>节点。指定节点执行该 Pipeline，即我们可以指定加入 Jenkins 管理的节点去执行</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>agent <span class="token punctuation">{</span> node <span class="token punctuation">{</span> label <span class="token string">&#39;labelname&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
aget <span class="token punctuation">{</span> label <span class="token string">&#39; labelname &#39;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>参数：</p><ul><li>any 在任何可用的节点上执行pipeline。none 没有指定agent的时候默认。</li><li>label 在指定标签上的节点上运行Pipeline。 node 允许额外的选项(自定义workspace)。</li></ul><h4 id="_6-4-2-post-之后操作" tabindex="-1"><a class="header-anchor" href="#_6-4-2-post-之后操作" aria-hidden="true">#</a> 6.4.2 post 之后操作</h4><p>当流水线完成后根据完成的状态做一些任务。例如：构建失败后邮件通知</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>post <span class="token punctuation">{</span> 
    always <span class="token punctuation">{</span> 
        echo <span class="token string">&#39;I will always say Hello again!&#39;</span>
    <span class="token punctuation">}</span>

    failure<span class="token punctuation">{</span>
        email <span class="token punctuation">:</span> xxxx<span class="token annotation punctuation">@dxx</span><span class="token punctuation">.</span>com
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的状态：</p><ul><li>always 无论流水线或者阶段的完成状态。</li><li>changed 只有当流水线或者阶段完成状态与之前不同时。</li><li>failure 只有当流水线或者阶段状态为&quot;failure&quot;运行。</li><li>success 只有当流水线或者阶段状态为&quot;success&quot;运行。</li><li>unstable 只有当流水线或者阶段状态为&quot;unstable&quot;运行。例如：测试失败。</li><li>aborted 只有当流水线或者阶段状态为&quot;aborted &quot;运行。例如：手动取消。</li></ul><h4 id="_6-4-3-stages-阶段组" tabindex="-1"><a class="header-anchor" href="#_6-4-3-stages-阶段组" aria-hidden="true">#</a> 6.4.3 stages 阶段组</h4><p><code>stages</code>是流水线的整个运行阶段，包含一个或多个 <code>stage</code> , 建议 <code>stages</code> 至少包含一个 <code>stage</code>。,比如构建, 测试, 和部署。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline<span class="token punctuation">{</span>
    agent any
    stages<span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;build&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//steps  </span>
        <span class="token punctuation">}</span>
        
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//step</span>
        <span class="token punctuation">}</span>
      
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;deploy&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token comment">//step</span>
        <span class="token punctuation">}</span>
    
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-4-steps-步骤组" tabindex="-1"><a class="header-anchor" href="#_6-4-4-steps-步骤组" aria-hidden="true">#</a> 6.4.4 steps 步骤组</h4><p>steps位于stage指令块内部，包括一个或多个step。仅有一个step的情况下可以忽略关键字step及其{}</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span> 
                echo <span class="token string">&#39;Hello World&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-5-environment-环境变量" tabindex="-1"><a class="header-anchor" href="#_6-4-5-environment-环境变量" aria-hidden="true">#</a> 6.4.5 environment 环境变量</h4><p>定义流水线环境变量，可以定义在全局变量或者步骤中的局部变量。这取决于 environment 指令在流水线内的位置。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>agent any

<span class="token comment">//全局变量</span>
environment <span class="token punctuation">{</span> 
    activeEnv <span class="token operator">=</span> <span class="token string">&#39;dev&#39;</span>
<span class="token punctuation">}</span>
stages <span class="token punctuation">{</span>
    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">//局部变量</span>
        environment <span class="token punctuation">{</span> 
            AN_ACCESS_KEY <span class="token operator">=</span> <span class="token function">credentials</span><span class="token punctuation">(</span><span class="token string">&#39;my-prefined-secret-text&#39;</span><span class="token punctuation">)</span> 
        <span class="token punctuation">}</span>
        steps <span class="token punctuation">{</span>
            sh <span class="token string">&#39;printenv&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-6-options运行选项" tabindex="-1"><a class="header-anchor" href="#_6-4-6-options运行选项" aria-hidden="true">#</a> 6.4.6 options运行选项</h4><p>定义流水线运行时的配置选项，流水线提供了许多选项, 比如buildDiscarder（构建丢弃）,但也可以由插件提供, 比如 timestamps。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    options <span class="token punctuation">{</span>
      	<span class="token comment">// 保留最多10次的构建</span>
        <span class="token function">buildDiscarder</span><span class="token punctuation">(</span><span class="token function">logRotator</span><span class="token punctuation">(</span>numToKeepStr<span class="token punctuation">:</span> <span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      	<span class="token comment">// 不允许同时执行流水线。 可被用来防止同时访问共享资源等。</span>
        <span class="token function">disableConcurrentBuilds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token string">&#39;Hello World&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他部分参数：</p><ul><li>buildDiscarder: 为最近的流水线运行的特定数量保存组件和控制台输出。</li><li>disableConcurrentBuilds: 不允许同时执行流水线。 可被用来防止同时访问共享资源等。</li><li>overrideIndexTriggers: 允许覆盖分支索引触发器的默认处理。</li><li>skipDefaultCheckout: 在agent 指令中，跳过从源代码控制中检出代码的默认情况。</li><li>skipStagesAfterUnstable: 一旦构建状态变得UNSTABLE，跳过该阶段。</li><li>checkoutToSubdirectory: 在工作空间的子目录中自动地执行源代码控制检出。</li><li>timeout: 设置流水线运行的超时时间, 在此之后，Jenkins将中止流水线。</li><li>retry: 在失败时, 重新尝试整个流水线的指定次数。</li><li>timestamps 预测所有由流水线生成的控制台输出，与该流水线发出的时间一致。</li></ul><h4 id="_6-4-7-parameters-参数" tabindex="-1"><a class="header-anchor" href="#_6-4-7-parameters-参数" aria-hidden="true">#</a> 6.4.7 parameters 参数</h4><p>为流水线运行时设置项目相关的参数，就不用在UI界面上定义了，比较方便。</p><ul><li><p>string 字符串类型的参数, 例如:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>parameters <span class="token punctuation">{</span> string defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;请输入本次构建的前三段版本号&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">&#39;releaseVersion&#39;</span><span class="token punctuation">,</span> trim<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>choices 选择</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>choice choices<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;是&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;否&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;是否要发布到服务器，默认发布&#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">&#39;isDeploy&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>booleanParam 布尔参数, 例如:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>parameters <span class="token punctuation">{</span> <span class="token function">booleanParam</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;DEBUG_BUILD&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h4 id="_6-4-8-triggers-构建触发器" tabindex="-1"><a class="header-anchor" href="#_6-4-8-triggers-构建触发器" aria-hidden="true">#</a> 6.4.8 triggers 构建触发器</h4><p>triggers 不是必须的 定义pipeline被自动触发的方式选项 cron、pollSCM、upstream</p><ul><li><p>cron 计划任务定期执行构建。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>triggers <span class="token punctuation">{</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token string">&#39;H */4 * * 1-5&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>pollSCM 与cron定义类似，但是由jenkins定期检测源码变化。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>triggers <span class="token punctuation">{</span> <span class="token function">pollSCM</span><span class="token punctuation">(</span><span class="token string">&#39;H */4 * * 1-5&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>upstream 接受逗号分隔的工作字符串和阈值。 当字符串中的任何作业以最小阈值结束时，流水线被重新触发。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>triggers <span class="token punctuation">{</span> <span class="token function">upstream</span><span class="token punctuation">(</span>upstreamProjects<span class="token punctuation">:</span> <span class="token string">&#39;job1,job2&#39;</span><span class="token punctuation">,</span> threshold<span class="token punctuation">:</span> hudson<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Result<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>示例</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    triggers <span class="token punctuation">{</span>
        <span class="token function">cron</span><span class="token punctuation">(</span><span class="token string">&#39;H */4 * * 1-5&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                echo <span class="token string">&#39;Hello World&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="_6-4-9-tool-构建工具" tabindex="-1"><a class="header-anchor" href="#_6-4-9-tool-构建工具" aria-hidden="true">#</a> 6.4.9 tool 构建工具</h4><p>获取通过自动安装或手动放置工具的环境变量。支持maven/jdk/gradle。工具的名称必须在系统设置-&gt;全局工具配置中定义。</p><p>示例:</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>pipeline <span class="token punctuation">{</span>
    agent any
    tools <span class="token punctuation">{</span>
        maven <span class="token string">&#39;apache-maven-3.0.1&#39;</span> 
    <span class="token punctuation">}</span>
    stages <span class="token punctuation">{</span>
        <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            steps <span class="token punctuation">{</span>
                sh <span class="token string">&#39;mvn --version&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-4-10-input-交互输入" tabindex="-1"><a class="header-anchor" href="#_6-4-10-input-交互输入" aria-hidden="true">#</a> 6.4.10 input 交互输入</h4><p>input用户在执行各个阶段的时候，由人工确认是否继续进行。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>agent any
stages <span class="token punctuation">{</span>
    <span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        input <span class="token punctuation">{</span>
            message <span class="token interpolation-string"><span class="token string">&quot;Should we continue?&quot;</span></span>
            ok <span class="token interpolation-string"><span class="token string">&quot;Yes, we should.&quot;</span></span>
            submitter <span class="token interpolation-string"><span class="token string">&quot;alice,bob&quot;</span></span>
            parameters <span class="token punctuation">{</span>
                <span class="token function">string</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string">&#39;PERSON&#39;</span><span class="token punctuation">,</span> defaultValue<span class="token punctuation">:</span> <span class="token string">&#39;Mr Jenkins&#39;</span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token string">&#39;Who should I say hello to?&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        steps <span class="token punctuation">{</span>
            echo <span class="token interpolation-string"><span class="token string">&quot;Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">PERSON</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, nice to meet you.&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数解释：</p><ul><li>message 呈现给用户的提示信息。</li><li>id 可选，默认为stage名称。</li><li>ok 默认表单上的ok文本。</li><li>submitter 可选的,以逗号分隔的用户列表或允许提交的外部组名。默认允许任何用户。</li><li>submitterParameter 环境变量的可选名称。如果存在，用submitter 名称设置。</li><li>parameters 提示提交者提供的一个可选的参数列表。</li></ul><h4 id="_6-4-11-when条件判断" tabindex="-1"><a class="header-anchor" href="#_6-4-11-when条件判断" aria-hidden="true">#</a> 6.4.11 when条件判断</h4><p>when 指令允许流水线根据给定的条件决定是否应该执行阶段。 when 指令必须包含至少一个条件。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">//branch: 当正在构建的分支与模式给定的分支匹配时，执行这个阶段,这只适用于多分支流水线例如:</span>
when <span class="token punctuation">{</span> branch <span class="token string">&#39;master&#39;</span> <span class="token punctuation">}</span>


<span class="token comment">//environment: 当指定的环境变量是给定的值时，执行这个步骤,例如:</span>
when <span class="token punctuation">{</span> environment name<span class="token punctuation">:</span> <span class="token string">&#39;DEPLOY_TO&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">&#39;production&#39;</span> <span class="token punctuation">}</span>

<span class="token comment">//expression 当指定的Groovy表达式评估为true时，执行这个阶段, 例如:</span>
when <span class="token punctuation">{</span> expression <span class="token punctuation">{</span> <span class="token keyword">return</span> params<span class="token punctuation">.</span>DEBUG_BUILD <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">//not 当嵌套条件是错误时，执行这个阶段,必须包含一个条件，例如:</span>
when <span class="token punctuation">{</span> not <span class="token punctuation">{</span> branch <span class="token string">&#39;master&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">//allOf 当所有的嵌套条件都正确时，执行这个阶段,必须包含至少一个条件，例如:</span>
when <span class="token punctuation">{</span> allOf <span class="token punctuation">{</span> branch <span class="token string">&#39;master&#39;</span><span class="token punctuation">;</span> environment name<span class="token punctuation">:</span> <span class="token string">&#39;DEPLOY_TO&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">&#39;production&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token comment">//anyOf 当至少有一个嵌套条件为真时，执行这个阶段,必须包含至少一个条件，例如:</span>
when <span class="token punctuation">{</span> anyOf <span class="token punctuation">{</span> branch <span class="token string">&#39;master&#39;</span><span class="token punctuation">;</span> branch <span class="token string">&#39;staging&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>


<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">&#39;Example Deploy&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    when <span class="token punctuation">{</span>
        branch <span class="token string">&#39;production&#39;</span>
        environment name<span class="token punctuation">:</span> <span class="token string">&#39;DEPLOY_TO&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token string">&#39;production&#39;</span>
    <span class="token punctuation">}</span>
    steps <span class="token punctuation">{</span>
        echo <span class="token string">&#39;Deploying&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-构建-多分支流水线" tabindex="-1"><a class="header-anchor" href="#_7-构建-多分支流水线" aria-hidden="true">#</a> 7. 构建 - 多分支流水线</h2><p>多分支流水线和流水线语法一致，只不过会把所有源码分支列出来</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805151532567.png" alt="image-20220805151532567" tabindex="0" loading="lazy"><figcaption>image-20220805151532567</figcaption></figure><h3 id="_7-1-常见问题" tabindex="-1"><a class="header-anchor" href="#_7-1-常见问题" aria-hidden="true">#</a> 7.1 常见问题</h3><h4 id="_7-1-1-看不到新分支" tabindex="-1"><a class="header-anchor" href="#_7-1-1-看不到新分支" aria-hidden="true">#</a> 7.1.1 看不到新分支</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805152030804.png" alt="image-20220805152030804" tabindex="0" loading="lazy"><figcaption>image-20220805152030804</figcaption></figure><h4 id="_7-1-2-分支太多如何过滤" tabindex="-1"><a class="header-anchor" href="#_7-1-2-分支太多如何过滤" aria-hidden="true">#</a> 7.1.2 分支太多如何过滤</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805152242844.png" alt="image-20220805152242844" tabindex="0" loading="lazy"><figcaption>image-20220805152242844</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,140),b={href:"https://www.jenkins.io/zh/doc/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.k8stech.net/jenkins-docs/basics/introduction/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/zeyangli/Jenkinsdocs",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.mafeifan.com/DevOps/Jenkins/Jenkins2-%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%971----%E4%BD%BF%E7%94%A8Docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88Jenkins.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://java.isture.com/software/jenkins/base/JenkinsPipeline%E4%BB%8B%E7%BB%8D.html",target:"_blank",rel:"noopener noreferrer"};function y(_,x){const s=p("ExternalLinkIcon");return l(),o("div",null,[u,n("ul",null,[n("li",null,[r,n("p",null,[a("访问："),n("a",d,[a("http://localhost:18080/"),e(s)])]),g]),m]),v,n("p",null,[n("a",b,[a("jenkins官方文档"),e(s)])]),n("p",null,[n("a",k,[a("Jenkins简介与应用"),e(s)])]),n("p",null,[n("a",h,[a("Jenkins实践文档"),e(s)])]),n("p",null,[n("a",f,[a("mafeifan 的jenkins"),e(s)])]),n("p",null,[n("a",z,[a("JenkinsPipeline介绍"),e(s)])])])}const q=t(c,[["render",y],["__file","jenkins-overview.html.vue"]]);export{q as default};
