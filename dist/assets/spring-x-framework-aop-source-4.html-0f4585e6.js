const e=JSON.parse('{"key":"v-18e4b886","path":"/dependencies/spring/spring-x-framework-aop-source-4.html","title":"Spring进阶 - Spring AOP实现原理详解之JDK代理实现","lang":"zh-CN","frontmatter":{"order":140,"category":["Spring"],"description":"上文我们学习了SpringAOP Cglib动态代理的实现，本文主要是SpringAOP JDK动态代理的案例和实现部分。 1. 引入 上文我们学习了SpringAOP Cglib动态代理的实现，本文主要是SpringAOP JDK动态代理的案例和实现部分。 1.1 什么是JDK代理? JDK动态代理是由 JDK提供的工具类Proxy实现的，动态代理类...","head":[["meta",{"property":"og:url","content":"http://www.mr-monster.site/dependencies/spring/spring-x-framework-aop-source-4.html"}],["meta",{"property":"og:site_name","content":"Java学习笔记"}],["meta",{"property":"og:title","content":"Spring进阶 - Spring AOP实现原理详解之JDK代理实现"}],["meta",{"property":"og:description","content":"上文我们学习了SpringAOP Cglib动态代理的实现，本文主要是SpringAOP JDK动态代理的案例和实现部分。 1. 引入 上文我们学习了SpringAOP Cglib动态代理的实现，本文主要是SpringAOP JDK动态代理的案例和实现部分。 1.1 什么是JDK代理? JDK动态代理是由 JDK提供的工具类Proxy实现的，动态代理类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-30T07:30:48.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-30T07:30:48.000Z"}]]},"headers":[{"level":2,"title":"1. 引入","slug":"_1-引入","link":"#_1-引入","children":[{"level":3,"title":"1.1 什么是JDK代理?","slug":"_1-1-什么是jdk代理","link":"#_1-1-什么是jdk代理","children":[]}]},{"level":2,"title":"2. JDK动态代理","slug":"_2-jdk动态代理","link":"#_2-jdk动态代理","children":[{"level":3,"title":"2.1 实现原理","slug":"_2-1-实现原理","link":"#_2-1-实现原理","children":[]},{"level":3,"title":"2.2 优点","slug":"_2-2-优点","link":"#_2-2-优点","children":[]},{"level":3,"title":"2.3 缺点","slug":"_2-3-缺点","link":"#_2-3-缺点","children":[]}]},{"level":2,"title":"3. JDK代理的案例","slug":"_3-jdk代理的案例","link":"#_3-jdk代理的案例","children":[{"level":3,"title":"3.1 不需要maven依赖","slug":"_3-1-不需要maven依赖","link":"#_3-1-不需要maven依赖","children":[]},{"level":3,"title":"3.2 定义实体","slug":"_3-2-定义实体","link":"#_3-2-定义实体","children":[]},{"level":3,"title":"3.3 被代理的类和接口","slug":"_3-3-被代理的类和接口","link":"#_3-3-被代理的类和接口","children":[]},{"level":3,"title":"3.4 JDK代理类","slug":"_3-4-jdk代理类","link":"#_3-4-jdk代理类","children":[]},{"level":3,"title":"3.5 使用代理","slug":"_3-5-使用代理","link":"#_3-5-使用代理","children":[]}]},{"level":2,"title":"4. JDK代理的流程","slug":"_4-jdk代理的流程","link":"#_4-jdk代理的流程","children":[{"level":3,"title":"4.1 ProxyGenerator生成代码","slug":"_4-1-proxygenerator生成代码","link":"#_4-1-proxygenerator生成代码","children":[]},{"level":3,"title":"4.2 从生成的Proxy代码看执行流程","slug":"_4-2-从生成的proxy代码看执行流程","link":"#_4-2-从生成的proxy代码看执行流程","children":[]}]},{"level":2,"title":"5. SpringAOP中JDK代理的实现","slug":"_5-springaop中jdk代理的实现","link":"#_5-springaop中jdk代理的实现","children":[{"level":3,"title":"5.1 SpringAOP Jdk代理的创建","slug":"_5-1-springaop-jdk代理的创建","link":"#_5-1-springaop-jdk代理的创建","children":[]},{"level":3,"title":"5.2 SpringAOP Jdk代理的执行","slug":"_5-2-springaop-jdk代理的执行","link":"#_5-2-springaop-jdk代理的执行","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1680161448000,"updatedTime":1680161448000,"contributors":[{"name":"fanweihua","email":"littlemonster163@163.com","commits":1}]},"readingTime":{"minutes":10.44,"words":3133},"filePathRelative":"dependencies/spring/spring-x-framework-aop-source-4.md","localizedDate":"2023年3月30日","autoDesc":true}');export{e as data};
