import{_ as t,W as o,X as i,Y as a,Z as e,$ as n,a0 as s,D as p}from"./framework-f64bc974.js";const l={},c=a("h1",{id:"docker管理-可视化工具portainer",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#docker管理-可视化工具portainer","aria-hidden":"true"},"#"),e(" docker管理 - 可视化工具Portainer")],-1),d=a("h2",{id:"_1-简介",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-简介","aria-hidden":"true"},"#"),e(" 1. 简介")],-1),h={href:"https://github.com/portainer/portainer",target:"_blank",rel:"noopener noreferrer"},k=s(`<h3 id="_1-1-优点" tabindex="-1"><a class="header-anchor" href="#_1-1-优点" aria-hidden="true">#</a> 1.1 优点</h3><ol><li><p>支持容器管理、镜像管理(导入、导出)</p></li><li><p>轻量级，消耗资源少</p></li><li><p>基于docker api，安全性高，可指定docker api端口，支持TLS证书认证</p></li><li><p>支持权限分配</p></li><li><p>支持集群</p></li><li><p>github上目前持续维护更新</p></li></ol><h2 id="_2-下载portainer镜像" tabindex="-1"><a class="header-anchor" href="#_2-下载portainer镜像" aria-hidden="true">#</a> 2. 下载Portainer镜像</h2><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>docker search portainer   <span class="token comment">#搜索当前有哪些Portainer的镜像</span>
docker pull portainer/portainer   <span class="token comment">#pull 标星最多的镜像（STARS数最多的）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-运行portainer镜像" tabindex="-1"><a class="header-anchor" href="#_3-运行portainer镜像" aria-hidden="true">#</a> 3. 运行Portainer镜像</h2><p>运行方式有两种：单机运行 和 集群运行</p><h3 id="_3-1-单机运行" tabindex="-1"><a class="header-anchor" href="#_3-1-单机运行" aria-hidden="true">#</a> 3.1 单机运行</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data <span class="token parameter variable">--name</span> prtainer portainer/portainer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明： -d：容器在后台运行； -p 9000:9000 ：宿主机9000端口映射容器中的9000端口（前面的是宿主机端口，后面的是容器端口）； –restart 标志会检查容器的退出代码，并据此来决定是否要重启容器，默认不会重启； –restart=always：自动重启该容器； -v /var/run/docker.sock:/var/run/docker.sock ：把宿主机的Docker守护进程(Docker daemon)默认监听的Unix域套接字挂载到容器中； -v portainer_data:/data ：把宿主机portainer_data数据卷挂载到容器/data目录； –name prtainer-test ： 给容器起名为portainer-libai；</p><h3 id="_3-2-汉化安装" tabindex="-1"><a class="header-anchor" href="#_3-2-汉化安装" aria-hidden="true">#</a> 3.2 汉化安装：</h3>`,10),u={href:"https://pan.baidu.com/s/1ksUzbf9jkoWiCOSKBH6kEQ",target:"_blank",rel:"noopener noreferrer"},_=s(`<p>将解压后的public文件夹上传到centos系统的根目录下，请注意，是centos系统的根目录。</p><p>然后执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class="token parameter variable">-v</span> portainer_data:/data <span class="token parameter variable">-v</span> /public:/public <span class="token parameter variable">--name</span> prtainer-test portainer/portainer（如果已部署，需要将已部署的容器删除）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>docker ps #查看下进程</p><h2 id="_3-3-使用portainer" tabindex="-1"><a class="header-anchor" href="#_3-3-使用portainer" aria-hidden="true">#</a> 3.3 使用Portainer</h2>`,5),b={href:"http://ip:9000",target:"_blank",rel:"noopener noreferrer"},m=a("figure",null,[a("img",{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221118133933435.png",alt:"image-20221118133933435",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20221118133933435")],-1),v=a("h2",{id:"参考文章",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),e(" 参考文章")],-1),g={href:"https://blog.csdn.net/qq_34528463/article/details/106687234",target:"_blank",rel:"noopener noreferrer"};function f(x,P){const r=p("ExternalLinkIcon");return o(),i("div",null,[c,d,a("p",null,[a("a",h,[e("https://github.com/portainer/portainer"),n(r)]),e(" Portainer是一个轻量级的管理UI，可让您轻松管理不同的Docker环境（Docker主机或Swarm集群）。 Portainer的意图是易于部署和使用。它由一个可以在任何Docker引擎上运行的容器组成（可以部署为Linux容器或Windows本机容器，也支持其他平台）。 Portainer允许您管理所有Docker资源（容器，映像，卷，网络等）！它与独立的Docker引擎和 Docker Swarm模式兼容。")]),k,a("p",null,[e("默认安装的是英文版的，有需要中文汉化的可以上传汉化包进行汉化。（"),a("a",u,[e("汉化版点击下载"),n(r)]),e("）提取码：6chp")]),_,a("p",null,[e("地址："),a("a",b,[e("http://ip:9000"),n(r)]),e("，首次访问需要先创建管理员账号和密码，设置下")]),m,v,a("p",null,[a("a",g,[e("docker可视化管理——Portainer安装教程"),n(r)])])])}const D=t(l,[["render",f],["__file","docker-y-manage-portainer.html.vue"]]);export{D as default};
