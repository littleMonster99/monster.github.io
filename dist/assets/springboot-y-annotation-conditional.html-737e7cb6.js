import{_ as s,W as e,X as t,Y as n,Z as o,$ as i,a0 as p,D as c}from"./framework-f64bc974.js";const l={},u=p(`<h1 id="conditional注解根据条件注入bean到容器" tabindex="-1"><a class="header-anchor" href="#conditional注解根据条件注入bean到容器" aria-hidden="true">#</a> @Conditional注解根据条件注入Bean到容器</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p><code>@Conditional</code>是Spring4新提供的注解，它的作用是按照一定条件进行判断，满足条件就将bean注册到容器。</p><h3 id="_1-1-conditional源码" tabindex="-1"><a class="header-anchor" href="#_1-1-conditional源码" aria-hidden="true">#</a> 1.1 @Conditional源码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Conditional</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * All <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Condition</span></span> Conditions<span class="token punctuation">}</span> that must <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token class-name">Condition</span><span class="token punctuation">#</span><span class="token field">matches</span></span> match<span class="token punctuation">}</span>
	 * in order for the component to be registered.
	 */</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Condition</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码中可以看到，需要传入一个class数组，并且继承<code>Condition</code>接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>

	<span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>Condition</code>是个接口，需要实现matches方法，返回true则注入bean，false则不注入。</strong></p><h2 id="_2-为什么使用-condition" tabindex="-1"><a class="header-anchor" href="#_2-为什么使用-condition" aria-hidden="true">#</a> 2. 为什么使用@Condition</h2><p>我们想实现，根据不同操作系统，加载不同的实例</p><h3 id="_2-1-不使用-conditional注解的情况" tabindex="-1"><a class="header-anchor" href="#_2-1-不使用-conditional注解的情况" aria-hidden="true">#</a> 2.1 不使用<code>@Conditional</code>注解的情况</h3><h4 id="_2-1-1-system" tabindex="-1"><a class="header-anchor" href="#_2-1-1-system" aria-hidden="true">#</a> 2.1.1 <code>System</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">System</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;System{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-2-beanconfig" tabindex="-1"><a class="header-anchor" href="#_2-1-2-beanconfig" aria-hidden="true">#</a> 2.1.2 <code>BeanConfig</code></h4><p>创建<code>BeanConfig</code>类，用于配置2个System实例，并注入Windows、Linux。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-3-conditionaltest" tabindex="-1"><a class="header-anchor" href="#_2-1-3-conditionaltest" aria-hidden="true">#</a> 2.1.3 <code>ConditionalTest</code></h4><p>接着写一个测试类，验证两个Bean是否注入成功。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionalTest</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">BeanConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">&gt;</span></span> beans <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>beans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行，输出结果：两个Bean实例都被注入进容器。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220510105819119.png" alt="image-20220510105819119" tabindex="0" loading="lazy"><figcaption>image-20220510105819119</figcaption></figure><p>现在问题来了，如果我想根据当前操作系统来注入<code>System</code>实例，window下注入Windows实例，Linux下注入Linux实例，怎么实现呢？</p><p>这就需要用到<code>@Conditional</code>注解了，前言中提到，需要实现<code>Condition</code>接口，并重写方法来自定义match规则</p><h3 id="_2-2-conditional作用在方法上" tabindex="-1"><a class="header-anchor" href="#_2-2-conditional作用在方法上" aria-hidden="true">#</a> 2.2 <code>@Conditional</code>作用在方法上</h3><h4 id="_2-2-1-windowscondition" tabindex="-1"><a class="header-anchor" href="#_2-2-1-windowscondition" aria-hidden="true">#</a> 2.2.1 <code>WindowsCondition</code></h4><p>首先，创建一个<code>WindowsCondition</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获得当前系统名</span>
        <span class="token class-name">String</span> property <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//包含Windows则说明是windows系统，返回true</span>
        <span class="token keyword">return</span> property <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-linuxcondition" tabindex="-1"><a class="header-anchor" href="#_2-2-2-linuxcondition" aria-hidden="true">#</a> 2.2.2 <code>LinuxCondition</code></h4><p>接着，创建<code>LinuxCondition</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinuxCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> property <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> property <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-修改beanconfig" tabindex="-1"><a class="header-anchor" href="#_2-2-3-修改beanconfig" aria-hidden="true">#</a> 2.2.3 修改<code>BeanConfig</code></h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">WindowsCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">LinuxCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-conditionaltest" tabindex="-1"><a class="header-anchor" href="#_2-2-4-conditionaltest" aria-hidden="true">#</a> 2.2.4 <code>ConditionalTest</code></h4><p>修改测试方法，使其可以打印当前系统名：</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>public class ConditionalTest {
    AnnotationConfigApplicationContext applicationContext = new AnnotationConfigApplicationContext(BeanConfig.class);

    @Test
    public void test1() {
        String osName = applicationContext.getEnvironment().getProperty(&quot;os.name&quot;);
        java.lang.System.out.println(osName);
        Map&lt;String, System&gt; beans = applicationContext.getBeansOfType(System.class);
        java.lang.System.out.println(beans);
    }

}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220510110444045.png" alt="image-20220510110444045" tabindex="0" loading="lazy"><figcaption>image-20220510110444045</figcaption></figure><p><strong>一个方法只能注入一个bean实例，所以@Conditional标注在方法上只能控制一个bean实例是否注入。</strong></p><h3 id="_2-3-conditional作用在类上" tabindex="-1"><a class="header-anchor" href="#_2-3-conditional作用在类上" aria-hidden="true">#</a> 2.3 <code>@Conditional</code>作用在类上</h3><p><strong>一个类中可以注入很多实例，@Conditional标注在类上就决定了一批bean是否注入。</strong></p><h4 id="_2-3-1-修改beanconfig类" tabindex="-1"><a class="header-anchor" href="#_2-3-1-修改beanconfig类" aria-hidden="true">#</a> 2.3.1 修改BeanConfig类：</h4><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>@Configuration
@Conditional(WindowsCondition.class)
public class BeanConfig {

    @Bean(name = &quot;windows&quot;)
    public System system1() {
        return new System(&quot;Windows&quot;);
    }

    @Bean(name = &quot;linux&quot;)
    public System system2() {
        return new System(&quot;Linux&quot;);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试结果：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220510110852635.png" alt="image-20220510110852635" tabindex="0" loading="lazy"><figcaption>image-20220510110852635</figcaption></figure><p>结果表明，当condition条件成立，<code>BeanConfig</code>类中存在<code>@Bean</code>注解的实例都注入到容器。</p><h3 id="_2-4-多个条件" tabindex="-1"><a class="header-anchor" href="#_2-4-多个条件" aria-hidden="true">#</a> 2.4 多个条件</h3><p>前言中说，@Conditional注解传入的是一个Class数组，存在多种条件类的情况。</p><h4 id="_2-4-1testcondition" tabindex="-1"><a class="header-anchor" href="#_2-4-1testcondition" aria-hidden="true">#</a> 2.4.1<code>TestCondition</code></h4><p>新增新的测试条件类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-2-beanconfig修改一下" tabindex="-1"><a class="header-anchor" href="#_2-4-2-beanconfig修改一下" aria-hidden="true">#</a> 2.4.2 <code>BeanConfig</code>修改一下：</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">WindowsCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">TestCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;windows&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">WindowsCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">System</span> <span class="token function">system2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">System</span><span class="token punctuation">(</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-3-结果" tabindex="-1"><a class="header-anchor" href="#_2-4-3-结果" aria-hidden="true">#</a> 2.4.3 结果：</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220510111135640.png" alt="image-20220510111135640" tabindex="0" loading="lazy"><figcaption>image-20220510111135640</figcaption></figure><p>结论：</p><p>当存在多个条件时，所有<code>Condition</code>实现类<code>match</code>方法均返回true，才会将<code>Bean</code>注入到容器。</p><h2 id="_3-springboot对-conditional的扩展" tabindex="-1"><a class="header-anchor" href="#_3-springboot对-conditional的扩展" aria-hidden="true">#</a> 3. springboot对<code>@Conditional</code>的扩展</h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><ul><li>@Conditional是springboot实现自动配置的关键基础能力。在此基础上，springboot又创建了多个适用于不同场景的组合条件注解。</li><li>@ConditionalOnBean：当上下文中有指定Bean的条件下进行实例化。</li><li>@ConditionalOnMissingBean：当上下文没有指定Bean的条件下进行实例化。</li><li>@ConditionalOnClass：当classpath类路径下有指定类的条件下进行实例化。</li><li>@ConditionalOnMissingClass：当类路径下没有指定类的条件下进行实例化。</li><li>@ConditionalOnWebApplication：当项目本身是一个Web项目时进行实例化。</li><li>@ConditionalOnNotWebApplication：当项目本身不是一个Web项目时进行实例化。</li><li>@ConditionalOnProperty：当指定的属性有指定的值时进行实例化。</li><li>@ConditionalOnExpression：基于SpEL表达式的条件判断。</li><li>@ConditionalOnJava：当JVM版本为指定的版本范围时进行实例化。</li><li>@ConditionalOnResource：当类路径下有指定的资源时进行实例化。</li><li>@ConditionalOnJndi：在JNDI存在时触发实例化。</li><li>@ConditionalOnSingleCandidate：当指定的Bean在容器中只有一个，或者有多个但是指定了首选的Bean时触发实例化。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,59),d={href:"https://juejin.cn/post/6844904200401321997",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const a=c("ExternalLinkIcon");return e(),t("div",null,[u,n("p",null,[n("a",d,[o("详解Spring @Conditional 注解"),i(a)])])])}const b=s(l,[["render",r],["__file","springboot-y-annotation-conditional.html.vue"]]);export{b as default};
