import{_ as o,W as t,X as i,Y as n,Z as s,$ as e,a0 as l,D as c}from"./framework-f64bc974.js";const p={},r=l(`<h1 id="springboot集成文件-大文件的上传-异步-分片-断点续传和秒传" tabindex="-1"><a class="header-anchor" href="#springboot集成文件-大文件的上传-异步-分片-断点续传和秒传" aria-hidden="true">#</a> SpringBoot集成文件 - 大文件的上传(异步，分片，断点续传和秒传)</h1><blockquote><p>上文中介绍的是常规文件的上传和下载，而超大文件的上传技术手段和普通文件上传是有差异的，主要通过基于分片的断点续传和秒传和异步上传等技术手段解决。本文主要介绍SpringBoot集成大文件上传的案例。</p></blockquote><h2 id="_1-知识准备" tabindex="-1"><a class="header-anchor" href="#_1-知识准备" aria-hidden="true">#</a> 1. 知识准备</h2><blockquote><p>大文件的上传技术手段和普通文件上传是有差异的，主要通过基于分片的断点续传和秒传和异步上传解决。</p></blockquote><h3 id="_1-1-大文件面临的问题" tabindex="-1"><a class="header-anchor" href="#_1-1-大文件面临的问题" aria-hidden="true">#</a> 1.1 大文件面临的问题</h3><ol><li>上传速度慢 -- 应对: <strong>分块上传</strong></li><li>上传文件到一半中断后，继续上传却只能重头开始上传 -- 应对: <strong>断点续传</strong></li><li>相同文件未修改再次上传, 却只能重头开始上传 -- 应对: <strong>秒传</strong></li></ol><h3 id="_1-2-基于分片的断点续传和秒传" tabindex="-1"><a class="header-anchor" href="#_1-2-基于分片的断点续传和秒传" aria-hidden="true">#</a> 1.2 基于分片的断点续传和秒传</h3><blockquote><p>当我们上传的文件很大时，对大文件的处理通常通过<strong>分片上传</strong>、<strong>断点续传</strong>和<strong>秒传</strong>技术手段实现。</p></blockquote><ul><li><strong>分片上传</strong></li></ul><p>分片上传就是将一个大文件分成若干份大小相等的小块文件，等所有小块文件上传成功后，再将文件进行合并成完整的原始文件。</p><ul><li><strong>断点续传</strong></li></ul><p>断点续传就是重新上传文件时<strong>先判断哪些文件块已经上传过了</strong>（比如将分片的chuck md5等信息保存在DB中)，如果上传过了则跳过这些块，否则上传没有上传的块。</p><ul><li><strong>秒传</strong></li></ul><p>当用户选择上传一个文件时，服务端检测该文件之前是否已经被上传过，如果服务器已经存有该文件（完全一样），就立马返回前端 “文件已上传成功”。前端随即将进度条更新至100%。 这样给用户的感觉就是 “秒传” 的感觉。</p><h4 id="_1-2-1-前后端该怎么做" tabindex="-1"><a class="header-anchor" href="#_1-2-1-前后端该怎么做" aria-hidden="true">#</a> 1.2.1 前后端该怎么做？</h4><p>对于分片上传，<strong>前后端分别需要怎么做呢</strong>？</p><ol><li><strong>前端</strong>：需要将文件file.slice()成多个文件块，并计算每一块的md5值，每次请求上传都是传一个小文件块。</li><li><strong>后端</strong>：需要接收每次上传的文件块并保存文件块的信息（比如md5), 如果已经上传则跳过；最后等所有文件上传完成之后，将所有的文件块合并成一个大文件。</li></ol><h3 id="_1-3-异步上传" tabindex="-1"><a class="header-anchor" href="#_1-3-异步上传" aria-hidden="true">#</a> 1.3 异步上传</h3><blockquote><p>当我们上传的文件很大，后台需要处理的时间很长，用户期望切换到其它页面继续工作，而不需要等待完成。这时候我们可以采用异步上传的方式。</p></blockquote><p>在SpringBoot中将一个方法声明为异步方法非常简单，只需两个注解即可<code>@EnableAsync</code>和<code>@Async</code>。</p><ol><li><code>@EnableAsync</code>用于开启SpringBoot支持异步的功能，用在SpringBoot的启动类上。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableAsync</span> <span class="token comment">// 这里</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
 
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">App</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>@Async</code>用于方法上，标记该方法为异步处理方法。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">{</span>
 
    <span class="token annotation punctuation">@Async</span> <span class="token comment">// 这里带@Async的方法，会被当成一个子线程</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processFile</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,25),d={href:"https://pdai.tech/md/spring/springboot/springboot-x-file-upload-bigfile.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/fly910905/article/details/114284285",target:"_blank",rel:"noopener noreferrer"};function k(g,h){const a=c("ExternalLinkIcon");return t(),i("div",null,[r,n("p",null,[n("a",d,[s("SpringBoot集成文件 - 大文件的上传(异步，分片，断点续传和秒传)"),e(a)])]),n("p",null,[n("a",u,[s("基于SpringBoot和WebUploader实现大文件分块上传.断点续传.秒传"),e(a)])])])}const v=o(p,[["render",k],["__file","springboot-y-file-bigfile-upload.html.vue"]]);export{v as default};
