import{_ as s,W as i,X as r,Y as e,Z as t,$ as d,a0 as n,D as l}from"./framework-f64bc974.js";const o={},c=n('<h1 id="like模糊查询优化" tabindex="-1"><a class="header-anchor" href="#like模糊查询优化" aria-hidden="true">#</a> like模糊查询优化</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>在使用mysql进行模糊查询的时候，很自容的会用到 like 语句，通常情况下，在数量小的时候，不容易看出查询效率，<strong>但在数据量达到百万级，千万级的时候</strong>，查询的效率就很容易显现出来。这个时候查询的效率就显得很重要！</p><p>一般情况下like模糊查询的写法为（field已建立索引）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT `column` FROM `table` WHERE `field` like `%keyword%`\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的语句用explain解释来看，SQL语句并未用到索引，而且是全表索引，如果在数据量超大的时候，可想而知最后的效率会是怎么样</p><h2 id="_2-对照组" tabindex="-1"><a class="header-anchor" href="#_2-对照组" aria-hidden="true">#</a> 2. 对照组</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT `column` FROM `table` WHERE `field` like &#39;keyword%&#39;; \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样的写法用explain解释看到，SQL语句使用了索引，搜索的效率大大的提高了</p><p>但是有的时候，我们再作模糊查询的时候，并非要想查询的关键字都在开头，所以如果不是特别的要求，&quot;ketwork%&quot;并不适合所有的模糊查询</p><h2 id="_3-解决方案" tabindex="-1"><a class="header-anchor" href="#_3-解决方案" aria-hidden="true">#</a> 3. 解决方案</h2><h3 id="_3-1-locate-substr-str-pos-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-locate-substr-str-pos-方法" aria-hidden="true">#</a> 3.1 LOCATE（&#39;substr&#39;,str,pos）方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT LOCATE(&#39;xbar&#39;,`foobar`);   返回0 \nSELECT LOCATE(&#39;bar&#39;,`foobarbar`);  返回4\nSELECT LOCATE(&#39;bar&#39;,`foobarbar`,**5**); 返回7\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>备注：</p><ul><li>返回substr 的str中第一次出现的问题，如果substr 在str中不存在，返回值为0.</li><li>如果pos存在，返回substr 在第pos个位置后第一次出现的位置，如果substr中的str中不存在，返回值为0</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT `column` FROM `table` WHERE LOCATE(&#39;keyword&#39;, `field`)&gt;0 \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>备注：keyword是要搜索的内容，field为被匹配的字段，查询出所有存在keyword的数据</p><h3 id="_3-2-position-substr-in-field-方法" tabindex="-1"><a class="header-anchor" href="#_3-2-position-substr-in-field-方法" aria-hidden="true">#</a> 3.2 POSITION(&#39;substr&#39; IN <code>field</code>)方法</h3><p>position可以看做是locate的别名，功能跟locate一样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT `column` FROM `table` WHERE POSITION(&#39;keyword&#39; IN `filed`)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-instr-str-substr-方法" tabindex="-1"><a class="header-anchor" href="#_3-3-instr-str-substr-方法" aria-hidden="true">#</a> 3.3 INSTR(<code>str</code>,&#39;substr&#39;)方法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT `column` FROM `table` WHERE INSTR(`field`, &#39;keyword&#39; )&gt;0\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-4-find-in-set-str1-str2" tabindex="-1"><a class="header-anchor" href="#_3-4-find-in-set-str1-str2" aria-hidden="true">#</a> 3.4 FIND_IN_SET(str1,str2):</h3><p>返回str2中str1所在的位置索引，其中str2必须以&quot;,&quot;分割开。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM `person` WHERE FIND_IN_SET(&#39;apply&#39;,`name`);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',26),u={href:"https://yq.aliyun.com/articles/674870",target:"_blank",rel:"noopener noreferrer"};function h(b,p){const a=l("ExternalLinkIcon");return i(),r("div",null,[c,e("p",null,[e("a",u,[t("mysql 优化 - like模糊查询优化"),d(a)])])])}const v=s(o,[["render",h],["__file","mysql-x-optimize-like.html.vue"]]);export{v as default};
