import{_ as t,W as o,X as c,Y as n,Z as s,$ as p,a0 as a,D as l}from"./framework-f64bc974.js";const i={},u=a(`<h1 id="mybatis-pagehelper分页" tabindex="-1"><a class="header-anchor" href="#mybatis-pagehelper分页" aria-hidden="true">#</a> MyBatis PageHelper分页</h1><h2 id="_1-准备知识" tabindex="-1"><a class="header-anchor" href="#_1-准备知识" aria-hidden="true">#</a> 1. 准备知识</h2><blockquote><p>MyBatis的相关知识体系以及常见的数据库分页方式，MySQL物理分页的方式等。</p></blockquote><h3 id="_1-1-逻辑分页和物理分页的区别" tabindex="-1"><a class="header-anchor" href="#_1-1-逻辑分页和物理分页的区别" aria-hidden="true">#</a> 1.1 逻辑分页和物理分页的区别？</h3><blockquote><p>为什么会出现PageHelper这类框架？</p></blockquote><p>这便要从逻辑分页和物理分页开始说起：</p><ul><li><strong>逻辑分页</strong>：从数据库将所有记录查询出来，存储到内存中，展示当前页，然后数据再直接从内存中获取（前台分页）</li><li><strong>物理分页</strong>：只从数据库中查询当前页的数据（后台分页）</li></ul><p>由于MyBatis默认实现中采用的是逻辑分页，所以才诞生了PageHelper一类的物理分页框架。hibernate不要是因为hibernate采用的就是物理分页。</p><h3 id="_1-2-不同数据库的物理分页是如何实现的" tabindex="-1"><a class="header-anchor" href="#_1-2-不同数据库的物理分页是如何实现的" aria-hidden="true">#</a> 1.2 不同数据库的物理分页是如何实现的？</h3><blockquote><p>那物理分页通常是如何实现的呢？</p></blockquote><p>不同的数据库有不同的实现方式：（简单而言：mysql 使用limit ，SQLServer 使用top ，Oracle使用rowNum）</p><ul><li><strong>MySQL 使用LIMIT</strong></li></ul><p>例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> username<span class="token punctuation">,</span> password 
<span class="token keyword">FROM</span> tb_user 
<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span> 
<span class="token keyword">LIMIT</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>SQLServer 2012 使用top</strong></li></ul><p>SQL SERVER 2012 支持了OFFSET + TOP方式提高了性能</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">top</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> LastName<span class="token punctuation">,</span> FirstName<span class="token punctuation">,</span> EmailAddress
<span class="token keyword">FROM</span> Employee
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LastName<span class="token punctuation">,</span> FirstName<span class="token punctuation">,</span> EmailAddress
<span class="token keyword">OFFSET</span> <span class="token number">14000</span> <span class="token keyword">ROWS</span>
<span class="token keyword">FETCH</span> <span class="token keyword">NEXT</span> <span class="token number">50</span> <span class="token keyword">ROWS</span> ONLY<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ORACLE</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>  
  <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> AA<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> ROWNUM RN  
          <span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> USERS <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> ID <span class="token keyword">DESC</span><span class="token punctuation">)</span> AA  
         <span class="token keyword">WHERE</span> ROWNUM <span class="token operator">&lt;=</span> <span class="token number">10</span> <span class="token punctuation">)</span>  
 <span class="token keyword">WHERE</span> RN <span class="token operator">&gt;</span> <span class="token number">0</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（这里只是给你简单介绍，感兴趣的可以去查找更多的资料）</p><h3 id="_1-3-pagehelper是如何实现物理分页的前提-mybatis的插件机制" tabindex="-1"><a class="header-anchor" href="#_1-3-pagehelper是如何实现物理分页的前提-mybatis的插件机制" aria-hidden="true">#</a> 1.3 PageHelper是如何实现物理分页的前提:MyBatis的插件机制？</h3><blockquote><p>这就要谈到MyBatis的插件机制</p></blockquote><p>具体请参考这两篇文章</p><ul><li>MyBatis详解 - 插件机制 <ul><li>MyBatis提供了一种插件(plugin)的功能，虽然叫做插件，但其实这是拦截器功能。那么拦截器拦截MyBatis中的哪些内容呢？</li></ul></li><li>MyBatis详解 - 插件之分页机制 <ul><li>Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页</li></ul></li></ul><h2 id="_2-简单示例" tabindex="-1"><a class="header-anchor" href="#_2-简单示例" aria-hidden="true">#</a> 2. 简单示例</h2>`,25),r={href:"https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md",target:"_blank",rel:"noopener noreferrer"},k=a(`<h3 id="_2-1-第一种-rowbounds方式的调用" tabindex="-1"><a class="header-anchor" href="#_2-1-第一种-rowbounds方式的调用" aria-hidden="true">#</a> 2.1 第一种：RowBounds方式的调用</h3><p>第一种，RowBounds方式的调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;x.y.selectIf&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-第二种-mapper接口方式的调用startpage" tabindex="-1"><a class="header-anchor" href="#_2-2-第二种-mapper接口方式的调用startpage" aria-hidden="true">#</a> 2.2 第二种：Mapper接口方式的调用startPage</h3><p>第二种，Mapper接口方式的调用，推荐这种使用方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-第三种-mapper接口方式的调用offsetpage" tabindex="-1"><a class="header-anchor" href="#_2-3-第三种-mapper接口方式的调用offsetpage" aria-hidden="true">#</a> 2.3 第三种：Mapper接口方式的调用offsetPage</h3><p>第三种，Mapper接口方式的调用，推荐这种使用方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">offsetPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectIf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-第四种-参数方法调用" tabindex="-1"><a class="header-anchor" href="#_2-4-第四种-参数方法调用" aria-hidden="true">#</a> 2.4 第四种:参数方法调用</h3><p>第四种:参数方法调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>
            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;pageNum&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageNum<span class="token punctuation">,</span> 
            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;pageSize&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//配置supportMethodsArguments=true</span>
<span class="token comment">//在代码中直接调用：</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-第五种-参数对象" tabindex="-1"><a class="header-anchor" href="#_2-5-第五种-参数对象" aria-hidden="true">#</a> 2.5 第五种:参数对象</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//如果 pageNum 和 pageSize 存在于 User 对象中，只要参数有值，也会被分页</span>
<span class="token comment">//有如下 User 对象</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">//其他fields</span>
    <span class="token comment">//下面两个参数名和 params 配置的名字一致</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageNum<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//存在以下 Mapper 接口方法，你不需要在 xml 处理后两个参数</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//当 user 中的 pageNum!= null &amp;&amp; pageSize!= null 时，会自动分页</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByPageNumSize</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-第六种-iselect-接口方式" tabindex="-1"><a class="header-anchor" href="#_2-6-第六种-iselect-接口方式" aria-hidden="true">#</a> 2.6 第六种：ISelect 接口方式</h3><p>jdk6,7用法，创建接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jdk8 lambda用法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> userMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以直接返回PageInfo，注意doSelectPageInfo方法和doSelectPage</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>pageInfo <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPageInfo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的lambda用法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>pageInfo <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doSelectPageInfo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> userMapper<span class="token punctuation">.</span><span class="token function">selectGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>count查询，返回一个查询语句的count数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">long</span> total <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ISelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectLike</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的lambda用法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>total <span class="token operator">=</span> <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>userMapper<span class="token punctuation">.</span><span class="token function">selectLike</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-进一步理解" tabindex="-1"><a class="header-anchor" href="#_3-进一步理解" aria-hidden="true">#</a> 3. 进一步理解</h2><blockquote><p>我们通过如下问题进一步理解PageHelper分页。</p></blockquote><h3 id="_3-1-pagehelper是如何实现分页的" tabindex="-1"><a class="header-anchor" href="#_3-1-pagehelper是如何实现分页的" aria-hidden="true">#</a> 3.1 PageHelper是如何实现分页的？</h3><blockquote><p>我们知道如何使用PageHelper后，我们发现使用<code>PageHelper.startPage(pageNum, pageSize, orderBy)</code>方法后的第一个select是具备分页能力的，那它是如何做到的呢？</p></blockquote><p>理解它的原理，有两个点：</p><ol><li>第一，相对对于JDBC这种嵌入式的分页而言，PageHelper分页是独立的，能做到独立分页查询，那它<strong>必然是通过某个拦截点进行了拦截，这样它才能够进行解耦分离出分页</strong>。</li><li>第二，我们通过<code>PageHelper.startPage(pageNum, pageSize, orderBy)</code>方法后的第一个select是具备分页能力的，那它<strong>必然缓存了分页信息，同时结合线程知识，这里必然使用的是本地栈ThreadLocal</strong>，即每个线程有一个本地缓存。</li></ol><p>所以结合这两点，聪明的你就会想到它大概是如何实现的，关键就是两点（拦截，ThreadLocal), 我们看下源码：</p><p>简单看下拦截</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Mybatis拦截器方法
 *
 * <span class="token keyword">@param</span> <span class="token parameter">invocation</span> 拦截器入参
 * <span class="token keyword">@return</span> 返回执行结果
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> 抛出异常
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>autoRuntimeDialect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlUtil</span> sqlUtil <span class="token operator">=</span> <span class="token function">getSqlUtil</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sqlUtil<span class="token punctuation">.</span><span class="token function">processPage</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoDialect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">initSqlUtil</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sqlUtil<span class="token punctuation">.</span><span class="token function">processPage</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进而看下<code>sqlUtil.processPage(invocation);</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@param</span> <span class="token parameter">invocation</span> 拦截器入参
 * <span class="token keyword">@return</span> 返回执行结果
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> 抛出异常
 */</span>
<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">_processPage</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Page</span> page <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">//支持方法参数时，会先尝试获取Page</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>supportMethodsArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从线程本地变量中获取Page信息，就是我们刚刚设置的</span>
        page <span class="token operator">=</span> <span class="token function">getPage</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//分页信息</span>
    <span class="token class-name">RowBounds</span> rowBounds <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RowBounds</span><span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//支持方法参数时，如果page == null就说明没有分页条件，不需要分页查询</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>supportMethodsArguments <span class="token operator">&amp;&amp;</span> page <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">//当不支持分页参数时，判断LocalPage和RowBounds判断是否需要分页</span>
            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportMethodsArguments <span class="token operator">&amp;&amp;</span> <span class="token class-name">SqlUtil</span><span class="token punctuation">.</span><span class="token function">getLocalPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> rowBounds <span class="token operator">==</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//不支持分页参数时，page==null，这里需要获取</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportMethodsArguments <span class="token operator">&amp;&amp;</span> page <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            page <span class="token operator">=</span> <span class="token function">getPage</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 进入查看</span>
        <span class="token keyword">return</span> <span class="token function">doProcessPage</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> page<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以<code>startPage方法</code>和这里的<code>getPage(args);</code>这方法里应该包含了ThreadLocal中设置和获取分页参数的，让我们看下startPage方法即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">startPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> pageNum<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token keyword">boolean</span> count<span class="token punctuation">,</span> <span class="token class-name">Boolean</span> reasonable<span class="token punctuation">,</span> <span class="token class-name">Boolean</span> pageSizeZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    page<span class="token punctuation">.</span><span class="token function">setReasonable</span><span class="token punctuation">(</span>reasonable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    page<span class="token punctuation">.</span><span class="token function">setPageSizeZero</span><span class="token punctuation">(</span>pageSizeZero<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> oldPage <span class="token operator">=</span> <span class="token function">getLocalPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldPage <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> oldPage<span class="token punctuation">.</span><span class="token function">isOrderByOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        page<span class="token punctuation">.</span><span class="token function">setOrderBy</span><span class="token punctuation">(</span>oldPage<span class="token punctuation">.</span><span class="token function">getOrderBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">setLocalPage</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> page<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// ...</span>
<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Page</span><span class="token punctuation">&gt;</span></span> <span class="token constant">LOCAL_PAGE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setLocalPage</span><span class="token punctuation">(</span><span class="token class-name">Page</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token constant">LOCAL_PAGE</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 看这里</span>
<span class="token punctuation">}</span>

<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>所以这里提示下想进阶的开发者，源码的阅读是伴随着思路现行的（有了思路，简单看源码），而不是直接源码。</p></blockquote><h3 id="_3-2-使用pagehelper有何注意点" tabindex="-1"><a class="header-anchor" href="#_3-2-使用pagehelper有何注意点" aria-hidden="true">#</a> 3.2 使用PageHelper有何注意点</h3>`,42),d={href:"https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/Important.md",target:"_blank",rel:"noopener noreferrer"},m=a("<ol><li>只有紧跟在<code>PageHelper.startPage</code>方法后的<strong>第一个</strong>Mybatis的**查询（Select）**方法会被分页。</li><li>请不要配置多个分页插件：请不要在系统中配置多个分页插件(使用Spring时,<code>mybatis-config.xml</code>和<code>Spring&lt;bean&gt;</code>配置方式，请选择其中一种，不要同时配置多个分页插件)！</li><li>分页插件不支持带有<code>for update</code>语句的分页：对于带有<code>for update</code>的sql，会抛出运行时异常，对于这样的sql建议手动分页，毕竟这样的sql需要重视。</li><li>分页插件不支持嵌套结果映射: 由于嵌套结果方式会导致结果集被折叠，因此分页查询的结果在折叠后总数会减少，所以无法保证分页结果数量正确。</li></ol>",1);function v(g,b){const e=l("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("PageHelper 有多种用法，这里主要介绍官网提供的几种常见用法。具体请参考"),n("a",r,[s("官网的介绍"),p(e)])])]),k,n("blockquote",null,[n("p",null,[n("a",d,[s("看官网的说明"),p(e)])])]),m])}const y=t(i,[["render",v],["__file","mybatis-i-pagehelper.html.vue"]]);export{y as default};
