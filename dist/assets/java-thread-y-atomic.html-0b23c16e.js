import{_ as s,W as e,X as t,Y as n,Z as o,$ as c,a0 as i,D as p}from"./framework-f64bc974.js";const l={},r=i(`<h1 id="atomic原子类" tabindex="-1"><a class="header-anchor" href="#atomic原子类" aria-hidden="true">#</a> Atomic原子类</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Java从JDK1.5开始提供了java.util.concurrent.atomic包，<strong>atomic包中的类用于在多线程环境下实现单个变量多个独立操作（比如读-写）的连续原子性。</strong></p><p>并且都比较高效，因为它们都是由基于偏移量（类似于指针）的<strong>非阻塞CAS算法实现，用于替代锁的使用。</strong></p><blockquote><p>无锁的进行原子操作，用于替代锁的使用</p><p>原理：<strong>volatile字段修饰符+CAS算法（Unsafe提供）</strong></p></blockquote><h2 id="_2-juc包中的4类原子类" tabindex="-1"><a class="header-anchor" href="#_2-juc包中的4类原子类" aria-hidden="true">#</a> 2. JUC包中的4类原子类</h2><p>并发包 <code>java.util.concurrent</code> 的原子类都存放在<code>java.util.concurrent.atomic</code>下,如下图所示。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20190917225827634.png" alt="image-20190917225827634" tabindex="0" loading="lazy"><figcaption>image-20190917225827634</figcaption></figure><h3 id="_2-1-基本类型" tabindex="-1"><a class="header-anchor" href="#_2-1-基本类型" aria-hidden="true">#</a> <strong>2.1 基本类型</strong></h3><p>使用原子的方式更新基本类型</p><ul><li>AtomicInteger：整形原子类</li><li>AtomicLong：长整型原子类</li><li>AtomicBoolean：布尔型原子类</li></ul><h3 id="_2-2-数组类型" tabindex="-1"><a class="header-anchor" href="#_2-2-数组类型" aria-hidden="true">#</a> <strong>2.2 数组类型</strong></h3><p>使用原子的方式更新数组里的某个元素</p><ul><li>AtomicIntegerArray：整形数组原子类</li><li>AtomicLongArray：长整形数组原子类</li><li>AtomicReferenceArray：引用类型数组原子类</li></ul><h3 id="_2-3-引用类型" tabindex="-1"><a class="header-anchor" href="#_2-3-引用类型" aria-hidden="true">#</a> 2.3 <strong>引用类型</strong></h3><ul><li>AtomicReference：引用类型原子类</li><li>AtomicStampedReference：原子更新引用类型里的字段原子类</li><li>AtomicMarkableReference ：原子更新带有标记位的引用类型</li></ul><h3 id="_2-4-对象的属性修改类型" tabindex="-1"><a class="header-anchor" href="#_2-4-对象的属性修改类型" aria-hidden="true">#</a> <strong>2.4 对象的属性修改类型</strong></h3><ul><li>AtomicIntegerFieldUpdater：原子更新整形字段的更新器</li><li>AtomicLongFieldUpdater：原子更新长整形字段的更新器</li><li>AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。</li></ul><h2 id="_3-带版本号的原子类" tabindex="-1"><a class="header-anchor" href="#_3-带版本号的原子类" aria-hidden="true">#</a> 3. 带版本号的原子类</h2><p>通过原子的方式更新单个变量的原子类的升级版，Atomic包提供了以下2个类：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. AtomicMarkableReference&lt; V &gt;：维护带有标记位的对象引用，可以原子方式对其进行更新。
2. AtomicStampedReference&lt; V &gt;：维护带有整数标志的对象引用，可用原子方式对其进行更新。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两个原子类的方法以及原理几乎一致，属于带有版本号的原子类。</p><h3 id="_3-1-为什么需要带版本号-aba问题" tabindex="-1"><a class="header-anchor" href="#_3-1-为什么需要带版本号-aba问题" aria-hidden="true">#</a> 3.1 为什么需要带版本号？（ABA问题）</h3><p>我们知道CAS操作的三大问题之一就是“ABA”问题：<strong>CAS在操作值的时候，需要检查预期值有没有发生变化，如果没有发生变化则更新。但是，如果一个线程t1首先获取了预期值A，此时另一个线程t2则将值从A变成了B，随后又变成了A，随后t1再使用CAS进行比较交换的时候，会发现它的预期值“没有变化”，但实际上是变化过的。这就是ABA问题的由来</strong>。</p><h3 id="_3-2-如何解决aba问题" tabindex="-1"><a class="header-anchor" href="#_3-2-如何解决aba问题" aria-hidden="true">#</a> 3.2 如何解决ABA问题</h3><p>ABA问题的解决思路就是使用版本号，1A-&gt;2B-&gt;3A，在Atomic包中，提供了一个现成的AtomicStampedReference类来解决ABA问题，使用的就是添加版本号的方法。还有一个AtomicMarkableReference实现类，它比AtomicStampedReference更加简单，AtomicStampedReference中每更新一次数据版本号也会更新一次，这样可以使用版本号统计到底更新了多少次，而AtomicMarkableReference仅仅使用了一个boolean值来表示值是否改变过，因此使用的比较少。</p><h2 id="_4-atomicinteger-的使用" tabindex="-1"><a class="header-anchor" href="#_4-atomicinteger-的使用" aria-hidden="true">#</a> 4. AtomicInteger 的使用</h2><p><strong>AtomicInteger 类常用方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取当前的值</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token comment">//获取当前的值，并设置新的值</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//获取当前的值，并自增</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndDecrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取当前的值，并自减</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token comment">//获取当前的值，并加上预期的值</span>
<span class="token keyword">boolean</span> <span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> expect<span class="token punctuation">,</span> <span class="token keyword">int</span> update<span class="token punctuation">)</span> <span class="token comment">//如果输入的数值等于预期值，则以原子方式将该值设置为输入值（update）</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lazySet</span><span class="token punctuation">(</span><span class="token keyword">int</span> newValue<span class="token punctuation">)</span><span class="token comment">//最终设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>AtomicInteger 类的使用示例</strong></p><p>使用 AtomicInteger 之后，不用对 increment() 方法加锁也可以保证线程安全。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">AtomicIntegerTest</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">//使用AtomicInteger之后，不需要对该方法加锁，也可以实现线程安全。</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
     
       <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-atomicinteger-类的原理" tabindex="-1"><a class="header-anchor" href="#_5-atomicinteger-类的原理" aria-hidden="true">#</a> 5. AtomicInteger 类的原理</h2><p>AtomicInteger 类的部分源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// setup to use Unsafe.compareAndSwapInt for updates（更新操作时提供“比较并替换”的作用）</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> valueOffset<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            valueOffset <span class="token operator">=</span> unsafe<span class="token punctuation">.</span>objectFieldOffset
                <span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。</p><p>CAS的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 objectFieldOffset() 方法是一个本地方法，这个方法是用来拿到“原来的值”的内存地址，返回值是 valueOffset。另外 value 是一个volatile变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值。</p><h2 id="_6-jdk1-8中新增的原子加强类" tabindex="-1"><a class="header-anchor" href="#_6-jdk1-8中新增的原子加强类" aria-hidden="true">#</a> 6. JDK1.8中新增的原子加强类</h2><h3 id="_6-1-jdk1-8-新增的原子加强类" tabindex="-1"><a class="header-anchor" href="#_6-1-jdk1-8-新增的原子加强类" aria-hidden="true">#</a> 6.1 jdk1.8 新增的原子加强类</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>1. LongAdder：long类型的数值累加器，从0开始累加，累加规则为加法运算。
2. LongAccumulator：long类型的数值累加器，可从指定值开始累加，可指定累加规则。
3. DoubleAdder：double类型的数值累加器，从0开始累加，累加规则为加法运算。
4. DoubleAccumulator：double类型的数值累加器，可从指定值开始累加，可指定累加规则。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-为什么需要加强" tabindex="-1"><a class="header-anchor" href="#_6-2-为什么需要加强" aria-hidden="true">#</a> 6.2 为什么需要加强</h3><p>自从原子类问世之后，<strong>多线程环境下如果用于统计计数操作，一般可以使用AtomicLong来代替锁作为计数器</strong>，AtomicLong 通过CAS 提供了非阻塞的原子性操作，相比使用阻塞算法的同步器来说它的性能己经很好了，那么，它们有什么缺点吗？</p><p>实际上，AtomicLong等其他传统的atomic原子类对于数值的更改，通常都是<strong>在一个无限循环（自旋）中不断尝试CAS 的修改操作，一旦CAS失败则循环重试，这样来保证最终CAS操作成功</strong>。如果竞争不激烈，那么修改成功的概率就很高，但是如果<strong>在高并发下大量线程频繁的竞争修改计数器，会造成一次CAS修改失败的概率就很高</strong>。在大量修改失败时，这些原子操作就会进行多次循环尝试**，白白浪费CPU 资源，因此性能还是会受到影响**。</p><p><strong>JDK1.8新增这些类，正是为了解决高并发环境下由于频繁读写AtomicLong等计数器而可能造成某些线程持续的空转（循环）进而浪费CPU的情况，它们也被称为“累加器”！</strong></p><h2 id="_7-atomic-合适场景" tabindex="-1"><a class="header-anchor" href="#_7-atomic-合适场景" aria-hidden="true">#</a> 7. atomic 合适场景</h2><p><strong>单个变量的复合操作（比如读-写）中可以代替锁的来保证操作的原子性和安全性，并且由于没有使用锁而有不错的性能</strong></p><blockquote><p>对于多个变量的复合操作以及一批代码的原子性和安全性却无能为力，此时只能使用锁。</p></blockquote><h2 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结" aria-hidden="true">#</a> 8. 总结</h2><p>实际上volatile关键字以及Unsafe类提供的CAS的方法就是构成原子类的基石，原子类的方法实际上就是对于Unsafe中的CAS方法的二次包装，方便开发人员使用而已。Unsafe中的CAS方法作为native方法，本身并不是Java语言实现的，它们的源码位于JVM虚拟机的源码中，HotSpot虚拟机的源码中就有这些native方法的具体实现，它们都是采用C++的代码实现的，方便与底层系统交互，在openjdk中可以找到。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,50),d={href:"https://blog.csdn.net/weixin_43767015/article/details/107895944",target:"_blank",rel:"noopener noreferrer"};function u(k,m){const a=p("ExternalLinkIcon");return e(),t("div",null,[r,n("p",null,[n("a",d,[o("Java atomic原子操作类的介绍"),c(a)])])])}const h=s(l,[["render",u],["__file","java-thread-y-atomic.html.vue"]]);export{h as default};
