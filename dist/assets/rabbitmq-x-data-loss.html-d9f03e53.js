import{_ as a,W as t,X as p,Y as n,Z as e,$ as o,a0 as c,D as l}from"./framework-f64bc974.js";const i={},u=c(`<h1 id="rabbitmq问题-防止数据丢失" tabindex="-1"><a class="header-anchor" href="#rabbitmq问题-防止数据丢失" aria-hidden="true">#</a> RabbitMQ问题 - 防止数据丢失</h1><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922210024653.png" alt="image-20220922210024653" tabindex="0" loading="lazy"><figcaption>image-20220922210024653</figcaption></figure><h2 id="_1-分析数据丢失的原因" tabindex="-1"><a class="header-anchor" href="#_1-分析数据丢失的原因" aria-hidden="true">#</a> 1. 分析数据丢失的原因</h2><p>分析RabbitMQ消息丢失的情况，不妨先看看一条消息从生产者发送到消费者消费的过程：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922210303838.png" alt="image-20220922210303838" tabindex="0" loading="lazy"><figcaption>image-20220922210303838</figcaption></figure><p>可以看出，一条消息整个过程要经历两次的网络传输：<strong>从生产者发送到RabbitMQ服务器，从RabbitMQ服务器发送到消费者</strong>。</p><p><strong>在消费者未消费前存储在队列(Queue)中</strong>。</p><p>所以可以知道，有三个场景下是会发生消息丢失的：</p><ul><li>存储在队列中，如果队列没有对消息持久化，RabbitMQ服务器宕机重启会丢失数据。</li><li>生产者发送消息到RabbitMQ服务器过程中，RabbitMQ服务器如果宕机停止服务，消息会丢失。</li><li>消费者从RabbitMQ服务器获取队列中存储的数据消费，但是消费者程序出错或者宕机而没有正确消费，导致数据丢失。</li></ul><p>针对以上三种场景，RabbitMQ提供了三种解决的方式，分别是消息持久化，confirm机制，ACK事务机制。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922210622611.png" alt="image-20220922210622611" tabindex="0" loading="lazy"><figcaption>image-20220922210622611</figcaption></figure><h2 id="_2-消息持久化" tabindex="-1"><a class="header-anchor" href="#_2-消息持久化" aria-hidden="true">#</a> 2. 消息持久化</h2><p>RabbitMQ是支持消息持久化的，消息持久化需要设置：Exchange为持久化和Queue持久化，这样当消息发送到RabbitMQ服务器时，消息就会持久化。</p><p>首先看Exchange交换机的类图：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922210712395.png" alt="image-20220922210712395" tabindex="0" loading="lazy"><figcaption>image-20220922210712395</figcaption></figure><p>看这个类图其实是要说明上一篇文章介绍的四种交换机都是AbstractExchange抽象类的子类，所以根据java的特性，<strong>创建子类的实例会先调用父类的构造器</strong>，父类也就是AbstractExchange的构造器是怎么样的呢？</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922210905212.png" alt="image-20220922210905212" tabindex="0" loading="lazy"><figcaption>image-20220922210905212</figcaption></figure><p>从上面的注释可以看到<strong>durable参数表示是否持久化。默认是持久化(true)</strong>。创建持久化的Exchange可以这样写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">rabbitmqDemoDirectExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Direct交换机</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">RABBITMQ_DEMO_DIRECT_EXCHANGE</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着是Queue队列，我们先看看Queue的构造器是怎么样的：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922211003276.png" alt="image-20220922211003276" tabindex="0" loading="lazy"><figcaption>image-20220922211003276</figcaption></figure><p>也是通过durable参数设置是否持久化，默认是true。所以创建时可以不指定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">fanoutExchangeQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">//只需要指定名称，默认是持久化的</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">FANOUT_EXCHANGE_QUEUE_TOPIC_A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就完成了消息持久化的设置，接下来启动项目，发送几条消息，我们可以看到：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922211103285.png" alt="image-20220922211103285" tabindex="0" loading="lazy"><figcaption>image-20220922211103285</figcaption></figure><p>怎么证明是已经持久化了呢，实际上可以找到对应的文件：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922211122002.png" alt="image-20220922211122002" tabindex="0" loading="lazy"><figcaption>image-20220922211122002</figcaption></figure><p>找到对应磁盘中的目录：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922211145230.png" alt="image-20220922211145230" tabindex="0" loading="lazy"><figcaption>image-20220922211145230</figcaption></figure><p><strong>消息持久化可以防止消息在RabbitMQ Server中不会因为宕机重启而丢失</strong>。</p><h2 id="_3-消息确认机制" tabindex="-1"><a class="header-anchor" href="#_3-消息确认机制" aria-hidden="true">#</a> 3. 消息确认机制</h2><h3 id="_3-1-confirm机制" tabindex="-1"><a class="header-anchor" href="#_3-1-confirm机制" aria-hidden="true">#</a> 3.1 confirm机制</h3><p><strong>在生产者发送到RabbitMQ Server时有可能因为网络问题导致投递失败，从而丢失数据</strong>。我们可以使用confirm模式防止数据丢失。工作流程是怎么样的呢，看以下图解：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922211313335.png" alt="image-20220922211313335" tabindex="0" loading="lazy"><figcaption>image-20220922211313335</figcaption></figure><p>从上图中可以看到是通过两个回调函数 <strong>confirm()、returnedMessage()</strong> 进行通知。</p><p>一条消息从生产者发送到RabbitMQ，首先会发送到Exchange，对应回调函数<strong>confirm()</strong>。第二步从Exchange路由分配到Queue中，对应回调函数则是<strong>returnedMessage()</strong>。</p><h4 id="_3-1-1-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-1-1-代码实现" aria-hidden="true">#</a> 3.1.1 代码实现</h4><p>首先在<strong>application.yml</strong>配置文件中加上如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">publisher-confirms</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment">#    publisher-returns: true</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment"># publisher-confirms：设置为true时。当消息投递到Exchange后，会回调confirm()方法进行通知生产者</span>
<span class="token comment"># publisher-returns：设置为true时。当消息匹配到Queue并且失败时，会通过回调returnedMessage()方法返回消息</span>
<span class="token comment"># spring.rabbitmq.template.mandatory: 设置为true时。指定消息在没有被队列接收时会通过回调returnedMessage()方法退回。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个小细节，<strong>publisher-returns和mandatory如果都设置的话，优先级是以mandatory优先</strong>。可以看源码：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922212555601.png" alt="image-20220922212555601" tabindex="0" loading="lazy"><figcaption>image-20220922212555601</figcaption></figure><blockquote><h4 id="交换器无法根据自身类型和路由键找到符合条件队列时-有哪些处理" tabindex="-1"><a class="header-anchor" href="#交换器无法根据自身类型和路由键找到符合条件队列时-有哪些处理" aria-hidden="true">#</a> 交换器无法根据自身类型和路由键找到符合条件队列时，有哪些处理？</h4><p>mandatory ：true 返回消息给生产者。</p><p>mandatory: false 直接丢弃。</p></blockquote><p>接着我们需要定义回调方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqConfirmCallback</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">RabbitmqConfirmCallback</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 监听消息是否到达Exchange
     *
     * <span class="token keyword">@param</span> <span class="token parameter">correlationData</span> 包含消息的唯一标识的对象
     * <span class="token keyword">@param</span> <span class="token parameter">ack</span>             true 标识 ack，false 标识 nack
     * <span class="token keyword">@param</span> <span class="token parameter">cause</span>           nack 投递失败的原因
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name">String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息投递成功~消息Id：{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息投递失败，Id：{}，错误提示：{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> <span class="token class-name">String</span> replyText<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息没有路由到队列，获得返回的消息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token function">byteToObject</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;message body: {}&quot;</span><span class="token punctuation">,</span> map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;replyCode: {}&quot;</span><span class="token punctuation">,</span> replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;replyText: {}&quot;</span><span class="token punctuation">,</span> replyText<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;exchange: {}&quot;</span><span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;routingKey: {}&quot;</span><span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;------------&gt; end &lt;------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">byteToObject</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">T</span> t<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我这里就简单地打印回调方法返回的消息，在实际项目中，可以把返回的消息存储到日志表中，使用定时任务进行进一步的处理。</p><p>我这里是使用<strong>RabbitTemplate</strong>进行发送，所以在Service层的RabbitTemplate需要设置一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitMQService</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitmqConfirmCallback</span> rabbitmqConfirmCallback<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//指定 ConfirmCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span>rabbitmqConfirmCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定 ReturnCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span>rabbitmqConfirmCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token function">getMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">CorrelationData</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;correlationData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">RABBITMQ_DEMO_DIRECT_EXCHANGE</span><span class="token punctuation">,</span> <span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">RABBITMQ_DEMO_DIRECT_ROUTING</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
	<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> msgId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sendTime <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msgId&quot;</span><span class="token punctuation">,</span> msgId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sendTime&quot;</span><span class="token punctuation">,</span> sendTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;correlationData&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大功告成！接下来我们进行测试，发送一条消息，我们可以控制台：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922212646806.png" alt="image-20220922212646806" tabindex="0" loading="lazy"><figcaption>image-20220922212646806</figcaption></figure><p>假设发送一条信息没有路由匹配到队列，可以看到如下信息：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922212703792.png" alt="image-20220922212703792" tabindex="0" loading="lazy"><figcaption>image-20220922212703792</figcaption></figure><p>这就是confirm模式。它的作用是<strong>为了保障生产者投递消息到RabbitMQ不会出现消息丢失</strong>。</p><h3 id="_3-2-事务机制-ack" tabindex="-1"><a class="header-anchor" href="#_3-2-事务机制-ack" aria-hidden="true">#</a> 3.2 事务机制(ACK)</h3><p>最开始的那张图已经讲过，<strong>消费者从队列中获取到消息后，会直接确认签收，假设消费者宕机或者程序出现异常，数据没有正常消费，这种情况就会出现数据丢失</strong>。</p><p>所以关键在于把自动签收改成手动签收，正常消费则返回确认签收，如果出现异常，则返回拒绝签收重回队列。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922212010399.png" alt="image-20220922212010399" tabindex="0" loading="lazy"><figcaption>image-20220922212010399</figcaption></figure><h4 id="_3-2-1-代码实现" tabindex="-1"><a class="header-anchor" href="#_3-2-1-代码实现" aria-hidden="true">#</a> 3.2.1 代码实现</h4><p>首先在消费者的<strong>application.yml</strong>文件中设置事务提交为<strong>manual</strong>手动模式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
		<span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual <span class="token comment"># 手动ack模式</span>
        <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 最少消费者数量</span>
        <span class="token key atrule">max-concurrency</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># 最大消费者数量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编写消费者的监听器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitDemoConsumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">enum</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span>
        <span class="token comment">//处理成功</span>
        <span class="token constant">SUCCESS</span><span class="token punctuation">,</span>
        <span class="token comment">//可以重试的错误，消息重回队列</span>
        <span class="token constant">RETRY</span><span class="token punctuation">,</span>
        <span class="token comment">//无需重试的错误，拒绝消息，并从队列中删除</span>
        <span class="token constant">REJECT</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RabbitHandler</span>
    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token class-name">RabbitMQConfig</span><span class="token punctuation">.</span><span class="token constant">RABBITMQ_DEMO_TOPIC</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> tag <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Action</span> action <span class="token operator">=</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者RabbitDemoConsumer从RabbitMQ服务端消费消息：&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;bad&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;测试：抛出可重回队列的异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;测试：抛出无需重回队列的异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据异常的类型判断，设置action是可重试的，还是无需重试的</span>
            action <span class="token operator">=</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token constant">RETRY</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//打印异常</span>
            e2<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//根据异常的类型判断，设置action是可重试的，还是无需重试的</span>
            action <span class="token operator">=</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token constant">REJECT</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//multiple 表示是否批量处理。true表示批量ack处理小于tag的所有消息。false则处理当前消息</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">Action</span><span class="token punctuation">.</span><span class="token constant">RETRY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">//Nack，拒绝策略，消息重回队列</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">//Nack，拒绝策略，并且从队列中删除</span>
                    channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释一下上面的代码，如果没有异常，则手动确认回复RabbitMQ服务端basicAck(消费成功)。</p><p>如果抛出某些可以重回队列的异常，我们就回复basicNack并且设置重回队列。</p><p>如果是抛出不可重回队列的异常，就回复basicNack并且设置从RabbitMQ的队列中删除。</p><p>接下来进行测试，发送一条普通的消息&quot;hello&quot;：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922212208742.png" alt="image-20220922212208742" tabindex="0" loading="lazy"><figcaption>image-20220922212208742</figcaption></figure><h4 id="_3-2-2-ack返回的三个方法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-ack返回的三个方法" aria-hidden="true">#</a> 3.2.2 ack返回的三个方法</h4><p>解释一下ack返回的三个方法的意思。</p><p>①成功确认</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">basicAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>消费者成功处理后调用此方法对消息进行确认。</p><ul><li>deliveryTag：该消息的index</li><li>multiple：是否批量.。true：将一次性ack所有小于deliveryTag的消息。</li></ul><p>②失败确认</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>deliveryTag：该消息的index。</li><li>multiple：是否批量。true：将一次性拒绝所有小于deliveryTag的消息。</li><li>requeue：被拒绝的是否重新入队列。</li></ul><p>③失败确认</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">basicReject</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>deliveryTag:该消息的index。</li><li>requeue：被拒绝的是否重新入队列。</li></ul><p>basicNack()和basicReject()的区别在于：<strong>basicNack()可以批量拒绝，basicReject()一次只能拒接一条消息</strong>。</p><h2 id="_4-遇到的坑" tabindex="-1"><a class="header-anchor" href="#_4-遇到的坑" aria-hidden="true">#</a> 4. 遇到的坑</h2><h3 id="_4-1-启用nack机制后-导致的死循环" tabindex="-1"><a class="header-anchor" href="#_4-1-启用nack机制后-导致的死循环" aria-hidden="true">#</a> 4.1 启用nack机制后，导致的死循环</h3><p>上面的代码我故意写了一个bug。测试发送一条&quot;bad&quot;，然后会抛出重回队列的异常。这就有个问题：重回队列后消费者又消费，消费抛出异常又重回队列，就造成了死循环。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220922213129928.png" alt="image-20220922213129928" tabindex="0" loading="lazy"><figcaption>image-20220922213129928</figcaption></figure><p>那怎么避免这种情况呢？</p><p>既然nack会造成死循环的话，我提供的一个思路是<strong>不使用basicNack()，把抛出异常的消息落库到一张表中，记录抛出的异常，消息体，消息Id。通过定时任务去处理</strong>。</p><p>如果你有什么好的解决方案，也可以留言讨论~</p><h2 id="_4-2-double-ack" tabindex="-1"><a class="header-anchor" href="#_4-2-double-ack" aria-hidden="true">#</a> 4.2 double ack</h2><p>有的时候比较粗心，不小心开启了自动Ack模式，又手动回复了Ack。那就会报这个错误：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>消费者<span class="token class-name">RabbitDemoConsumer</span>从<span class="token class-name">RabbitMQ</span>服务端消费消息：java技术爱好者
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">42.148</span> <span class="token constant">ERROR</span> <span class="token number">4880</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span> <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">5672</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>r<span class="token punctuation">.</span>c<span class="token punctuation">.</span></span>CachingConnectionFactory</span>       <span class="token operator">:</span> <span class="token class-name">Channel</span> shutdown<span class="token operator">:</span> channel error<span class="token punctuation">;</span> protocol method<span class="token operator">:</span> #method<span class="token generics"><span class="token punctuation">&lt;</span>channel<span class="token punctuation">.</span>close<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>reply<span class="token operator">-</span>code<span class="token operator">=</span><span class="token number">406</span><span class="token punctuation">,</span> reply<span class="token operator">-</span>text<span class="token operator">=</span><span class="token constant">PRECONDITION_FAILED</span> <span class="token operator">-</span> unknown delivery tag <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">,</span> method<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">43.102</span>  <span class="token constant">INFO</span> <span class="token number">4880</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>cTaskExecutor<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name"><span class="token namespace">o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>a<span class="token punctuation">.</span>r<span class="token punctuation">.</span>l<span class="token punctuation">.</span></span>SimpleMessageListenerContainer</span> <span class="token operator">:</span> <span class="token class-name">Restarting</span> <span class="token class-name">Consumer</span><span class="token annotation punctuation">@f4a3a8d</span><span class="token operator">:</span> tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">{</span>amq<span class="token punctuation">.</span>ctag<span class="token operator">-</span><span class="token number">8</span>MJeQ7el_PNbVJxGOOw7Rw<span class="token operator">=</span>rabbitmq<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>topic<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> channel<span class="token operator">=</span><span class="token class-name">Cached</span> <span class="token class-name">Rabbit</span> <span class="token class-name">Channel</span><span class="token operator">:</span> <span class="token class-name">AMQChannel</span><span class="token punctuation">(</span>amqp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>guest<span class="token annotation punctuation">@127.0.0.1</span><span class="token operator">:</span><span class="token number">5672</span><span class="token operator">/</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> conn<span class="token operator">:</span> <span class="token class-name">Proxy</span><span class="token annotation punctuation">@782a1679</span> <span class="token class-name">Shared</span> <span class="token class-name">Rabbit</span> <span class="token class-name">Connection</span><span class="token operator">:</span> <span class="token class-name">SimpleConnection</span><span class="token annotation punctuation">@67c5b175</span> <span class="token punctuation">[</span>delegate<span class="token operator">=</span>amqp<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>guest<span class="token annotation punctuation">@127.0.0.1</span><span class="token operator">:</span><span class="token number">5672</span><span class="token operator">/</span><span class="token punctuation">,</span> localPort<span class="token operator">=</span> <span class="token number">56938</span><span class="token punctuation">]</span><span class="token punctuation">,</span> acknowledgeMode<span class="token operator">=</span><span class="token constant">AUTO</span> local queue size<span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>出现这个错误，可以检查一下yml文件是否添加了以下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> manual
        <span class="token key atrule">concurrency</span><span class="token punctuation">:</span> <span class="token number">1</span>
        <span class="token key atrule">max-concurrency</span><span class="token punctuation">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上面这个配置已经添加了，还是报错，<strong>有可能你使用@Configuration配置了SimpleRabbitListenerContainerFactory，根据SpringBoot的特性，代码优于配置，代码的配置覆盖了yml的配置，并且忘记设置手动manual模式</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span> <span class="token function">rabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleRabbitListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置手动ack模式</span>
        factory<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span><span class="token class-name">AcknowledgeMode</span><span class="token punctuation">.</span><span class="token constant">MANUAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你还是有报错，那可能是写错地方了，写在生产者的项目了。以上的配置应该配置在消费者的项目。因为ack模式是针对消费者而言的。我就是写错了，写在生产者，折腾了几个小时，泪目~</p><h2 id="_4-3-性能问题" tabindex="-1"><a class="header-anchor" href="#_4-3-性能问题" aria-hidden="true">#</a> 4.3 性能问题</h2><p>其实手动ACK相对于自动ACK肯定是会慢很多，我在网上查了一些资料，性能相差大概有10倍。所以一般在实际应用中不太建议开手动ACK模式。不过也不是绝对不可以开，具体情况具体分析，看并发量，还有数据的重要性等等。</p><p>所以<strong>在实际项目中还需要权衡一下并发量和数据的重要性，再决定具体的方案</strong>。</p><h2 id="_4-4-启用手动ack模式-如果没有及时回复-会造成队列异常" tabindex="-1"><a class="header-anchor" href="#_4-4-启用手动ack模式-如果没有及时回复-会造成队列异常" aria-hidden="true">#</a> 4.4 启用手动ack模式，如果没有及时回复，会造成队列异常</h2><p>如果开启了手动ACK模式，但是由于代码有bug的原因，没有回复RabbitMQ服务端，那么这条消息就会放到Unacked状态的消息堆里，只有等到消费者的连接断开才会转到Ready消息。如果消费者一直没有断开连接，那Unacked的消息就会越来越多，占用内存就越来越大，最后就会出现异常。</p><p>这个问题，我没法用我的电脑演示，我的电脑太卡了。</p><h2 id="五-总结" tabindex="-1"><a class="header-anchor" href="#五-总结" aria-hidden="true">#</a> 五. 总结</h2><p>通过上面的学习后，总结了RabbitMQ防止数据丢失有三种方式：</p><ul><li>消息持久化</li><li>生产者消息确认机制(confirm模式)</li><li>消费者消息确认模式(ack模式)</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,104),k={href:"https://juejin.cn/post/6856610666137157645#heading-3",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const s=l("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",k,[e("详细讲解！RabbitMQ如何防止数据丢失，看这篇就够了！"),o(s)])])])}const g=a(i,[["render",r],["__file","rabbitmq-x-data-loss.html.vue"]]);export{g as default};
