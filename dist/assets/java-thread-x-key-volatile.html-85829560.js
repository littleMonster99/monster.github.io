import{_ as s,W as e,X as t,Y as n,Z as o,$ as p,a0 as c,D as l}from"./framework-f64bc974.js";const i={},d=c(`<h1 id="关键字-volatile" tabindex="-1"><a class="header-anchor" href="#关键字-volatile" aria-hidden="true">#</a> 关键字: volatile</h1><blockquote><p>Java语言为了解决并发编程中存在的原子性、可见性和有序性问题，提供了一系列和并发处理相关的关键字，比如<code>synchronized</code>、<code>volatile</code>、<code>final</code>、<code>concurren包</code>等</p></blockquote><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p><code>volatile</code>通常被比喻成&quot;轻量级的<code>synchronized</code>&quot;，也是Java并发编程中比较重要的一个关键字。和<code>synchronized</code>不同，<code>volatile</code>是一个变量修饰符，只能用来修饰变量。无法修饰方法及代码块等。</p><blockquote><p><code>synchronized</code>可以保证原子性、有序性和可见性。而<code>volatile</code>却只能保证有序性和可见性</p></blockquote><h3 id="_1-1-作用" tabindex="-1"><a class="header-anchor" href="#_1-1-作用" aria-hidden="true">#</a> 1.1 作用</h3><ol><li><p>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。（<strong>保证可见性</strong>）</p></li><li><p>禁止进行指令重排序。（<strong>保证有序性</strong>）</p></li></ol><h2 id="_2-用法" tabindex="-1"><a class="header-anchor" href="#_2-用法" aria-hidden="true">#</a> 2. 用法</h2><p><code>volatile</code>的用法比较简单，只需要在声明一个<strong>可能被多线程同时访问的变量时，使用<code>volatile</code>修饰</strong>就可以了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>  
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> singleton<span class="token punctuation">;</span>  
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
    <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单例模式的实例，可能在多线程中被子线程同时访问</p></blockquote><p>如以上代码，是一个比较典型的使用双重锁校验的形式实现单例的，<strong>其中使用<code>volatile</code>关键字修饰可能被多个线程同时访问到的singleton</strong>。</p><h2 id="_3-volatile的原理" tabindex="-1"><a class="header-anchor" href="#_3-volatile的原理" aria-hidden="true">#</a> 3. volatile的原理</h2><p>为了提高处理器的执行速度，<strong>在处理器和内存之间增加了多级缓存来提升</strong>。但是由于引入了多级缓存，就<strong>存在缓存数据不一致问题</strong>。</p><p>但是，对于<code>volatile</code>变量，<strong>当对<code>volatile</code>变量进行写操作的时候</strong>，<strong>JVM会向处理器发送一条lock前缀的指令，将这个缓存中的变量回写到系统主存中。</strong></p><p>但是就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题，所以在多处理器下，为了保证各个处理器的缓存是一致的，就会实现<strong>缓存一致性协议</strong></p><h3 id="_3-1-缓存一致性协议" tabindex="-1"><a class="header-anchor" href="#_3-1-缓存一致性协议" aria-hidden="true">#</a> 3.1 缓存一致性协议</h3><p><strong>缓存一致性协议</strong>：每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器要对这个数据进行修改操作的时候，会强制重新从系统内存里把数据读到处理器缓存里。</p><h3 id="_3-2-原理总结" tabindex="-1"><a class="header-anchor" href="#_3-2-原理总结" aria-hidden="true">#</a> 3.2 原理总结</h3><p>如果<strong>一个变量被<code>volatile</code>所修饰的话，在每次数据变化之后，其值都会被强制刷入主存。而其他处理器的缓存由于遵守了缓存一致性协议，也会把这个变量的值从主存加载到自己的缓存中。这就保证了一个<code>volatile</code>在并发编程中，其值在多个缓存中是可见的</strong>。</p><h2 id="_4-volatile-与并发问题" tabindex="-1"><a class="header-anchor" href="#_4-volatile-与并发问题" aria-hidden="true">#</a> 4. volatile 与并发问题</h2><h3 id="_4-1-volatile与可见性" tabindex="-1"><a class="header-anchor" href="#_4-1-volatile与可见性" aria-hidden="true">#</a> 4.1 volatile与可见性</h3><h4 id="_4-1-1-定义" tabindex="-1"><a class="header-anchor" href="#_4-1-1-定义" aria-hidden="true">#</a> 4.1.1 定义</h4><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><h4 id="_4-1-2-背景" tabindex="-1"><a class="header-anchor" href="#_4-1-2-背景" aria-hidden="true">#</a> 4.1.2 背景</h4><p>Java内存模型规定了<strong>所有的变量都存储在主内存</strong>中，<strong>每条线程还有自己的工作内存</strong>，线程的<strong>工作内存中保存了该线程中是用到的变量的主内存副本拷贝</strong>，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存。不同的线程之间也无法直接访问对方工作内存中的变量，<strong>线程间变量的传递均需要自己的工作内存和主存之间进行数据同步进行</strong>。所以，就<strong>可能出现线程1改了某个变量的值，但是线程2不可见的情况</strong>。</p><h4 id="_4-1-3-结论-保证可见性" tabindex="-1"><a class="header-anchor" href="#_4-1-3-结论-保证可见性" aria-hidden="true">#</a> 4.1.3 结论（保证可见性）</h4><p>前面的关于<code>volatile</code>的原理中介绍过了，Java中的<code>volatile</code>关键字提供了一个功能，那就是<strong>被其修饰的变量在被修改后可以立即同步到主内存</strong>，被其修饰的变量在每次是用之前都从主内存刷新。因此，可以使用**<code>volatile</code>来保证多线程操作时变量的可见性**。</p><h3 id="_4-2-volatile与有序性" tabindex="-1"><a class="header-anchor" href="#_4-2-volatile与有序性" aria-hidden="true">#</a> 4.2 volatile与有序性</h3><h4 id="_4-2-1-定义" tabindex="-1"><a class="header-anchor" href="#_4-2-1-定义" aria-hidden="true">#</a> 4.2.1 定义</h4><p>有序性即程序执行的顺序按照代码的先后顺序执行。</p><h4 id="_4-2-2-背景" tabindex="-1"><a class="header-anchor" href="#_4-2-2-背景" aria-hidden="true">#</a> 4.2.2 背景</h4><p>除了引入了时间片以外，由于处理器优化和指令重排等，CPU还可能对输入代码进行乱序执行，比如<code>load-&gt;add-&gt;save</code> 有可能被优化成<code>load-&gt;save-&gt;add</code> 。这就是可能存在有序性问题。</p><h4 id="_4-2-3-结论-保证有序性" tabindex="-1"><a class="header-anchor" href="#_4-2-3-结论-保证有序性" aria-hidden="true">#</a> 4.2.3 结论（保证有序性）</h4><p>而<code>volatile</code>除了可以保证数据的可见性之外，还有一个强大的功能，那就是他可以<strong>禁止指令重排优化</strong>等。</p><p>普通的变量仅仅会保证在该方法的执行过程中所依赖的赋值结果的地方都能获得正确的结果，而不能保证变量的赋值操作的顺序与程序代码中的执行顺序一致。</p><p>volatile可以禁止指令重排，这就保证了代码的程序会严格按照代码的先后顺序执行。这就保证了有序性。<strong>被<code>volatile</code>修饰的变量的操作，会严格按照代码顺序执行，<code>load-&gt;add-&gt;save</code> 的执行顺序就是：load、add、save。</strong></p><h3 id="_4-3-volatile与原子性" tabindex="-1"><a class="header-anchor" href="#_4-3-volatile与原子性" aria-hidden="true">#</a> 4.3 volatile与原子性</h3><h4 id="_4-3-1-定义" tabindex="-1"><a class="header-anchor" href="#_4-3-1-定义" aria-hidden="true">#</a> 4.3.1 定义</h4><p>原子性是指一个操作是不可中断的，要全部执行完成，要不就都不执行。</p><h4 id="_4-3-2-背景" tabindex="-1"><a class="header-anchor" href="#_4-3-2-背景" aria-hidden="true">#</a> 4.3.2 背景</h4><p>线程是CPU调度的基本单位。CPU有时间片的概念，会根据不同的调度算法进行线程调度。当一个线程获得时间片之后开始执行，在时间片耗尽之后，就会失去CPU使用权。所以在多线程场景下，由于时间片在线程间轮换，就会发生原子性问题。</p><h4 id="_4-3-3-结论-不保证原子性" tabindex="-1"><a class="header-anchor" href="#_4-3-3-结论-不保证原子性" aria-hidden="true">#</a> 4.3.3 结论（不保证原子性）</h4><p>我们介绍<code>synchronized</code>的时候，提到过，为了保证原子性，需要通过字节码指令<code>monitorenter</code>和<code>monitorexit</code>，但是<code>volatile</code>和这两个指令之间是没有任何关系的。</p><p><strong>所以，<code>volatile</code>是不能保证原子性的。</strong></p><h2 id="_5-volatile的原理和实现机制" tabindex="-1"><a class="header-anchor" href="#_5-volatile的原理和实现机制" aria-hidden="true">#</a> 5. volatile的原理和实现机制</h2><p>下面这段话摘自《深入理解Java虚拟机》：</p><p>“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p><p>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p><ol><li><p>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p></li><li><p>它会强制将对缓存的修改操作立即写入主存；</p></li><li><p>如果是写操作，它会导致其他CPU中对应的缓存行无效。</p></li></ol><h2 id="_6-volatile-使用场景" tabindex="-1"><a class="header-anchor" href="#_6-volatile-使用场景" aria-hidden="true">#</a> 6. volatile 使用场景</h2><p>在以下两个场景中可以使用<code>volatile</code>来代替<code>synchronized</code>：</p><ol><li><p><strong>对变量的写操作不依赖于当前值</strong></p></li><li><p>变量不需要与其他状态变量共同参与不变约束。</p></li></ol><p>除以上场景外，都需要使用其他方式来保证原子性，如<code>synchronized</code>或者<code>concurrent包</code>。</p><h3 id="_6-1-场景实例1-状态标记" tabindex="-1"><a class="header-anchor" href="#_6-1-场景实例1-状态标记" aria-hidden="true">#</a> 6.1 场景实例1：状态标记</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
 
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">volatile</span> <span class="token keyword">boolean</span> inited <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token comment">//线程1:</span>
context <span class="token operator">=</span> <span class="token function">loadContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            
 
<span class="token comment">//线程2:</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>inited <span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">doSomethingwithconfig</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-单例模式双层校验锁" tabindex="-1"><a class="header-anchor" href="#_6-2-单例模式双层校验锁" aria-hidden="true">#</a> 6.2 单例模式双层校验锁</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
     
    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         
    <span class="token punctuation">}</span>
     
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-volatile和原子性的例子" tabindex="-1"><a class="header-anchor" href="#_7-volatile和原子性的例子" aria-hidden="true">#</a> 7. volatile和原子性的例子</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> inc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        inc<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
                        test<span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">//保证前面的线程都执行完</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>inc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码比较简单，就是创建10个线程，然后分别执行1000次<code>i++</code>操作。正常情况下，程序的输出结果应该是10000，但是，多次执行的结果都小于10000。这其实就是<code>volatile</code>无法满足原子性的原因。</p><p>为什么会出现这种情况呢，那就是<strong>因为虽然volatile可以保证<code>inc</code>在多个线程之间的可见性。但是无法<code>inc++</code>的原子性</strong>。</p><h2 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结" aria-hidden="true">#</a> 8. 总结</h2><p><code>synchronized</code>可以保证原子性、有序性和可见性。而<code>volatile</code>却只能保证有序性和可见性</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,66),r={href:"https://juejin.cn/post/6844903656274264078",target:"_blank",rel:"noopener noreferrer"};function u(k,v){const a=l("ExternalLinkIcon");return e(),t("div",null,[d,n("p",null,[n("a",r,[o("深入理解Java中的volatile关键字"),p(a)])])])}const b=s(i,[["render",u],["__file","java-thread-x-key-volatile.html.vue"]]);export{b as default};
