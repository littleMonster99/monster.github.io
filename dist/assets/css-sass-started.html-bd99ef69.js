import{_ as n,W as d,X as s,Y as e,Z as r,$ as i,a0 as t,D as p}from"./framework-f64bc974.js";const c={},l=t('<h1 id="sass入门" tabindex="-1"><a class="header-anchor" href="#sass入门" aria-hidden="true">#</a> SASS入门</h1><h2 id="_1-历史背景" tabindex="-1"><a class="header-anchor" href="#_1-历史背景" aria-hidden="true">#</a> 1. 历史背景</h2><p>CSS不是一种编程语言。</p><p><strong>你可以用它开发网页样式，但是没法用它编程</strong>。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。<strong>它没有变量，也没有条件语句，只是一行行单纯的描述</strong>，写起来相当费事。</p><p>很自然地，有人就开始<strong>为CSS加入编程元素，这被叫做&quot;CSS预处理器&quot;（css preprocessor）</strong>。</p><blockquote><p>它的基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p></blockquote><h2 id="_2-什么是sass" tabindex="-1"><a class="header-anchor" href="#_2-什么是sass" aria-hidden="true">#</a> 2. <strong>什么是SASS</strong></h2><p>SASS是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。</p><h2 id="_3-基本用法" tabindex="-1"><a class="header-anchor" href="#_3-基本用法" aria-hidden="true">#</a> 3. <strong>基本用法</strong></h2><h3 id="_3-1-变量" tabindex="-1"><a class="header-anchor" href="#_3-1-变量" aria-hidden="true">#</a> <strong>3.1 变量</strong></h3><p>SASS允许使用变量，所有变量以$开头。</p><blockquote><p>$blue : #1875e7;</p><p>div { 　　　color : $blue; 　　}</p></blockquote><p>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。</p><blockquote><p>$side : left;</p><p>.rounded { 　　　　border-#{$side}-radius: 5px; 　　}</p></blockquote><h3 id="_3-2-计算功能" tabindex="-1"><a class="header-anchor" href="#_3-2-计算功能" aria-hidden="true">#</a> <strong>3.2 计算功能</strong></h3><p>SASS允许在代码中使用算式：</p><blockquote><p>body { 　　　　margin: (14px/2); 　　　　top: 50px + 100px; 　　　　right: $var * 10%; 　　}</p></blockquote><h3 id="_3-3-嵌套" tabindex="-1"><a class="header-anchor" href="#_3-3-嵌套" aria-hidden="true">#</a> <strong>3.3 嵌套</strong></h3><p>SASS允许选择器嵌套。比如，下面的CSS代码：</p><blockquote><p>div h1 { 　　　　color : red; 　　}</p></blockquote><p>可以写成：</p><blockquote><p>div { 　　　　hi { 　　　　　　color:red; 　　　　} 　　}</p></blockquote><p>属性也可以嵌套，比如border-color属性，可以写成：</p><blockquote><p>p { 　　　　border: { 　　　　　　color: red; 　　　　} 　　}</p></blockquote><p>注意，border后面必须加上冒号。</p><p>在嵌套的代码块内，可以使用&amp;引用父元素。比如a:hover伪类，可以写成：</p><blockquote><p>a { 　　　　&amp;:hover { color: #ffb3ff; } 　　}</p></blockquote><h3 id="_3-4-注释" tabindex="-1"><a class="header-anchor" href="#_3-4-注释" aria-hidden="true">#</a> <strong>3.4 注释</strong></h3><p>SASS共有两种注释风格。</p><p>标准的CSS注释 /* comment */ ，会保留到编译后的文件。</p><p>单行注释 // comment，只保留在SASS源文件中，编译后被省略。</p><p>在/*后面加一个感叹号，表示这是&quot;重要注释&quot;。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p><blockquote><p>/*! 　　　　重要注释！ 　　*/</p></blockquote><h2 id="_4-代码的重用" tabindex="-1"><a class="header-anchor" href="#_4-代码的重用" aria-hidden="true">#</a> <strong>4. 代码的重用</strong></h2><h3 id="_4-1-继承" tabindex="-1"><a class="header-anchor" href="#_4-1-继承" aria-hidden="true">#</a> <strong>4.1 继承</strong></h3><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p><blockquote><p>.class1 { 　　　　border: 1px solid #ddd; 　　}</p></blockquote><p>class2要继承class1，就要使用@extend命令：</p><blockquote><p>.class2 { 　　　　@extend .class1; 　　　　font-size:120%; 　　}</p></blockquote><h3 id="_4-2-mixin" tabindex="-1"><a class="header-anchor" href="#_4-2-mixin" aria-hidden="true">#</a> <strong>4.2 Mixin</strong></h3><p>Mixin有点像C语言的宏（macro），是可以重用的代码块。</p><p>使用@mixin命令，定义一个代码块。</p><blockquote><p>@mixin left { 　　　　float: left; 　　　　margin-left: 10px; 　　}</p></blockquote><p>使用@include命令，调用这个mixin。</p><blockquote><p>div { 　　　　@include left; 　　}</p></blockquote><p>mixin的强大之处，在于可以指定参数和缺省值。</p><blockquote><p>@mixin left($value: 10px) { 　　　　float: left; 　　　　margin-right: $value; 　　}</p></blockquote><p>使用的时候，根据需要加入参数：</p><blockquote><p>div { 　　　　@include left(20px); 　　}</p></blockquote><p>下面是一个mixin的实例，用来生成浏览器前缀。</p><blockquote><p>@mixin rounded($vert, $horz, $radius: 10px) { 　　　　border-#{$vert}-#{$horz}-radius: $radius; 　　　　-moz-border-radius-#{$vert}#{$horz}: $radius; 　　　　-webkit-border-#{$vert}-#{$horz}-radius: $radius; 　　}</p></blockquote><p>使用的时候，可以像下面这样调用：</p>',52),h=e("p",null,"#footer",-1),u=e("h3",{id:"_4-3-颜色函数",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-3-颜色函数","aria-hidden":"true"},"#"),r(),e("strong",null,"4.3 颜色函数")],-1),b=e("p",null,"SASS提供了一些内置的颜色函数，以便生成系列颜色。",-1),S=e("blockquote",null,[e("p",null,"lighten(#cc3, 10%) // #d6d65c 　　darken(#cc3, 10%) // #a3a329 　　grayscale(#cc3) // #808080 　　complement(#cc3) // #33c")],-1),f=e("h3",{id:"_4-4-插入文件",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-4-插入文件","aria-hidden":"true"},"#"),r(),e("strong",null,"4.4 插入文件")],-1),k=t('<blockquote><p>@import &quot;path/filename.scss&quot;;</p></blockquote><p>如果插入的是.css文件，则等同于css的import命令。</p><blockquote><p>@import &quot;foo.css&quot;;</p></blockquote><h2 id="_5-高级用法" tabindex="-1"><a class="header-anchor" href="#_5-高级用法" aria-hidden="true">#</a> <strong>5. 高级用法</strong></h2><h3 id="_5-1-条件语句" tabindex="-1"><a class="header-anchor" href="#_5-1-条件语句" aria-hidden="true">#</a> <strong>5.1 条件语句</strong></h3><p>@if可以用来判断：</p><blockquote><p>p { 　　　　@if 1 + 1 == 2 { border: 1px solid; } 　　　　@if 5 &lt; 3 { border: 2px dotted; } 　　}</p></blockquote><p>配套的还有@else命令：</p><blockquote><p>@if lightness($color) &gt; 30% { 　　　　background-color: #000; 　　} @else { 　　　　background-color: #fff; 　　}</p></blockquote><h3 id="_5-2-循环语句" tabindex="-1"><a class="header-anchor" href="#_5-2-循环语句" aria-hidden="true">#</a> <strong>5.2 循环语句</strong></h3><p>SASS支持for循环：</p><blockquote><p>@for $i from 1 to 10 { 　　　　.border-#{$i} { 　　　　　　border: #{$i}px solid blue; 　　　　} 　　}</p></blockquote><p>也支持while循环：</p><blockquote><p>$i: 6;</p><p>@while $i &gt; 0 { 　　　　.item-#{$i} { width: 2em * $i; } 　　　　$i: $i - 2; 　　}</p></blockquote><p>each命令，作用与for类似：</p><blockquote><p>@each $member in a, b, c, d { 　　　　.#{$member} { 　　　　　　background-image: url(&quot;/image/#{$member}.jpg&quot;); 　　　　} 　　}</p></blockquote><h3 id="_5-3-自定义函数" tabindex="-1"><a class="header-anchor" href="#_5-3-自定义函数" aria-hidden="true">#</a> <strong>5.3 自定义函数</strong></h3><p>SASS允许用户编写自己的函数。</p><blockquote><p>@function double($n) { 　　　　@return $n * 2; 　　}</p><p>#sidebar { 　　　　width: double(5px); 　　}</p></blockquote><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',20),q={href:"https://www.ruanyifeng.com/blog/2012/06/sass.html",target:"_blank",rel:"noopener noreferrer"};function _(g,o){const a=p("ExternalLinkIcon");return d(),s("div",null,[l,e("blockquote",{onInclude:o[1]||(o[1]=()=>{}),"rounded(top,":"","left,":"","5px);":""},[e("p",{onInclude:o[0]||(o[0]=()=>{}),"rounded(top,":"","left);":""},"#navbar li",32),h],32),u,b,S,f,e("template",null,[k,e("p",null,[e("a",q,[r("SASS用法指南"),i(a)])])])])}const m=n(c,[["render",_],["__file","css-sass-started.html.vue"]]);export{m as default};
