import{_ as c,W as l,X as i,Y as n,Z as s,$ as a,a0 as o,D as t}from"./framework-f64bc974.js";const d={},p=o('<h1 id="docker基础-dockercompose详解" tabindex="-1"><a class="header-anchor" href="#docker基础-dockercompose详解" aria-hidden="true">#</a> Docker基础 - DockerCompose详解</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>我们可以通过<code>Dockerfile</code>文件让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到<strong>需要多个容器相互配合来完成某项任务</strong>的情况，或者开发一个<code>Web</code>应用，除了<code>Web</code>服务容器本身，还需要数据库服务容器、缓存容器，甚至还包括负载均衡容器等等。</p><p><code>Docker Compose</code>恰好满足了这样的需求，</p><ul><li>它是用于定义和运行多容器<code>Docker</code>应用程序的工具。</li><li>通过<code>Compose</code>，您可以使用<code>YAML</code>文件来配置应用程序所需要的服务。</li><li>然后使用一个命令，就可以通过<code>YAML</code>配置文件创建并启动所有服务。</li></ul>',5),r=n("code",null,"项目是",-1),u=n("code",null,"官方的开源项目，来源于之前的",-1),m=n("code",null,"项目，使用",-1),k=n("code",null,"语言编写。负责实现对",-1),v=n("code",null,"容器集群的快速编排。项目地址为：",-1),b={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},h=o(`<blockquote><ul><li>Docker Compose 将所管理的容器分为三层，分别是工程（project）、服务（service）、容器（container）</li><li>Docker Compose 运行目录下的所有文件（docker-compose.yml）组成一个工程,一个工程包含多个服务，每个服务中定义了容器运行的镜像、参数、依赖，一个服务可包括多个容器实例</li></ul></blockquote><h2 id="_2-docker-compose使用的三个步骤" tabindex="-1"><a class="header-anchor" href="#_2-docker-compose使用的三个步骤" aria-hidden="true">#</a> 2. Docker Compose使用的三个步骤</h2><p><code>Docker Compose</code>使用的三个步骤为：</p><ul><li>使用<code>Dockerfile</code>文件定义应用程序的环境；</li><li>使用<code>docker-compose.yml</code>文件定义构成应用程序的服务，这样它们可以在隔离环境中一起运行；</li><li>执行<code>docker-compose up</code>命令来创建并启动所有服务。</li></ul><h2 id="_3-安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#_3-安装-docker-compose" aria-hidden="true">#</a> 3. 安装 Docker Compose</h2><ul><li>安装 Docker Compose 可以通过下面命令自动下载适应版本的 Compose，并为安装脚本添加执行权限</li></ul><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code>sudo curl <span class="token operator">-</span><span class="token constant">L</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span><span class="token number">1.21</span><span class="token number">.2</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>$<span class="token punctuation">(</span>uname <span class="token operator">-</span>s<span class="token punctuation">)</span><span class="token operator">-</span>$<span class="token punctuation">(</span>uname <span class="token operator">-</span>m<span class="token punctuation">)</span> <span class="token operator">-</span>o <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose
sudo chmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查看安装是否成功</li></ul><div class="language-undefined line-numbers-mode" data-ext="undefined"><pre class="language-undefined"><code>docker-compose -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>卸载</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> /usr/local/bin/docker-compose
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-docker-compose-yml-文件" tabindex="-1"><a class="header-anchor" href="#_4-docker-compose-yml-文件" aria-hidden="true">#</a> 4. docker-compose.yml 文件</h2>`,12),g={href:"https://docs.docker.com/compose/compose-file/",target:"_blank",rel:"noopener noreferrer"},y=o(`<ul><li><p><code>Docker Compose</code>允许用户通过<code>docker-compose.yml</code>文件（YAML 格式）来定义一组相关联的容器为一个工程（project）。</p></li><li><p>一个工程包含多个服务（service）</p></li><li><p>每个服务中定义了创建容器时所需的镜像、参数、依赖等。</p></li></ul><h2 id="_5-顶级配置" tabindex="-1"><a class="header-anchor" href="#_5-顶级配置" aria-hidden="true">#</a> 5. 顶级配置</h2><p><code>Docker Compose</code>模板文件我们需要关注的顶级配置有<code>version</code>、<code>services</code>、<code>networks</code>、<code>volumes</code>几个部分，除<code>version</code>外，其他几个顶级配置下还有很多下级配置，后面也会详细给大家介绍，先来看看这几个顶级配置都什么意思：</p><ul><li><code>version</code>：描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code></li><li><code>services</code>：定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等</li><li><code>networkds</code>：定义网络，可以多个，根据<code>DNS server</code>让相同网络中的容器可以直接通过容器名称进行通信</li><li><code>volumes</code>：数据卷，用于实现目录挂载</li></ul><h3 id="_5-1-version-版本信息" tabindex="-1"><a class="header-anchor" href="#_5-1-version-版本信息" aria-hidden="true">#</a> 5.1 version 版本信息</h3><p>描述<code>Compose</code>文件的版本信息，当前最新版本为<code>3.8</code>，对应的<code>Docker</code>版本为<code>19.03.0+</code>。关于每个版本的详细信息请参考：<code>https://docs.docker.com/compose/compose-file/compose-versioning/</code></p><p>以下为<code>Compose</code>文件的版本信息所对应的<code>Docker</code>版本。</p><table><thead><tr><th>Compose file format</th><th style="text-align:right;">Docker Engine release</th></tr></thead><tbody><tr><td>3.8</td><td style="text-align:right;">19.03.0+</td></tr><tr><td>3.7</td><td style="text-align:right;">18.06.0+</td></tr><tr><td>3.6</td><td style="text-align:right;">18.02.0+</td></tr><tr><td>3.5</td><td style="text-align:right;">17.12.0+</td></tr><tr><td>3.4</td><td style="text-align:right;">17.09.0+</td></tr><tr><td>3.3</td><td style="text-align:right;">17.06.0+</td></tr><tr><td>3.2</td><td style="text-align:right;">17.04.0+</td></tr><tr><td>3.1</td><td style="text-align:right;">1.13.1+</td></tr><tr><td>3.0</td><td style="text-align:right;">1.13.0+</td></tr><tr><td>...</td><td style="text-align:right;">1.x.x</td></tr></tbody></table><h2 id="_6-services-定义服务" tabindex="-1"><a class="header-anchor" href="#_6-services-定义服务" aria-hidden="true">#</a> 6. services 定义服务</h2><p><code>services</code>用来定义服务，可以多个，每个服务中定义了创建容器时所需的镜像、参数、依赖等，就像将命令行参数传递给<code>docker run</code>一样。同样，网络和数据卷的定义也是一样的。</p><p>比如，通过<code>docker run</code>命令构建一个<code>MySQL</code>应用容器的命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">--name</span> mysql8 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> /mydata/docker_mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> /mydata/docker_mysql/data:/var/lib/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">1234</span> mysql:8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用<code>docker-compose.yml</code>以后则可以这样定义：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>
<span class="token comment"># 定义服务，可以多个</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8</span> <span class="token comment"># 创建容器时所需的镜像</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql8 <span class="token comment"># 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 宿主机与容器的端口映射关系</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span> <span class="token comment"># 左边宿主机端口:右边容器端口</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 创建容器时所需的环境变量</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">1234</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;/mydata/docker_mysql/conf:/etc/mysql/conf.d&quot;</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;/mydata/docker_mysql/data:/var/lib/mysql&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-1-image-镜像名称标签" tabindex="-1"><a class="header-anchor" href="#_6-1-image-镜像名称标签" aria-hidden="true">#</a> 6.1 image 镜像名称标签</h3><p>指定创建容器时所需的镜像名称标签或者镜像<code>ID</code>。如果镜像在本地不存在，会去远程拉取。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-build-构建容器" tabindex="-1"><a class="header-anchor" href="#_6-2-build-构建容器" aria-hidden="true">#</a> 6.2 build 构建容器</h3><p>除了可以基于指定的镜像构建容器，还可以基于<code>Dockerfile</code>文件构建，在使用<code>up</code>命令时会执行构建任务。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220617200827325.png" alt="image-20220617200827325" tabindex="0" loading="lazy"><figcaption>image-20220617200827325</figcaption></figure><h3 id="_6-3-context-文件路径" tabindex="-1"><a class="header-anchor" href="#_6-3-context-文件路径" aria-hidden="true">#</a> 6.3 context 文件路径</h3><p>该选项可以是<code>Dockerfile</code>文件的绝对/相对路径，也可以是远程<code>Git</code>仓库的<code>URL</code>，当提供的值是相对路径时，相对当前<code>docker-compose.yml</code>文件所在目录。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">context</span><span class="token punctuation">:</span> . <span class="token comment"># 相对当前 docker-compose.yml 文件所在目录，基于名称为 Dockerfile 的文件构建镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4-dockerfile-构建镜像" tabindex="-1"><a class="header-anchor" href="#_6-4-dockerfile-构建镜像" aria-hidden="true">#</a> 6.4 dockerfile 构建镜像</h3><p>一般情况下，默认都基于文件名叫<code>Dockerfile</code>的文件构建镜像，当然也可以是自定义的文件名，使用<code>dockerfile</code>声明，不过这个选项只能声明文件名，文件所在路径还是要通过<code>centext</code>来声明。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">build</span><span class="token punctuation">:</span>
  <span class="token key atrule">context</span><span class="token punctuation">:</span> . <span class="token comment"># 相对当前 docker-compose.yml 文件所在目录</span>
  <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile<span class="token punctuation">-</span>alternate <span class="token comment"># 基于名称为 Dockerfile-alternate 的文件构建镜像</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-5-container-name-容器名称" tabindex="-1"><a class="header-anchor" href="#_6-5-container-name-容器名称" aria-hidden="true">#</a> 6.5 container_name 容器名称</h3><p><code>Compose</code>创建的容器默认生成的名称格式为：<code>工程名称_服务条目名称_序号</code>。如果要使用自定义名称，使用<code>container_name</code>声明。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mycentos</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mycentos7 <span class="token comment"># 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为<code>Docker</code>容器名称必须是唯一的，所以如果指定了自定义名称，就不能将服务扩展至多个容器。这样做可能会导致错误。</p><h3 id="_6-6-depends-on-容器依赖" tabindex="-1"><a class="header-anchor" href="#_6-6-depends-on-容器依赖" aria-hidden="true">#</a> 6.6 depends_on 容器依赖</h3><p>使用<code>Compose</code>最大的好处就是敲最少的命令做更多的事情，但一般项目容器启动的顺序是有要求的，如果直接从上到下启动容器，必然会因为容器依赖问题而启动失败。例如在没有启动数据库容器的情况下启动了<code>Web</code>应用容器，应用容器会因为找不到数据库而退出。<code>depends_on</code>就是用来解决容器依赖、启动先后问题的配置项。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> db
      <span class="token punctuation">-</span> redis
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述<code>YAML</code>文件定义的容器会先启动<code>db</code>和<code>redis</code>两个服务，最后才启动<code>web</code>服务。</p><h3 id="_6-7-ports-暴露端口" tabindex="-1"><a class="header-anchor" href="#_6-7-ports-暴露端口" aria-hidden="true">#</a> 6.7 ports 暴露端口</h3><p>容器对外暴露的端口，格式：左边宿主机端口:右边容器端口。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">ports</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
  <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-8-expose-接受端口范围" tabindex="-1"><a class="header-anchor" href="#_6-8-expose-接受端口范围" aria-hidden="true">#</a> 6.8 expose 接受端口范围</h3><p>容器暴露的端口不映射到宿主机，只允许能被连接的服务访问。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">expose</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&quot;80&quot;</span>
  <span class="token punctuation">-</span> <span class="token string">&quot;8080&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-9-restart-重启策略" tabindex="-1"><a class="header-anchor" href="#_6-9-restart-重启策略" aria-hidden="true">#</a> 6.9 restart 重启策略</h3><p>容器重启策略，简单的理解就是<code>Docker</code>重启以后容器要不要一起启动</p><ul><li>no：默认的重启策略，在任何情况下都不会重启容器；</li><li>on-failure：容器非正常退出时，比如退出状态为非0(异常退出)，才会重启容器；</li><li>always：容器总是重新启动，即使容器被手动停止了，当<code>Docker</code>重启时容器也还是会一起启动；</li><li>unless-stopped：容器总是重新启动，除非容器被停止（手动或其他方式），那么<code>Docker</code>重启时容器则不会启动。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mynginx
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-10-environment-环境变量" tabindex="-1"><a class="header-anchor" href="#_6-10-environment-环境变量" aria-hidden="true">#</a> 6.10 environment 环境变量</h3><p>添加环境变量。可以使用数组也可以使用字典。布尔相关的值（true、false、yes、no）都需要用引号括起来，以确保 YML 解析器不会将它们转换为真或假。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">environment</span><span class="token punctuation">:</span>
  <span class="token key atrule">RUOYI_ENV</span><span class="token punctuation">:</span> development
  <span class="token key atrule">SHOW</span><span class="token punctuation">:</span> <span class="token string">&#39;true&#39;</span>
  <span class="token key atrule">SESSION_SECRET</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者以下格式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">environment</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> RUOYI_ENV=development
  <span class="token punctuation">-</span> SHOW=true
  <span class="token punctuation">-</span> SESSION_SECRET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-10-1-env-file-文件获取环境变量" tabindex="-1"><a class="header-anchor" href="#_6-10-1-env-file-文件获取环境变量" aria-hidden="true">#</a> 6.10.1 env_file 文件获取环境变量</h4><p>从文件中获取环境变量，可以指定一个或多个文件，其优先级低于<code>environment</code>指定的环境变量。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">env_file</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> /opt/runtime_opts.env <span class="token comment"># 绝对路径</span>
  <span class="token punctuation">-</span> ./common.env <span class="token comment"># 相对路径，相对当前 docker-compose.yml 文件所在目录</span>
  <span class="token punctuation">-</span> ./apps/web.env <span class="token comment"># 相对路径，相对当前 docker-compose.yml 文件所在目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：env 文件中的每一行需采用<code>键=值</code>格式。以<code>#</code>开头的行会被视为注释并被忽略。空行也会被忽略。</p><h3 id="_6-11-command-执行命令" tabindex="-1"><a class="header-anchor" href="#_6-11-command-执行命令" aria-hidden="true">#</a> 6.11 command 执行命令</h3><p>覆盖容器启动后默认执行的命令。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span> echo &quot;helloworld&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令也可以是一个列表。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;echo&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;helloworld&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-12-volumes-目录挂载" tabindex="-1"><a class="header-anchor" href="#_6-12-volumes-目录挂载" aria-hidden="true">#</a> 6.12 volumes 目录挂载</h3><p>数据卷，用于实现目录挂载，支持指定目录挂载、匿名挂载、具名挂载。</p><ul><li>指定目录挂载的格式为：左边宿主机目录:右边容器目录，或者左边宿主机目录:右边容器目录:读写权限；</li><li>匿名挂载格式为：容器目录即可，或者容器目录即可:读写权限；</li><li>具名挂载格式为：数据卷条目名称:容器目录，或者数据卷条目名称:容器目录:读写权限。</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 描述 Compose 文件的版本信息</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.8&quot;</span>

<span class="token comment"># 定义服务，可以多个</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">8</span> <span class="token comment"># 创建容器时所需的镜像</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql8 <span class="token comment"># 容器名称，默认为&quot;工程名称_服务条目名称_序号&quot;</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span> <span class="token comment"># 宿主机与容器的端口映射关系</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span> <span class="token comment"># 左边宿主机端口:右边容器端口</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment"># 创建容器时所需的环境变量</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">1234</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token comment"># 绝对路径</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;/mydata/docker_mysql/data:/var/lib/mysql&quot;</span>
      <span class="token comment"># 相对路径，相对当前 docker-compose.yml 文件所在目录</span>
      <span class="token punctuation">-</span> “./conf<span class="token punctuation">:</span>/etc/mysql/conf.d“
      <span class="token comment"># 匿名挂载，匿名挂载只需要写容器目录即可，容器外对应的目录会在 /var/lib/docker/volume 中生成</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;/var/lib/mysql&quot;</span>
      <span class="token comment"># 具名挂载，就是给数据卷起了个名字，容器外对应的目录会在 /var/lib/docker/volume 中生成</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;mysql-data-volume:/var/lib/mysql&quot;</span>

<span class="token comment"># 定义数据卷，可以多个</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql-data-volume</span><span class="token punctuation">:</span> <span class="token comment"># 一个具体数据卷的条目名称</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span>data<span class="token punctuation">-</span>volume <span class="token comment"># 数据卷名称，默认为&quot;工程名称_数据卷条目名称&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-13-network-mode-网络模式" tabindex="-1"><a class="header-anchor" href="#_6-13-network-mode-网络模式" aria-hidden="true">#</a> 6.13 network_mode 网络模式</h3><p>设置网络模式，类似 docker run 时添加的参数 --net host 或者 --network host 的用法</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;bridge&quot;</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;host&quot;</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;none&quot;</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;service:[service name]&quot;</span>
<span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;container:[container name/id]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-14-networks" tabindex="-1"><a class="header-anchor" href="#_6-14-networks" aria-hidden="true">#</a> 6.14 networks</h3><p>配置容器连接的网络，引用顶级 networks 下的条目。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 定义服务，可以多个</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 配置容器连接的网络，引用顶级 networks 下的条目</span>
      <span class="token punctuation">-</span> nginx<span class="token punctuation">-</span>net <span class="token comment"># 一个具体网络的条目名称</span>

<span class="token comment"># 定义网络，可以多个。如果不声明，默认会创建一个网络名称为&quot;工程名称_default&quot;的 bridge 网络</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx-net</span><span class="token punctuation">:</span> <span class="token comment"># 一个具体网络的条目名称</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>net <span class="token comment"># 网络名称，默认为&quot;工程名称_网络条目名称&quot;</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge <span class="token comment"># 网络模式，默认为 bridge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-15-aliases" tabindex="-1"><a class="header-anchor" href="#_6-15-aliases" aria-hidden="true">#</a> 6.15 aliases</h3><p>网络上此服务的别名。同一网络上的其他容器可以使用服务名或此别名连接到服务容器。同一服务在不同的网络上可以具有不同的别名。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 定义服务，可以多个</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx</span><span class="token punctuation">:</span> <span class="token comment"># 服务名称</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span> <span class="token comment"># 配置容器连接的网络，引用顶级 networks 下的条目</span>
      <span class="token key atrule">nginx-net</span><span class="token punctuation">:</span> <span class="token comment"># 一个具体网络的条目名称</span>
        <span class="token key atrule">aliases</span><span class="token punctuation">:</span> <span class="token comment"># 服务别名，可以多个</span>
          <span class="token punctuation">-</span> nginx1 <span class="token comment"># 同一网络上的其他容器可以使用服务名或此别名连接到服务容器</span>

<span class="token comment"># 定义网络，可以多个。如果不声明，默认会创建一个网络名称为&quot;工程名称_default&quot;的 bridge 网络</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx-net</span><span class="token punctuation">:</span> <span class="token comment"># 一个具体网络的条目名称</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>net <span class="token comment"># 网络名称，默认为&quot;工程名称_网络条目名称&quot;</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> bridge <span class="token comment"># 网络模式，默认为 bridge</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-16-links" tabindex="-1"><a class="header-anchor" href="#_6-16-links" aria-hidden="true">#</a> 6.16 links</h3><p>服务之间可以使用服务名称相互访问，links 允许定义一个别名，从而使用该别名访问其它服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>version: <span class="token string">&#39;2&#39;</span>
services:
    web:
        build: <span class="token builtin class-name">.</span>
        links:
            - <span class="token string">&quot;db:database&quot;</span>
    db:
        image: postgres
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样 Web 服务就可以使用 db 或 database 作为 hostname 访问 db 服务了</li></ul><h2 id="_7-compose-常用命令" tabindex="-1"><a class="header-anchor" href="#_7-compose-常用命令" aria-hidden="true">#</a> 7. Compose 常用命令</h2><p>官方文档：<code>https://docs.docker.com/compose/reference/overview/</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token punctuation">[</span>-f <span class="token operator">&lt;</span>arg<span class="token operator">&gt;</span><span class="token punctuation">..</span>.<span class="token punctuation">]</span> <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARGS<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>部分命令选项如下：</p><ul><li>-f，--file：指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml；</li><li>-p, --project-name：指定工程名称，默认使用 docker-compose.yml 文件所在目录的名称；</li><li>-v：打印版本并退出；</li><li>--log-level：定义日志等级（DEBUG, INFO, WARNING, ERROR, CRITICAL）。</li></ul><h3 id="_7-1-up" tabindex="-1"><a class="header-anchor" href="#_7-1-up" aria-hidden="true">#</a> 7.1 up</h3><p><code>docker-compose up</code>创建并启动所有服务的容器。指定多个<code>yml</code>加<code>-f</code>选项。以守护进程模式运行加<code>-d</code>选项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 前台启动</span>
<span class="token function">docker-compose</span> up
<span class="token comment"># 后台启动</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
<span class="token comment"># -f 指定使用的 Compose 模板文件，默认为 docker-compose.yml，可以多次指定，指定多个 yml</span>
<span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose.yml up <span class="token parameter variable">-d</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-logs" tabindex="-1"><a class="header-anchor" href="#_7-2-logs" aria-hidden="true">#</a> 7.2 logs</h3><p><code>docker-compose logs</code>查看服务容器的输出日志。默认情况下，<code>docker-compose</code>将对不同的服务输出使用不同的颜色来区分。可以通过<code>--no-color</code>来关闭颜色。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 输出日志，不同的服务输出使用不同的颜色来区分</span>
<span class="token function">docker-compose</span> logs
<span class="token comment"># 跟踪日志输出</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span>
<span class="token comment"># 关闭颜色</span>
<span class="token function">docker-compose</span> logs --no-color
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-ps" tabindex="-1"><a class="header-anchor" href="#_7-3-ps" aria-hidden="true">#</a> 7.3 ps</h3><p><code>docker-compose ps</code>列出工程中所有服务的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 列出工程中所有服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span>
<span class="token comment"># 列出工程中指定服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-run" tabindex="-1"><a class="header-anchor" href="#_7-4-run" aria-hidden="true">#</a> 7.4 run</h3><p><code>docker-compose run</code>在指定服务容器上执行一个命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在工程中指定服务的容器上执行 echo &quot;helloworld&quot;</span>
<span class="token function">docker-compose</span> run nginx <span class="token builtin class-name">echo</span> <span class="token string">&quot;helloworld&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-5-exec" tabindex="-1"><a class="header-anchor" href="#_7-5-exec" aria-hidden="true">#</a> 7.5 exec</h3><p><code>docker-compose exec</code>进入服务容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入工程中指定服务的容器</span>
<span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> nginx <span class="token function">bash</span>
<span class="token comment"># 当一个服务拥有多个容器时，可通过 --index 参数进入到该服务下的任何容器</span>
<span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">--index</span><span class="token operator">=</span><span class="token number">1</span> nginx <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-6-pause" tabindex="-1"><a class="header-anchor" href="#_7-6-pause" aria-hidden="true">#</a> 7.6 pause</h3><p><code>docker-compose pause</code>暂停服务容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 暂停工程中所有服务的容器</span>
<span class="token function">docker-compose</span> pause
<span class="token comment"># 暂停工程中指定服务的容器</span>
<span class="token function">docker-compose</span> pause nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-7-unpause" tabindex="-1"><a class="header-anchor" href="#_7-7-unpause" aria-hidden="true">#</a> 7.7 unpause</h3><p><code>docker-compose unpause</code>恢复服务容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 恢复工程中所有服务的容器</span>
<span class="token function">docker-compose</span> unpause
<span class="token comment"># 恢复工程中指定服务的容器</span>
<span class="token function">docker-compose</span> unpause nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-8-restart" tabindex="-1"><a class="header-anchor" href="#_7-8-restart" aria-hidden="true">#</a> 7.8 restart</h3><p><code>docker-compose restart</code>重启服务容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 重启工程中所有服务的容器</span>
<span class="token function">docker-compose</span> restart
<span class="token comment"># 重启工程中指定服务的容器</span>
<span class="token function">docker-compose</span> restart nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-9-start" tabindex="-1"><a class="header-anchor" href="#_7-9-start" aria-hidden="true">#</a> 7.9 start</h3><p><code>docker-compose start</code>启动服务容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动工程中所有服务的容器</span>
<span class="token function">docker-compose</span> start
<span class="token comment"># 启动工程中指定服务的容器</span>
<span class="token function">docker-compose</span> start nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-10-stop" tabindex="-1"><a class="header-anchor" href="#_7-10-stop" aria-hidden="true">#</a> 7.10 stop</h3><p><code>docker-compose stop</code>停止服务容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 停止工程中所有服务的容器</span>
<span class="token function">docker-compose</span> stop
<span class="token comment"># 停止工程中指定服务的容器</span>
<span class="token function">docker-compose</span> stop nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-11-kill" tabindex="-1"><a class="header-anchor" href="#_7-11-kill" aria-hidden="true">#</a> 7.11 kill</h3><p><code>docker-compose kill</code>通过发送<code>SIGKILL</code>信号停止指定服务的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过发送 SIGKILL 信号停止工程中指定服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">kill</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-12-rm" tabindex="-1"><a class="header-anchor" href="#_7-12-rm" aria-hidden="true">#</a> 7.12 rm</h3><p>docker-compose rm 删除服务（停止状态）容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除所有（停止状态）服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">rm</span>
<span class="token comment"># 先停止所有服务的容器，再删除所有服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">rm</span> <span class="token parameter variable">-s</span>
<span class="token comment"># 不询问是否删除，直接删除</span>
<span class="token function">docker-compose</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span>
<span class="token comment"># 删除服务容器挂载的数据卷</span>
<span class="token function">docker-compose</span> <span class="token function">rm</span> <span class="token parameter variable">-v</span>
<span class="token comment"># 删除工程中指定服务的容器</span>
<span class="token function">docker-compose</span> <span class="token function">rm</span> <span class="token parameter variable">-sv</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-13-down" tabindex="-1"><a class="header-anchor" href="#_7-13-down" aria-hidden="true">#</a> 7.13 down</h3><p>停止并删除所有服务的容器、网络、镜像、数据卷。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 停止并删除工程中所有服务的容器、网络</span>
<span class="token function">docker-compose</span> stop
<span class="token comment"># 停止并删除工程中所有服务的容器、网络、镜像</span>
<span class="token function">docker-compose</span> down <span class="token parameter variable">--rmi</span> all
<span class="token comment"># 停止并删除工程中所有服务的容器、网络、数据卷</span>
<span class="token function">docker-compose</span> down <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-14-images" tabindex="-1"><a class="header-anchor" href="#_7-14-images" aria-hidden="true">#</a> 7.14 images</h3><p><code>docker-compose images</code>打印服务容器所对应的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打印所有服务的容器所对应的镜像</span>
<span class="token function">docker-compose</span> images
<span class="token comment"># 打印指定服务的容器所对应的镜像</span>
<span class="token function">docker-compose</span> images nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-15-port" tabindex="-1"><a class="header-anchor" href="#_7-15-port" aria-hidden="true">#</a> 7.15 port</h3><p><code>docker-compose port</code>打印指定服务容器的某个端口所映射的宿主机端口。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> port nginx <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-16-top" tabindex="-1"><a class="header-anchor" href="#_7-16-top" aria-hidden="true">#</a> 7.16 top</h3><p><code>docker-compose top</code>显示正在运行的进程。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 显示工程中所有服务的容器正在运行的进程</span>
<span class="token function">docker-compose</span> <span class="token function">top</span>
<span class="token comment"># 显示工程中指定服务的容器正在运行的进程</span>
<span class="token function">docker-compose</span> <span class="token function">top</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-17-pull" tabindex="-1"><a class="header-anchor" href="#_7-17-pull" aria-hidden="true">#</a> 7.17 pull</h3><p><code>docker-compose pull</code>拉取服务依赖的镜像。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 拉取工程中所有服务依赖的镜像</span>
<span class="token function">docker-compose</span> pull
<span class="token comment"># 拉取工程中 nginx 服务依赖的镜像</span>
<span class="token function">docker-compose</span> pull nginx
<span class="token comment"># 拉取镜像过程中不打印拉取进度信息</span>
<span class="token function">docker-compose</span> pull <span class="token parameter variable">-q</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-18-config" tabindex="-1"><a class="header-anchor" href="#_7-18-config" aria-hidden="true">#</a> 7.18 config</h3><p><code>docker-compose config -q</code>验证<code>docker-compose.yml</code>文件。当配置正确时，不输出任何内容，当配置错误时，输出错误信息。</p><h3 id="_7-19-help" tabindex="-1"><a class="header-anchor" href="#_7-19-help" aria-hidden="true">#</a> 7.19 help</h3><p><code>docker-compose -help</code>查看帮助。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,136),_={href:"https://www.jianshu.com/p/658911a8cff3",target:"_blank",rel:"noopener noreferrer"},f={href:"http://doc.ruoyi.vip/ruoyi-cloud/cloud/dokcer.html#docker-compose",target:"_blank",rel:"noopener noreferrer"};function x(q,w){const e=t("ExternalLinkIcon");return l(),i("div",null,[p,n("p",null,[s("Docker Compose"),r,s("Docker"),u,s("Fig"),m,s("Python"),k,s("Docker"),v,n("a",b,[s("https://github.com/docker/compose/releases"),a(e)])]),h,n("p",null,[n("a",g,[s("官方文档"),a(e)])]),y,n("p",null,[n("a",_,[s("Docker：Docker Compose 详解"),a(e)])]),n("p",null,[n("a",f,[s("若依官方文档"),a(e)])])])}const C=c(d,[["render",x],["__file","docker-compose-overview.html.vue"]]);export{C as default};
