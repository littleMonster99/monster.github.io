import{_ as e,W as a,X as n,a0 as i}from"./framework-f64bc974.js";const r={},t=i('<h1 id="spring-bean常见问题" tabindex="-1"><a class="header-anchor" href="#spring-bean常见问题" aria-hidden="true">#</a> Spring Bean常见问题</h1><h2 id="_1-什么是spring-bean" tabindex="-1"><a class="header-anchor" href="#_1-什么是spring-bean" aria-hidden="true">#</a> 1. 什么是Spring Bean？</h2><ul><li>Bean 由Spring IoC 容器实例化，配置、装配和管理</li><li>Bean 是基于用户提供给IoC 容器的配置元数据Bean Definition 创建</li></ul><h2 id="_2-spring-有哪些配置方式" tabindex="-1"><a class="header-anchor" href="#_2-spring-有哪些配置方式" aria-hidden="true">#</a> 2. Spring 有哪些配置方式</h2><p>单纯从Spring Framework 提供的方式，一共有三种：</p><ol><li>XML 配置文件</li><li>注解配置</li><li>Java Config 配置</li></ol><h2 id="_3-解释什么叫延迟加载" tabindex="-1"><a class="header-anchor" href="#_3-解释什么叫延迟加载" aria-hidden="true">#</a> 3. 解释什么叫延迟加载？</h2><p>默认情况下，容器启动之后会将所有作用域为<strong>单例</strong>的 Bean 都创建好，但是有的业务场景我们并不需要它提前都创建好。此时，我们可以在Bean 中设置 <code>lzay-init = &quot;true&quot;</code> 。</p><ul><li>这样，当容器启动之后，作用域为单例的 Bean ，就不在创建。</li><li>而是在获得该 Bean 时，才真正在创建加载。</li></ul>',9),l=[t];function o(s,d){return a(),n("div",null,l)}const c=e(r,[["render",o],["__file","spring-y-ioc-bean.html.vue"]]);export{c as default};
