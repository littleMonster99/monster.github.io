import{_ as s,W as e,X as p,Y as n,$ as t,a0 as c,D as o}from"./framework-f64bc974.js";const l={},i=c(`<h1 id="java-8-移除jvm永久代permgen" tabindex="-1"><a class="header-anchor" href="#java-8-移除jvm永久代permgen" aria-hidden="true">#</a> Java 8 - 移除JVM永久代Permgen</h1><blockquote><p>很多开发者都在其系统中见过“java.lang.OutOfMemoryError: PermGen space”这一问题。这往往是由类加载器相关的内存泄漏以及新类加载器的创建导致的，通常出现于代码热部署时。相对于正式产品，该问题在开发机上出现的频率更高，在产品中最常见的“问题”是默认值太低了。常用的解决方法是将其设置为256MB或更高。</p></blockquote><h2 id="_1-permgen-space简单介绍" tabindex="-1"><a class="header-anchor" href="#_1-permgen-space简单介绍" aria-hidden="true">#</a> 1. PermGen space简单介绍</h2><p>PermGen space的全称是Permanent Generation space,是指内存的永久保存区域，说说为什么会内存溢出: 这一部分用于存放Class和Meta的信息,Class在被 Load的时候被放入PermGen space区域，它和和存放Instance的Heap区域不同,所以如果你的APP会LOAD很多CLASS的话,就很可能出现PermGen space错误。这种错误常见在web服务器对JSP进行pre compile的时候。</p><p>JVM 种类有很多，比如 Oralce-Sun Hotspot, Oralce JRockit, IBM J9, Taobao JVM(淘宝好样的！)等等。当然武林盟主是Hotspot了，这个毫无争议。需要注意的是，PermGen space是Oracle-Sun Hotspot才有，JRockit以及J9是没有这个区域。</p><h2 id="_2-元空间-metaspace-一种新的内存空间诞生" tabindex="-1"><a class="header-anchor" href="#_2-元空间-metaspace-一种新的内存空间诞生" aria-hidden="true">#</a> 2. 元空间(MetaSpace)一种新的内存空间诞生</h2><p>JDK8 HotSpot JVM 将移除永久区，使用本地内存来存储类元数据信息并称之为: 元空间(Metaspace)；这与Oracle JRockit 和IBM JVM’s很相似，如下图所示</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220818220125200.png" alt="image-20220818220125200" tabindex="0" loading="lazy"><figcaption>image-20220818220125200</figcaption></figure><p>这意味着不会再有java.lang.OutOfMemoryError: PermGen问题，也不再需要你进行调优及监控内存空间的使用……但请等等，这么说还为时过早。在默认情况下，这些改变是透明的，接下来我们的展示将使你知道仍然要关注类元数据内存的占用。请一定要牢记，这个新特性也不能神奇地消除类和类加载器导致的内存泄漏。</p><p>java8中metaspace总结如下:</p><ul><li>PermGen 空间的状况</li></ul><p>这部分内存空间将全部移除。</p><p>JVM的参数: PermSize 和 MaxPermSize 会被忽略并给出警告(如果在启用时设置了这两个参数)。</p><ul><li>Metaspace 内存分配模型</li></ul><p>大部分类元数据都在本地内存中分配。</p><p>用于描述类元数据的“klasses”已经被移除。</p><ul><li>Metaspace 容量</li></ul><p>默认情况下，类元数据只受可用的本地内存限制(容量取决于是32位或是64位操作系统的可用虚拟内存大小)。</p><p>新参数(MaxMetaspaceSize)用于限制本地内存分配给类元数据的大小。如果没有指定这个参数，元空间会在运行时根据需要动态调整。</p><ul><li>Metaspace 垃圾回收</li></ul><p>对于僵死的类及类加载器的垃圾回收将在元数据使用达到“MaxMetaspaceSize”参数的设定值时进行。</p><p>适时地监控和调整元空间对于减小垃圾回收频率和减少延时是很有必要的。持续的元空间垃圾回收说明，可能存在类、类加载器导致的内存泄漏或是大小设置不合适。</p><ul><li>Java 堆内存的影响</li></ul><p>一些杂项数据已经移到Java堆空间中。升级到JDK8之后，会发现Java堆 空间有所增长。</p><ul><li>Metaspace 监控</li></ul><p>元空间的使用情况可以从HotSpot1.8的详细GC日志输出中得到。</p><p>Jstat 和 JVisualVM两个工具，在使用b75版本进行测试时，已经更新了，但是还是能看到老的PermGen空间的出现。</p><p>前面已经从理论上充分说明，下面让我们通过“泄漏”程序进行新内存空间的观察……</p><h2 id="_3-permgen-vs-metaspace-运行时比较" tabindex="-1"><a class="header-anchor" href="#_3-permgen-vs-metaspace-运行时比较" aria-hidden="true">#</a> 3. PermGen vs. Metaspace 运行时比较</h2><p>为了更好地理解Metaspace内存空间的运行时行为，</p><p>将进行以下几种场景的测试:</p><ul><li>使用JDK1.7运行Java程序，监控并耗尽默认设定的85MB大小的PermGen内存空间。</li><li>使用JDK1.8运行Java程序，监控新Metaspace内存空间的动态增长和垃圾回收过程。</li><li>使用JDK1.8运行Java程序，模拟耗尽通过“MaxMetaspaceSize”参数设定的128MB大小的Metaspace内存空间。</li></ul><p>首先建立了一个模拟PermGen OOM的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassA</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do nothing</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是一个简单的ClassA，把他编译成class字节码放到D: /classes下面，测试代码中用URLClassLoader来加载此类型上面类编译成class</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 模拟PermGen OOM
 * <span class="token keyword">@author</span> benhail
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//准备url</span>
            <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/classes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">URL</span><span class="token punctuation">[</span><span class="token punctuation">]</span> urls <span class="token operator">=</span> <span class="token punctuation">{</span>url<span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">//获取有关类型加载的JMX接口</span>
            <span class="token class-name">ClassLoadingMXBean</span> loadingBean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getClassLoadingMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//用于缓存类加载器</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">&gt;</span></span> classLoaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ClassLoader</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//加载类型并缓存类加载器实例</span>
                <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">;</span>
                classLoaders<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
                classLoader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">&quot;ClassA&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//显示数量信息(共加载过的类型数目，当前还有效的类型数目，已经被卸载的类型数目)</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;total: &quot;</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getTotalLoadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;active: &quot;</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getLoadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;unloaded: &quot;</span> <span class="token operator">+</span> loadingBean<span class="token punctuation">.</span><span class="token function">getUnloadedClassCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虚拟机器参数设置如下: -verbose -verbose:gc</p><p>设置-verbose参数是为了获取类型加载和卸载的信息</p><p>设置-verbose:gc是为了获取垃圾收集的相关信息</p><h3 id="_3-1-jdk-1-7-64-bit-–-permgen-耗尽测试" tabindex="-1"><a class="header-anchor" href="#_3-1-jdk-1-7-64-bit-–-permgen-耗尽测试" aria-hidden="true">#</a> 3.1 JDK 1.7 @64-bit – PermGen 耗尽测试</h3><p>Java1.7的PermGen默认空间为85 MB(或者可以通过-XX:MaxPermSize=XXXm指定)</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220818221159680.png" alt="image-20220818221159680" tabindex="0" loading="lazy"><figcaption>image-20220818221159680</figcaption></figure><p>可以从上面的JVisualVM的截图看出: 当加载超过6万个类之后，PermGen被耗尽。我们也能通过程序和GC的输出观察耗尽的过程。</p><p>程序输出(摘取了部分)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
<span class="token punctuation">[</span>Loaded ClassA from file:/D:/classes/<span class="token punctuation">]</span>
total: <span class="token number">64887</span>
active: <span class="token number">64887</span>
unloaded: <span class="token number">0</span>
<span class="token punctuation">[</span>GC 245041K-<span class="token operator">&gt;</span>213978K<span class="token punctuation">(</span>536768K<span class="token punctuation">)</span>, <span class="token number">0.0597188</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span>Full GC 213978K-<span class="token operator">&gt;</span>211425K<span class="token punctuation">(</span>644992K<span class="token punctuation">)</span>, <span class="token number">0.6456638</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span>GC 211425K-<span class="token operator">&gt;</span>211425K<span class="token punctuation">(</span>656448K<span class="token punctuation">)</span>, <span class="token number">0.0086696</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span>Full GC 211425K-<span class="token operator">&gt;</span>211411K<span class="token punctuation">(</span>731008K<span class="token punctuation">)</span>, <span class="token number">0.6924754</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span>GC 211411K-<span class="token operator">&gt;</span>211411K<span class="token punctuation">(</span>726528K<span class="token punctuation">)</span>, <span class="token number">0.0088992</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.
java.lang.OutOfMemoryError: PermGen space
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-jdk-1-8-64-bit-–-metaspace大小动态调整测试" tabindex="-1"><a class="header-anchor" href="#_3-2-jdk-1-8-64-bit-–-metaspace大小动态调整测试" aria-hidden="true">#</a> 3.2 JDK 1.8 @64-bit – Metaspace大小动态调整测试</h3><p>Java的Metaspace空间: 不受限制 (默认)</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220818221515514.png" alt="image-20220818221515514" tabindex="0" loading="lazy"><figcaption>image-20220818221515514</figcaption></figure><p>从上面的截图可以看到，JVM Metaspace进行了动态扩展，本地内存的使用由20MB增长到646MB，以满足程序中不断增长的类数据内存占用需求。我们也能观察到JVM的垃圾回收事件—试图销毁僵死的类或类加载器对象。但是，由于我们程序的泄漏，JVM别无选择只能动态扩展Metaspace内存空间。程序加载超过10万个类，而没有出现OOM事件。</p><h3 id="_3-3-jdk-1-8-64-bit-–-metaspace-受限测试" tabindex="-1"><a class="header-anchor" href="#_3-3-jdk-1-8-64-bit-–-metaspace-受限测试" aria-hidden="true">#</a> 3.3 JDK 1.8 @64-bit – Metaspace 受限测试</h3><p>Java的Metaspace空间: 128MB(-XX:MaxMetaspaceSize=128m)</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220818221612558.png" alt="image-20220818221612558" tabindex="0" loading="lazy"><figcaption>image-20220818221612558</figcaption></figure><p>可以从上面的JVisualVM的截图看出: 当加载超过2万个类之后，Metaspace被耗尽；与JDK1.7运行时非常相似。我们也能通过程序和GC的输出观察耗尽的过程。另一个有趣的现象是，保留的原生内存占用量是设定的最大大小两倍之多。这可能表明，如果可能的话，可微调元空间容量大小策略，来避免本地内存的浪费。</p><p>从Java程序的输出中看到如下异常。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Loaded ClassA from file:/D:/classes/<span class="token punctuation">]</span>
total: <span class="token number">21393</span>
active: <span class="token number">21393</span>
unloaded: <span class="token number">0</span>
<span class="token punctuation">[</span>GC <span class="token punctuation">(</span>Metadata GC Threshold<span class="token punctuation">)</span> 64306K-<span class="token operator">&gt;</span>57010K<span class="token punctuation">(</span>111616K<span class="token punctuation">)</span>, <span class="token number">0.0145502</span> secs<span class="token punctuation">]</span>
<span class="token punctuation">[</span>Full GC <span class="token punctuation">(</span>Metadata GC Threshold<span class="token punctuation">)</span> 57010K-<span class="token operator">&gt;</span>56810K<span class="token punctuation">(</span>122368K<span class="token punctuation">)</span>, <span class="token number">0.1068084</span> secs<span class="token punctuation">]</span>
java.lang.OutOfMemoryError: Metaspace
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在设置了MaxMetaspaceSize的情况下，该空间的内存仍然会耗尽，进而引发“java.lang.OutOfMemoryError: Metadata space”错误。因为类加载器的泄漏仍然存在，而通常Java又不希望无限制地消耗本机内存，因此设置一个类似于MaxPermSize的限制看起来也是合理的。</p><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><ul><li>之前不管是不是需要，JVM都会吃掉那块空间……如果设置得太小，JVM会死掉；如果设置得太大，这块内存就被JVM浪费了。理论上说，现在你完全可以不关注这个，因为JVM会在运行时自动调校为“合适的大小”；</li><li>提高Full GC的性能，在Full GC期间，Metadata到Metadata pointers之间不需要扫描了，别小看这几纳秒时间；</li><li>隐患就是如果程序存在内存泄露，像OOMTest那样，不停的扩展metaspace的空间，会导致机器的内存不足，所以还是要有必要的调试和监控。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,59),u={href:"https://pdai.tech/md/java/java8/java8-permgen.html",target:"_blank",rel:"noopener noreferrer"},r=n("strong",null,"Java 8 - 移除Permgen",-1);function d(k,m){const a=o("ExternalLinkIcon");return e(),p("div",null,[i,n("p",null,[n("a",u,[r,t(a)])])])}const b=s(l,[["render",d],["__file","java8-permgen.html.vue"]]);export{b as default};
