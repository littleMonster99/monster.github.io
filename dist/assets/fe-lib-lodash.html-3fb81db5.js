import{_ as p,W as o,X as e,Y as n,Z as s,$ as t,a0 as c,D as i}from"./framework-f64bc974.js";const u={},l=n("h1",{id:"lodash使用与常用函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#lodash使用与常用函数","aria-hidden":"true"},"#"),s(" lodash使用与常用函数")],-1),r=n("h2",{id:"_1-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-简介","aria-hidden":"true"},"#"),s(" 1. 简介")],-1),k={href:"https://www.lodashjs.com/",target:"_blank",rel:"noopener noreferrer"},d=c(`<h2 id="_2-集成使用" tabindex="-1"><a class="header-anchor" href="#_2-集成使用" aria-hidden="true">#</a> 2. 集成使用</h2><h3 id="_2-1-安装" tabindex="-1"><a class="header-anchor" href="#_2-1-安装" aria-hidden="true">#</a> 2.1 安装</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> i lodash <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-2-引入" tabindex="-1"><a class="header-anchor" href="#_2-2-引入" aria-hidden="true">#</a> 2.2 引入</h3><p>在main.js 中引入</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> _ <span class="token keyword">from</span> <span class="token string">&#39;lodash&#39;</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_ <span class="token operator">=</span> _
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-使用" tabindex="-1"><a class="header-anchor" href="#_2-3-使用" aria-hidden="true">#</a> 2.3 使用</h3><p>N次循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-常用函数1" tabindex="-1"><a class="header-anchor" href="#_3-常用函数1" aria-hidden="true">#</a> 3. 常用函数1</h2><h3 id="_3-1-判断对象为空" tabindex="-1"><a class="header-anchor" href="#_3-1-判断对象为空" aria-hidden="true">#</a> 3.1 判断对象为空</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>
 
_<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>
 
_<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; true</span>
 
_<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>
 
_<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&#39;a&#39;</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>检查 <code>value</code> 是否为一个空对象，集合，映射或者set。 判断的依据是除非是有枚举属性的对象，length 大于 0 的 arguments object, array, string 或类jquery选择器。</p><p>对象如果被认为为空，那么他们没有自己的可枚举属性的对象。</p><p>类数组值，比如<code>arguments</code>对象，array，buffer，string或者类jQuery集合的<code>length</code> 为 <code>0</code>，被认为是空。类似的，map（映射）和set 的<code>size</code> 为 <code>0</code>，被认为是空。</p><h3 id="_3-2-n次函数" tabindex="-1"><a class="header-anchor" href="#_3-2-n次函数" aria-hidden="true">#</a> 3.2 N次函数</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1. Basic for loop.</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2. Using Array&#39;s join and split methods</span>
<span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>for 语句是执行虚幻的不二选择，Array.apply也可以模拟循环，但在上面代码的使用场景下，_.tiems()的解决方法更加简洁和易于理解。</p><h3 id="_3-3-深层查找属性值" tabindex="-1"><a class="header-anchor" href="#_3-3-深层查找属性值" aria-hidden="true">#</a> 3.3 深层查找属性值</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 从每个主人那里获取第一只宠物的名字</span>
<span class="token keyword">var</span> ownerArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Colin&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;pets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dog1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dog2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;owner&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;pets&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dog3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dog4&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Array&#39;s map method.</span>
<span class="token keyword">let</span> petsNameByArrayMap <span class="token operator">=</span> ownerArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">owner</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token keyword">return</span> owner<span class="token punctuation">.</span>pets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 每个人第一个宠物名字（使用 Array&#39;s map）：dog1,dog3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;每个人第一个宠物名字（使用 Array&#39;s map）：&quot;</span> <span class="token operator">+</span> petsNameByArrayMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lodash</span>
<span class="token keyword">let</span> petsNameByLodash <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ownerArr<span class="token punctuation">,</span> <span class="token string">&quot;pets[0].name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 每个人第一个宠物名字（使用Lodash）：dog1,dog3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;每个人第一个宠物名字（使用Lodash）：&quot;</span> <span class="token operator">+</span> petsNameByLodash<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_.map 方法是对原生 map 方法的改进，其中使用 pets[0].name 字符串对嵌套数据取值的方式简化了很多冗余的代码，非常类似使用jQuery选择DOM节点 ul&gt;li&gt;a , 对于前端开发者来说有种久违的亲切感。</p><h3 id="_3-4-个性化数组" tabindex="-1"><a class="header-anchor" href="#_3-4-个性化数组" aria-hidden="true">#</a> 3.4 个性化数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Array&#39;s map method.</span>
<span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;ball_&quot;</span> <span class="token operator">+</span> index<span class="token punctuation">;</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span><span class="token function">uniqueId</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;ball_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> _<span class="token punctuation">.</span><span class="token function">partial</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span>uniqueId<span class="token punctuation">,</span> <span class="token string">&#39;ball_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// eg. [ball_0, ball_1, ball_2, ball_3, ball_4, ball_6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们要创建一个初始值不同、长度为6的数组，其中 _.uniqueId 方法用于生成独一无二的标示符（递增的数字，在程序运行期间保持独一无二）， _.partial 方法是对 bind 的封装。</p><h3 id="_3-5-深拷贝" tabindex="-1"><a class="header-anchor" href="#_3-5-深拷贝" aria-hidden="true">#</a> 3.5 深拷贝</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;colin&quot;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 常用的方法一般会比较长，循环对象等</span>
<span class="token comment">// http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript</span>

<span class="token comment">// Lodash</span>
<span class="token keyword">var</span> objB <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>objA<span class="token punctuation">)</span><span class="token punctuation">;</span>
objB <span class="token operator">===</span> objA <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>JavaScript 没有直接提供深拷贝的函数，但是我们可以用其他杉树来模拟，比如 JSON.parse(JSON.stringify(objectToClone)), 但这种方法要求对象中的属性值不能是函数。Lodash 中的 _.cloneDeep 函数封装了深拷贝的逻辑，用起来更加简洁。</p><h3 id="_3-6-随机数" tabindex="-1"><a class="header-anchor" href="#_3-6-随机数" aria-hidden="true">#</a> 3.6 <strong>随机数</strong></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Native utility method</span>
<span class="token keyword">function</span> <span class="token function">getRandomNumber</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getRandomNumber</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lodash 的随机数生成函数更贴近实际开发，ECMAScript 的随机数生成函数式底层必备的接口，两者都不可获取。此外，使用 _.random(15, 20, true) 还可以在15到20之间生成随机的浮点数。</p><h3 id="_3-7-对象扩展" tabindex="-1"><a class="header-anchor" href="#_3-7-对象扩展" aria-hidden="true">#</a> 3.7 对象扩展</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Adding extend function to Object.prototype</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">extend</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;colin&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;car&quot;</span><span class="token operator">:</span> <span class="token string">&quot;suzuki&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> objB <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;james&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

objA<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>objB<span class="token punctuation">)</span><span class="token punctuation">;</span>
objA<span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;: &quot;james&quot;, &quot;age&quot;: 17, &quot;car&quot;: &quot;suzuki&quot;};</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> ojbB<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_.assign 是浅拷贝， 和ES6新增的 Object.assign 函数功能一致（建议优先使用Object.assign）。</p><h3 id="_3-8-筛选属性" tabindex="-1"><a class="header-anchor" href="#_3-8-筛选属性" aria-hidden="true">#</a> 3.8 筛选属性</h3><p>去除掉某些属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Native method: Remove an array of keys from object</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;colin&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;car&quot;</span><span class="token operator">:</span> <span class="token string">&quot;suzuki&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

objA<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objA<span class="token punctuation">;</span> <span class="token comment">// {&quot;name&quot;: &quot;colin&quot;}</span>

<span class="token comment">// Lodash</span>
objA <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; {&quot;name&quot;: &quot;colin&quot;}</span>

objA <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> <span class="token string">&quot;car&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; {&quot;name&quot;: &quot;colin&quot;, &quot;age&quot;: 17}</span>

objA <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">omit</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> _<span class="token punctuation">.</span>isNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; {&quot;name&quot;: &quot;colin&quot;, &quot;car&quot;: &quot;suzuki&quot;};</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数情况下，Lodash所提供的辅助函数都会比原声的函数更贴近开发需求。在上面的代码中，开发者可以使用数组、字符串以及函数的方式筛选对象的属性，并且最终会返回一个新的对象，中间执行筛选时不会对旧对象产生影响。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Native method: Returning a new object with selected properties</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> _this<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> objA <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;colin&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;car&quot;</span><span class="token operator">:</span> <span class="token string">&quot;suzuki&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> objB <span class="token operator">=</span> objA<span class="token punctuation">.</span><span class="token function">pick</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; {&quot;car&quot;: &quot;suzuki&quot;, &quot;age&quot;: 17}</span>

<span class="token comment">// Lodash</span>
<span class="token keyword">var</span> objB <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">pick</span><span class="token punctuation">(</span>objA<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;car&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// =&gt; {&quot;car&quot;: &quot;suzuki&quot;, &quot;age&quot;:17}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_.pick 是 _.omit 的相反操作，用于从其他对象中挑选属性生成新的对象。</p><h3 id="_3-9-随机元素" tabindex="-1"><a class="header-anchor" href="#_3-9-随机元素" aria-hidden="true">#</a> 3.9 随机元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> luckDraw <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Colin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Lily&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mary&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">pickRandomPerson</span><span class="token punctuation">(</span><span class="token parameter">luckyDraw</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>luckyDraw<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> luckyDraw<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">pickRandomPerson</span><span class="token punctuation">(</span>luckyDraw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//John</span>

<span class="token comment">// Lodash</span>
_<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>luckyDraw<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Colin</span>

<span class="token comment">// Lodash - Getting 2 random item</span>
_<span class="token punctuation">.</span><span class="token function">sample</span><span class="token punctuation">(</span>luckyDraw<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;John&#39;, &#39;Lily&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>_.sample 支持随机挑选多个元素并返回新的数组。</p><h2 id="_4-常用函数2" tabindex="-1"><a class="header-anchor" href="#_4-常用函数2" aria-hidden="true">#</a> 4. 常用函数2</h2><h3 id="_4-1-判断对象中是否含有某元素" tabindex="-1"><a class="header-anchor" href="#_4-1-判断对象中是否含有某元素" aria-hidden="true">#</a> 4.1 判断对象中是否含有某元素</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> smartPerson <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;戈德斯文&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;gender&#39;</span><span class="token operator">:</span> <span class="token string">&#39;male&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  smartTeam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;戈德斯文&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;杨海月&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;柴硕&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;师贝贝&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>smartPerson<span class="token punctuation">,</span> <span class="token string">&#39;戈德斯文&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>smartTeam<span class="token punctuation">,</span> <span class="token string">&#39;杨海月&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>smartTeam<span class="token punctuation">,</span> <span class="token string">&#39;杨海月&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>_.includes()</code>第一个参数是需要查询的对象，第二个参数是需要查询的元素，第三个参数是开始查询的下标</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,47),v={href:"https://www.lodashjs.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/wenqiangit/p/11762459.html",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const a=i("ExternalLinkIcon");return o(),e("div",null,[l,r,n("p",null,[n("a",k,[s("Lodash 中文网"),t(a)]),s(" Lodash 是一个著名的 javascript 原生库，不需要引入其他第三方依赖，是一个意在提高开发者效率,提高 JS 原生方法性能的JS 库。简单的说就是，很多方法 lodash 已经帮你写好了，直接调用就行，不用自己费尽心思去写了，而且可以统一方法的一致性。Lodash 使用了一个简单的 _ 符号，就像 Jquery 的 $ 一样，十分简洁。")]),d,n("p",null,[n("a",v,[s("Lodash 中文网"),t(a)])]),n("p",null,[n("a",m,[s("Loadsh 常用方法总结以及在vue中使用Loadsh"),t(a)])])])}const q=p(u,[["render",b],["__file","fe-lib-lodash.html.vue"]]);export{q as default};
