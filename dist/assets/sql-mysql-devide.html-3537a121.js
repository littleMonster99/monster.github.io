import{_ as i,W as r,X as h,Y as a,Z as d,$ as n,a0 as s,D as l}from"./framework-f64bc974.js";const t={},c=s('<h1 id="mysql-分表分库" tabindex="-1"><a class="header-anchor" href="#mysql-分表分库" aria-hidden="true">#</a> MySQL - 分表分库</h1><h2 id="_1-水平切分" tabindex="-1"><a class="header-anchor" href="#_1-水平切分" aria-hidden="true">#</a> 1. 水平切分</h2><p>水平切分又称为 Sharding，它是将同一个表中的记录拆分到多个结构相同的表中。</p><p>当一个表的数据不断增多时，Sharding 是必然的选择，它可以将数据分布到集群的不同节点上，从而缓解单个数据库的压力。</p><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220630203012598.png" alt="image-20220630203012598"><h2 id="_2-垂直切分" tabindex="-1"><a class="header-anchor" href="#_2-垂直切分" aria-hidden="true">#</a> 2. 垂直切分</h2><p>垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。</p><p>在数据库的层面使用垂直切分将按数据库中表的密集程度部署到不同的库中，例如将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220630203247107.png" alt="image-20220630203247107"><h2 id="_3-sharding-策略" tabindex="-1"><a class="header-anchor" href="#_3-sharding-策略" aria-hidden="true">#</a> 3. Sharding 策略</h2><ul><li>哈希取模: hash(key) % NUM_DB</li><li>范围: 可以是 ID 范围也可以是时间范围</li><li>映射表: 使用单独的一个数据库来存储映射关系</li></ul><h2 id="_4-sharding-存在的问题及解决方案" tabindex="-1"><a class="header-anchor" href="#_4-sharding-存在的问题及解决方案" aria-hidden="true">#</a> 4. Sharding 存在的问题及解决方案</h2><h3 id="_4-1-事务问题" tabindex="-1"><a class="header-anchor" href="#_4-1-事务问题" aria-hidden="true">#</a> 4.1 事务问题</h3><p>使用分布式事务来解决，比如 XA 接口。</p><h3 id="_4-2-链接" tabindex="-1"><a class="header-anchor" href="#_4-2-链接" aria-hidden="true">#</a> 4.2 链接</h3><p>可以将原来的 JOIN 分解成多个单表查询，然后在用户程序中进行 JOIN。</p><h3 id="_4-3-id-唯一性" tabindex="-1"><a class="header-anchor" href="#_4-3-id-唯一性" aria-hidden="true">#</a> 4.3 ID 唯一性</h3><ul><li>使用全局唯一 ID: GUID</li><li>为每个分片指定一个 ID 范围</li><li>分布式 ID 生成器 (如 Twitter 的 Snowflake 算法)</li></ul><h2 id="_5-数据库分片两种方案" tabindex="-1"><a class="header-anchor" href="#_5-数据库分片两种方案" aria-hidden="true">#</a> 5. 数据库分片两种方案</h2><h3 id="_5-1-客户端代理" tabindex="-1"><a class="header-anchor" href="#_5-1-客户端代理" aria-hidden="true">#</a> 5.1 客户端代理</h3><p><strong>分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现</strong></p><ul><li>当当网的Sharding-JDBC</li><li>阿里的TDDL是两种比较常用的实现</li></ul><h3 id="_5-2-中间件代理" tabindex="-1"><a class="header-anchor" href="#_5-2-中间件代理" aria-hidden="true">#</a> 5.2 中间件代理</h3><p><strong>在应用和数据中间加了一层代理层，分片逻辑统一维护在中间件服务中</strong>。</p><ul><li>Mycat</li><li>360的Atlas</li><li>网易的DDB</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',26),o={href:"https://pdai.tech/md/db/sql-mysql/sql-mysql-devide.html",target:"_blank",rel:"noopener noreferrer"};function _(p,g){const e=l("ExternalLinkIcon");return r(),h("div",null,[c,a("p",null,[a("a",o,[d("MySQL - 分表分库"),n(e)])])])}const m=i(t,[["render",_],["__file","sql-mysql-devide.html.vue"]]);export{m as default};
