import{_ as t,W as n,X as s,Y as a,Z as i,$ as d,a0 as l,D as c}from"./framework-f64bc974.js";const o={},r=l(`<h1 id="linux系统监控命令汇总" tabindex="-1"><a class="header-anchor" href="#linux系统监控命令汇总" aria-hidden="true">#</a> Linux系统监控命令汇总</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>以下命令以Ubuntu 18.04 LTS 系统为准。</p><table><thead><tr><th>命令</th><th>功能</th><th>实例</th><th></th></tr></thead><tbody><tr><td>free</td><td>查看内存使用情况，包括物理内存和虚拟内存</td><td>free -h 或 free -m</td><td></td></tr><tr><td>vmstat</td><td>对系统的整体情况进行统计，包括内核进程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息</td><td>vmstat 2 100</td><td></td></tr><tr><td>top</td><td>实时显示系统中各个进程的资源占用状况及总体状况</td><td>top</td><td></td></tr><tr><td>mpstat</td><td>实时系统监控工具，它会报告与CPU相关的统计信息</td><td>mpstat</td><td></td></tr><tr><td>sar</td><td>收集、报告和保存CPU、内存、输入输出端口使用情况</td><td>sar -n DEV 3 100</td><td></td></tr><tr><td>netstat</td><td>检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据</td><td>netstat -a</td><td></td></tr><tr><td>tcpdump</td><td>用于捕捉或者过滤网络上指定接口上接收或者传输的TCP/IP包</td><td>tcpdump -i eth0 -c 3</td><td></td></tr><tr><td>iptraf</td><td>用来生成包括TCP信息、UDP计数、ICMP和OSPF信息、以太网负载信息、节点状态信息、IP校验和错误等等统计数据</td><td>iptraf</td><td></td></tr><tr><td>iostat</td><td>收集显示系统存储设备输入和输出状态统计</td><td>iostat -x -k 2 100</td><td></td></tr><tr><td>lsof</td><td>查看进程打开的文件的工具，查看监听端口</td><td>lsof -i :3000</td><td></td></tr><tr><td>atop</td><td>显示的是各种系统资源（CPU, memory, network, I/O, kernel）的综合，并且在高负载的情况下进行了彩色标注</td><td>atop</td><td></td></tr><tr><td>htop</td><td>它和top命令十分相似，高级的交互式的实时linux进程监控工具</td><td>htop</td><td></td></tr><tr><td>ps</td><td>最基本同时也是非常强大的进程查看命令</td><td>ps aux</td><td>grep php</td></tr><tr><td>glances</td><td>监视 CPU，平均负载，内存，网络流量，磁盘 I/O，其他处理器 和 文件系统 空间的利用情况</td><td>glances</td><td></td></tr><tr><td>dstat</td><td>全能系统信息统计工具，可用于替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具</td><td>dstat</td><td></td></tr><tr><td>uptime</td><td>用于查看服务器运行了多长时间以及有多少个用户登录，快速获知服务器的负荷情况</td><td>uptime</td><td></td></tr><tr><td>dmesg</td><td>主要用来显示内核信息。使用dmesg可以有效诊断机器硬件故障或者添加硬件出现的问题</td><td>dmesg</td><td></td></tr><tr><td>mpstat</td><td>用于报告多路CPU主机的每颗CPU活动情况，以及整个主机的CPU情况</td><td>mpstat 2 3</td><td></td></tr><tr><td>nmon</td><td>监控CPU、内存、I/O、文件系统及网络资源。对于内存的使用，它可以实时的显示 总/剩余内存、交换空间等信息</td><td>nmon</td><td></td></tr><tr><td>mytop</td><td>用于监控 mysql 的线程和性能。它能让你实时查看数据库以及正在处理哪些查询</td><td>mytop</td><td></td></tr><tr><td>iftop</td><td>用来监控网卡的实时流量（可以指定网段）、反向解析IP、显示端口信息等</td><td>iftop</td><td></td></tr><tr><td>jnettop</td><td>以相同的方式来监测网络流量但比 iftop 更形象。它还支持自定义的文本输出，并能以友好的交互方式来深度分析日志</td><td>jnettop</td><td></td></tr><tr><td>ngrep</td><td>网络层的 grep。它使用 pcap ，允许通过指定扩展正则表达式或十六进制表达式来匹配数据包</td><td>ngrep</td><td></td></tr><tr><td>nmap</td><td>可以扫描你服务器开放的端口并且可以检测正在使用哪个操作系统</td><td>nmap localhost</td><td></td></tr><tr><td>du</td><td>查看Linux系统中某目录的大小</td><td>du -sh *</td><td></td></tr><tr><td>fdisk</td><td>查看硬盘及分区信息</td><td>fdisk -l</td><td></td></tr></tbody></table><h2 id="_2-内存监控" tabindex="-1"><a class="header-anchor" href="#_2-内存监控" aria-hidden="true">#</a> 2. 内存监控</h2><h3 id="_2-1-free" tabindex="-1"><a class="header-anchor" href="#_2-1-free" aria-hidden="true">#</a> 2.1 free</h3><p>Linux free命令用于显示内存状态。</p><p>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p><h4 id="_2-1-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-1-1-语法" aria-hidden="true">#</a> 2.1.1 语法</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">free</span> <span class="token punctuation">[</span>-bkmotV<span class="token punctuation">]</span><span class="token punctuation">[</span>-s <span class="token operator">&lt;</span>间隔秒数<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用选项： <code>-b</code>：以Byte为单位显示内存使用情况； <code>-k</code>：以KB为单位显示内存使用情况； <code>-m</code>：以MB为单位显示内存使用情况； <code>-g</code>：以GB为单位显示内存使用情况;</p><p><strong><code>-h</code>: 以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。单位有：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>B = bytes
K = kilos
M = megas
G = gigas
T = teras
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-o</code>：不显示缓冲区调节列； <code>-t</code>：显示内存总和列； <code>-V</code>：显示版本信息。****</p><p><strong><code>-s</code>: &lt;间隔秒数&gt; 持续观察内存使用状况。</strong></p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401101834998.png" alt="image-20220401101834998" tabindex="0" loading="lazy"><figcaption>image-20220401101834998</figcaption></figure><h4 id="_2-1-2-字段说明" tabindex="-1"><a class="header-anchor" href="#_2-1-2-字段说明" aria-hidden="true">#</a> 2.1.2 字段说明：</h4><ul><li>total：内存总数；</li><li>used：已经使用的内存数，包括 cached 和应用程序实际使用的内存；</li><li>free：空闲的内存数；</li><li>shared：当前已经废弃不用；</li><li>buffers：缓存内存数；</li><li>cached：缓存内存数。</li></ul><p>关系：total = used +available</p><h4 id="_2-1-3-实例" tabindex="-1"><a class="header-anchor" href="#_2-1-3-实例" aria-hidden="true">#</a> 2.1.3 实例</h4><h5 id="_2-1-3-1-显示内存使用情况" tabindex="-1"><a class="header-anchor" href="#_2-1-3-1-显示内存使用情况" aria-hidden="true">#</a> 2.1.3.1 显示内存使用情况</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>free
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141256030.png" alt="image-20220401141256030" tabindex="0" loading="lazy"><figcaption>image-20220401141256030</figcaption></figure><h5 id="_2-1-3-2-以合适的单位显示内存使用情况" tabindex="-1"><a class="header-anchor" href="#_2-1-3-2-以合适的单位显示内存使用情况" aria-hidden="true">#</a> 2.1.3.2 以合适的单位显示内存使用情况</h5><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141510962.png" alt="image-20220401141510962" tabindex="0" loading="lazy"><figcaption>image-20220401141510962</figcaption></figure><h5 id="_2-1-3-3-以总和的形式显示内存的使用信息" tabindex="-1"><a class="header-anchor" href="#_2-1-3-3-以总和的形式显示内存的使用信息" aria-hidden="true">#</a> 2.1.3.3 以总和的形式显示内存的使用信息</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>free -t
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141403556.png" alt="image-20220401141403556" tabindex="0" loading="lazy"><figcaption>image-20220401141403556</figcaption></figure><h5 id="_2-1-3-4-周期性的查询内存使用信息" tabindex="-1"><a class="header-anchor" href="#_2-1-3-4-周期性的查询内存使用信息" aria-hidden="true">#</a> 2.1.3.4 周期性的查询内存使用信息</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>free -s 10 //每10s 执行一次命令
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141645744.png" alt="image-20220401141645744" tabindex="0" loading="lazy"><figcaption>image-20220401141645744</figcaption></figure><h3 id="_2-2-vmstat" tabindex="-1"><a class="header-anchor" href="#_2-2-vmstat" aria-hidden="true">#</a> 2.2 vmstat</h3><h4 id="_2-2-1-简介" tabindex="-1"><a class="header-anchor" href="#_2-2-1-简介" aria-hidden="true">#</a> 2.2.1 简介</h4><p>mstat命令 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p><h4 id="_2-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_2-2-2-语法" aria-hidden="true">#</a> 2.2.2 语法</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">vmstat</span> <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项 <code>-a</code>：显示活动内页； <code>-f</code>：显示启动后创建的进程总数； <code>-m</code>：显示slab信息； <code>-n</code>：头信息仅显示一次； <code>-s</code>：以表格方式显示事件计数器和内存状态； <code>-d</code>：报告磁盘状态； <code>-p</code>：显示指定的硬盘分区状态； <code>-S</code>：输出信息的单位。</p><p>参数</p><ul><li>事件间隔：状态信息刷新的时间间隔；</li><li>次数：显示报告的次数</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141913473.png" alt="image-20220401141913473" tabindex="0" loading="lazy"><figcaption>image-20220401141913473</figcaption></figure><h4 id="_2-2-3-字段说明" tabindex="-1"><a class="header-anchor" href="#_2-2-3-字段说明" aria-hidden="true">#</a> 2.2.3 字段说明</h4><p>Procs（进程）</p><ul><li>r: 运行和等待CPU时间片的进程数，这个值如果长期大于系统CPU个数，就说明CPU资源不足，可以考虑增加CPU</li><li>b: 等待资源的进程数，比如正在等待I/O或者内存交换等</li></ul><p>Memory（内存）</p><ul><li>swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</li><li>free: 空闲物理内存大小（以KB为单位）。</li><li>buff: 用作缓冲的内存大小。</li><li>cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多。如果此时IO中的bi比较小，就说明文件系统效率比较好。</li></ul><p>Swap</p><ul><li>si: 每秒从交换区写到内存的大小，由磁盘调入内存。</li><li>so: 每秒写入交换区的内存大小，由内存调入磁盘。</li></ul><p>注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</p><p>IO（现在的Linux版本块的大小为1kb）</p><ul><li>bi: 每秒读取的块数</li><li>bo: 每秒写入的块数</li></ul><p>注意：随机磁盘读写的时候，这2个值较大（如超出1024k)，而且wa值比较大，则表示系统磁盘IO性能瓶颈。</p><p>system（系统）</p><ul><li>in: 每秒中断数，包括时钟中断。</li><li>cs: 每秒上下文切换数。</li></ul><p>注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</p><p>CPU（以百分比表示） us: 用户进程执行时间百分比(user time) us的值比较高时，说明用户进程消耗的CPU时间多，但是如果长期超50%的使用，那么我们就该考虑优化程序算法或者进行加速。</p><ul><li>sy: 内核系统进程执行时间百分比(system time)</li></ul><p>sy的值高时，说明系统内核消耗的CPU资源多，这并不是良性表现，我们应该检查原因。</p><ul><li>id: 空闲时间百分比</li><li>wa: IO等待时间百分比</li></ul><p>wa的值高时，说明IO等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</p><ul><li>st：一般不关注，虚拟机占用的时间百分比。</li></ul><h4 id="_2-2-4-实例" tabindex="-1"><a class="header-anchor" href="#_2-2-4-实例" aria-hidden="true">#</a> 2.2.4 实例</h4><p>每2s显示一次</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401141913473.png" alt="image-20220401141913473" tabindex="0" loading="lazy"><figcaption>image-20220401141913473</figcaption></figure><h2 id="_3-cpu-监控" tabindex="-1"><a class="header-anchor" href="#_3-cpu-监控" aria-hidden="true">#</a> 3. CPU 监控</h2><h3 id="_3-1-top" tabindex="-1"><a class="header-anchor" href="#_3-1-top" aria-hidden="true">#</a> 3.1 top</h3><h4 id="_3-1-1-简介" tabindex="-1"><a class="header-anchor" href="#_3-1-1-简介" aria-hidden="true">#</a> 3.1.1 简介</h4><p>top命令 可以实时动态地查看系统的整体运行情况。</p><h4 id="_3-1-2-语法" tabindex="-1"><a class="header-anchor" href="#_3-1-2-语法" aria-hidden="true">#</a> 3.1.2 语法：</h4><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code>top <span class="token punctuation">(</span>选项<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项： <code>-b</code>：以批处理模式操作； <code>-c</code>：显示完整的治命令； <code>-d</code>：屏幕刷新间隔时间； <code>-I</code>：忽略失效过程； <code>-s</code>：保密模式； <code>-S</code>：累积模式； <code>-i&lt;时间&gt;</code>：设置间隔时间； <code>-u&lt;用户名&gt;</code>：指定用户名； <code>-p&lt;进程号&gt;</code>：指定进程； <code>-n&lt;次数&gt;</code>：循环显示的次数</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401142646239.png" alt="image-20220401142646239" tabindex="0" loading="lazy"><figcaption>image-20220401142646239</figcaption></figure><h4 id="_3-1-3-字段说明" tabindex="-1"><a class="header-anchor" href="#_3-1-3-字段说明" aria-hidden="true">#</a> 3.1.3 字段说明</h4><ul><li><code>top</code>：系统当前时间</li><li><code>up xxx days</code>：系统运行时间</li><li><code>1 users</code>：当前登录用户个数</li><li><code>load average</code>：系统负载。即任务队列的平均长度。三个数值分别为最近1分钟、最近5分钟、最近15分钟的平均负载。——超过N（CPU核数）说明系统满负荷运行。</li><li>Tasks <ul><li><code>total</code>：总进程数</li><li><code>running</code>：正在运行的进程数</li><li><code>sleeping</code>：睡眠的进程数</li><li><code>stopped</code>：停止的进程数</li><li><code>zombie</code>：冻结的进程数</li></ul></li><li>%Cpu(s) <ul><li><code>us</code>：用户进程消耗的CPU百分比</li><li><code>sy</code>：内核进程消耗的CPU百分比</li><li><code>ni</code>：改变过优先级的进程占用CPU的百分比</li><li><code>id</code>：空闲CPU的百分比</li><li><code>wa</code>：IO等待消耗的CPU百分比</li></ul></li><li>Mem <ul><li><code>total</code>：物理内存总量</li><li><code>free</code>：空闲物理内存总量</li><li><code>used</code>：已用物理内存总量</li><li><code>buff</code>：用作内核缓存内存总量</li></ul></li><li>Swap <ul><li><code>total</code>：虚拟内存总量</li><li><code>free</code>：空闲虚拟内存总量</li><li><code>used</code>：已用虚拟内存总量</li></ul></li></ul><h4 id="_3-1-4-实例" tabindex="-1"><a class="header-anchor" href="#_3-1-4-实例" aria-hidden="true">#</a> 3.1.4 实例</h4><h4 id="_3-1-4-1-默认top" tabindex="-1"><a class="header-anchor" href="#_3-1-4-1-默认top" aria-hidden="true">#</a> 3.1.4.1 默认top</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401142646239.png" alt="image-20220401142646239" tabindex="0" loading="lazy"><figcaption>image-20220401142646239</figcaption></figure><h3 id="_3-2-mpstat" tabindex="-1"><a class="header-anchor" href="#_3-2-mpstat" aria-hidden="true">#</a> 3.2 mpstat</h3><h4 id="_3-2-1-简介" tabindex="-1"><a class="header-anchor" href="#_3-2-1-简介" aria-hidden="true">#</a> 3.2.1 简介</h4><p>mpstat命令 指令主要用于多CPU环境下，它显示各个可用CPU的状态系你想。</p><h4 id="_3-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-语法" aria-hidden="true">#</a> 3.2.2 语法：</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">mpstat</span> <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>-P：指定CPU编号。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数：</p><ul><li>间隔时间：每次报告的间隔时间（秒）；</li><li>次数：显示报告的次数。</li></ul><h4 id="_2-2-3-示例" tabindex="-1"><a class="header-anchor" href="#_2-2-3-示例" aria-hidden="true">#</a> 2.2.3 示例</h4><p>ALL表示显示所有CPUs，也可以指定某个CPU；2表示刷新间隔。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401143304219.png" alt="image-20220401143304219" tabindex="0" loading="lazy"><figcaption>image-20220401143304219</figcaption></figure><h2 id="_4-网络监控" tabindex="-1"><a class="header-anchor" href="#_4-网络监控" aria-hidden="true">#</a> 4. 网络监控</h2><h3 id="_4-1-netstat" tabindex="-1"><a class="header-anchor" href="#_4-1-netstat" aria-hidden="true">#</a> 4.1 netstat</h3><h4 id="_4-1-1-简介" tabindex="-1"><a class="header-anchor" href="#_4-1-1-简介" aria-hidden="true">#</a> 4.1.1 简介</h4><p>netstat命令一般用于检验本机各端口的网络连接情况，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据。</p><h4 id="_4-1-2-常用实例" tabindex="-1"><a class="header-anchor" href="#_4-1-2-常用实例" aria-hidden="true">#</a> 4.1.2 常用实例：</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">netstat</span> <span class="token parameter variable">-aup</span>      <span class="token comment"># 输出所有UDP连接状况</span>
<span class="token function">netstat</span> <span class="token parameter variable">-atp</span>      <span class="token comment"># 输出所有TCP连接状况</span>
<span class="token function">netstat</span> <span class="token parameter variable">-s</span>        <span class="token comment"># 显示各个协议的网络统计信息</span>
<span class="token function">netstat</span> <span class="token parameter variable">-i</span>        <span class="token comment"># 显示网卡列表</span>
<span class="token function">netstat</span> <span class="token parameter variable">-r</span>        <span class="token comment"># 显示路由表信息</span>
<span class="token function">netstat</span> <span class="token parameter variable">-l</span>        <span class="token comment"># 只显示监听端口</span>
<span class="token function">netstat</span> <span class="token parameter variable">-lt</span>       <span class="token comment"># 只列出所有监听 tcp 端口</span>
<span class="token function">netstat</span> <span class="token parameter variable">-lu</span>       <span class="token comment"># 只列出所有监听 udp 端口</span>
<span class="token function">netstat</span> <span class="token parameter variable">-lx</span>       <span class="token comment"># 只列出所有监听 UNIX 端口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-sar" tabindex="-1"><a class="header-anchor" href="#_4-2-sar" aria-hidden="true">#</a> 4.2 sar</h3><h4 id="_4-2-1-简介" tabindex="-1"><a class="header-anchor" href="#_4-2-1-简介" aria-hidden="true">#</a> 4.2.1 简介</h4><p>sar命令 是Linux下系统运行状态统计工具，它将指定的操作系统状态计数器显示到标准输出设备。</p><h4 id="_4-2-2-字段说明" tabindex="-1"><a class="header-anchor" href="#_4-2-2-字段说明" aria-hidden="true">#</a> 4.2.2 字段说明</h4><ul><li><code>IFACE</code>：网络设备的名称</li><li><code>rxpck/s</code>：每秒钟接收到的包数目</li><li><code>txpck/s</code>：每秒钟发送出去的包数目</li><li><code>rxkB/s</code>：每秒钟接收到的字节数</li><li><code>txkB/s</code>：每秒钟发送出去的字节数</li></ul><h4 id="_4-2-3-示例" tabindex="-1"><a class="header-anchor" href="#_4-2-3-示例" aria-hidden="true">#</a> 4.2.3 示例</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401145225177.png" alt="image-20220401145225177" tabindex="0" loading="lazy"><figcaption>image-20220401145225177</figcaption></figure><h2 id="_5-磁盘监控" tabindex="-1"><a class="header-anchor" href="#_5-磁盘监控" aria-hidden="true">#</a> 5. 磁盘监控</h2><h3 id="_5-1-df" tabindex="-1"><a class="header-anchor" href="#_5-1-df" aria-hidden="true">#</a> 5.1 df</h3><h4 id="_5-1-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-1-1-简介" aria-hidden="true">#</a> 5.1.1 简介</h4><p>df命令 用于显示磁盘分区上的可使用的磁盘空间。如果没有文件名被指定，则显示当前所有被挂载的文件系统，默认以 KB 为单位。</p><h4 id="_5-1-2-语法" tabindex="-1"><a class="header-anchor" href="#_5-1-2-语法" aria-hidden="true">#</a> 5.1.2 语法：</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">df</span> <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项： <code>-a</code> 全部文件系统列表 <code>-h</code> 以方便阅读的方式显示 <code>-i</code> 显示inode信息 <code>-T</code> 显示文件系统类型 <code>-l</code> 只显示本地文件系统 <code>-k</code> 以KB为单位 <code>-m</code> 以MB为单位</p><p>参数：</p><ul><li>文件：指定文件系统上的文件。</li></ul><h4 id="_5-1-3-示例" tabindex="-1"><a class="header-anchor" href="#_5-1-3-示例" aria-hidden="true">#</a> 5.1.3 示例</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401145602336.png" alt="image-20220401145602336" tabindex="0" loading="lazy"><figcaption>image-20220401145602336</figcaption></figure><h3 id="_5-2-iostat" tabindex="-1"><a class="header-anchor" href="#_5-2-iostat" aria-hidden="true">#</a> 5.2 iostat</h3><h4 id="_5-2-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-2-1-简介" aria-hidden="true">#</a> 5.2.1 简介</h4><p>iostat命令 被用于监视系统输入输出设备和CPU的使用情况。</p><h4 id="_5-2-2-语法" tabindex="-1"><a class="header-anchor" href="#_5-2-2-语法" aria-hidden="true">#</a> 5.2.2 语法：</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">iostat</span> <span class="token punctuation">(</span>选项<span class="token punctuation">)</span> <span class="token punctuation">(</span>参数<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项： <code>-c</code>：仅显示CPU使用情况； <code>-d</code>：仅显示设备利用率； <code>-k</code>：显示状态以千字节每秒为单位，而不使用块每秒； <code>-m</code>：显示状态以兆字节每秒为单位； <code>-p</code>：仅显示块设备和所有被使用的其他分区的状态； <code>-t</code>：显示每个报告产生时的时间； <code>-V</code>：显示版号并退出； <code>-x</code>：显示扩展状态。</p><p>参数：</p><ul><li>间隔时间：每次报告的间隔时间（秒）；</li><li>次数：显示报告的次数。</li></ul><h4 id="_5-2-3-字段说明" tabindex="-1"><a class="header-anchor" href="#_5-2-3-字段说明" aria-hidden="true">#</a> 5.2.3 字段说明：</h4><ul><li><code>r/s</code>: 每秒完成的读 I/O 设备次数。</li><li><code>w/s</code>: 每秒完成的写 I/O 设备次数。</li><li><code>rkB/s</code>: 每秒读K字节数.是 rsect/s 的一半,因为每扇区大小为512字节。</li><li><code>wkB/s</code>: 每秒写K字节数.是 wsect/s 的一半。</li><li><code>avgrq-sz</code>: 平均每次设备I/O操作的数据大小 (扇区)。</li><li><code>avgqu-sz</code>: 平均I/O队列长度。</li><li><code>await</code>: 平均每次设备I/O操作的等待时间 (毫秒)。</li><li><code>svctm</code>: 平均每次设备I/O操作的服务时间 (毫秒)。</li><li><code>%util</code>: 一秒中有百分之多少的时间用于 I/O 操作,或者说一秒中有多少时间 I/O 队列是非空的。</li></ul><h4 id="_5-2-4-示例" tabindex="-1"><a class="header-anchor" href="#_5-2-4-示例" aria-hidden="true">#</a> 5.2.4 示例</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401145950590.png" alt="image-20220401145950590" tabindex="0" loading="lazy"><figcaption>image-20220401145950590</figcaption></figure><h3 id="_5-3-iotop" tabindex="-1"><a class="header-anchor" href="#_5-3-iotop" aria-hidden="true">#</a> 5.3 . iotop</h3><blockquote><p>centos没有该命名</p></blockquote><h4 id="_5-3-1-简介" tabindex="-1"><a class="header-anchor" href="#_5-3-1-简介" aria-hidden="true">#</a> 5.3.1 简介</h4><p>iotop命令 是一个用来监视磁盘I/O使用状况的top类工具。</p><p>iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息。Linux下的IO统计工具如iostat，nmon等大多数是只能统计到per设备的读写情况，如果你想知道每个进程是如何使用IO的就比较麻烦，使用iotop命令可以很方便的查看。</p><h4 id="_5-3-2-语法" tabindex="-1"><a class="header-anchor" href="#_5-3-2-语法" aria-hidden="true">#</a> 5.3.2 语法：</h4><div class="language-erlang line-numbers-mode" data-ext="erlang"><pre class="language-erlang"><code><span class="token atom">iotop</span> <span class="token punctuation">(</span>选项<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>选项： <code>-o</code>：只显示有io操作的进程 <code>-b</code>：批量显示，无交互，主要用作记录到文件。 <code>-n</code>： NUM：显示NUM次，主要用于非交互式模式。 <code>-d SEC</code>：间隔SEC秒显示一次。 <code>-p PID</code>：监控的进程pid。 <code>-u USER</code>：监控的进程用户。</p><h4 id="_5-3-3-iotop常用快捷键" tabindex="-1"><a class="header-anchor" href="#_5-3-3-iotop常用快捷键" aria-hidden="true">#</a> 5.3.3 iotop常用快捷键：</h4><ul><li>左右箭头：改变排序方式，默认是按IO排序。</li><li>r：改变排序顺序。</li><li>o：只显示有IO输出的进程。</li><li>p：进程/线程的显示方式的切换。</li><li>a：显示累积使用量。</li><li>q：退出。</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220401150415728.png" alt="image-20220401150415728" tabindex="0" loading="lazy"><figcaption>image-20220401150415728</figcaption></figure><h2 id="_6-进程" tabindex="-1"><a class="header-anchor" href="#_6-进程" aria-hidden="true">#</a> 6. 进程</h2><h3 id="_6-1-ps" tabindex="-1"><a class="header-anchor" href="#_6-1-ps" aria-hidden="true">#</a> 6.1 ps</h3><p>ps（Process Status，进程状态）命令 用于报告当前系统的进程状态。</p><p>ps 的用法非常多，这里仅列举一些常用的：</p><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code><span class="token function">ps</span> <span class="token operator">-</span>aux <span class="token punctuation">|</span> grep &lt;name&gt;      <span class="token comment"># 查看name 进程详细信息</span>
<span class="token function">ps</span> <span class="token operator">-</span>p &lt;pid&gt; <span class="token operator">-</span>L             <span class="token comment"># 显示进程&lt;pid&gt; 的所有线程</span>
<span class="token function">ps</span> <span class="token operator">-</span>o lstart &lt;pid&gt;         <span class="token comment"># 显示进程的启动时间</span>
<span class="token function">ps</span> <span class="token operator">-</span>f <span class="token operator">--</span>forest <span class="token operator">-</span>C &lt;name&gt;   <span class="token comment"># 用树的风格显示进程的层次关系</span>
<span class="token function">ps</span> <span class="token operator">-</span>e <span class="token operator">-</span>o pid<span class="token punctuation">,</span>uname<span class="token punctuation">,</span>pcpu<span class="token punctuation">,</span>pmem<span class="token punctuation">,</span>comm<span class="token punctuation">,</span>etime  <span class="token comment"># 定制显示的列</span>
<span class="token function">ps</span> <span class="token operator">-</span>o lstart &lt;pid&gt;         <span class="token comment"># 显示进程的启动时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-系统监控全能工具" tabindex="-1"><a class="header-anchor" href="#_7-系统监控全能工具" aria-hidden="true">#</a> 7. 系统监控全能工具</h2><h3 id="_7-1-glances" tabindex="-1"><a class="header-anchor" href="#_7-1-glances" aria-hidden="true">#</a> 7.1 glances</h3><p>glances 是一个用来监视 GNU/Linux 和 FreeBSD 操作系统的 GPL 授权的全能工具。</p><p>Glances 会用一下几种颜色来代表状态：</p><ul><li>绿色：OK（一切正常）</li><li>蓝色：CAREFUL（需要注意）</li><li>紫色：WARNING（警告）</li><li>红色：CRITICAL（严重）。</li></ul><p>阀值可以在配置文件中设置，一般阀值被默认设置为（careful=50、warning=70、critical=90）</p><h3 id="_7-2-dstat" tabindex="-1"><a class="header-anchor" href="#_7-2-dstat" aria-hidden="true">#</a> 7.2 dstat</h3><p>dstat命令 是一个用来替换vmstat、iostat、netstat、nfsstat和ifstat这些命令的工具。</p><p>直接使用dstat，默认使用的是-cdngy参数，分别显示cpu、disk、net、page、system信息，默认是1s显示一条信息。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,150),p={href:"https://segmentfault.com/a/1190000038231309",target:"_blank",rel:"noopener noreferrer"};function h(u,g){const e=c("ExternalLinkIcon");return n(),s("div",null,[r,a("p",null,[a("a",p,[i("Linux 系统监控命令整理汇总"),d(e)])])])}const b=t(o,[["render",h],["__file","linux-j-monitor-overview.html.vue"]]);export{b as default};
