import{_ as p,W as o,X as c,Y as n,Z as s,$ as e,a0 as t,D as i}from"./framework-f64bc974.js";const l={},u=t(`<h1 id="后台管理-用户认证satoken" tabindex="-1"><a class="header-anchor" href="#后台管理-用户认证satoken" aria-hidden="true">#</a> 后台管理 - 用户认证SaToken</h1><h2 id="_1-具体实现" tabindex="-1"><a class="header-anchor" href="#_1-具体实现" aria-hidden="true">#</a> 1. 具体实现</h2><h3 id="_1-1-用户登录" tabindex="-1"><a class="header-anchor" href="#_1-1-用户登录" aria-hidden="true">#</a> 1.1 用户登录</h3><p>项目采用前后端分离架构（无 Cookie 模式）</p><blockquote><p>所谓 Cookie ，本质上就是一个特殊的<code>header</code>参数而已， 而既然它只是一个 header 参数，我们就能手动模拟实现它，从而完成鉴权操作。</p></blockquote><ul><li><p>后端将 token 返回到前端</p><ol><li><p>首先调用 <code>StpUtil.login(id)</code> 进行登录。</p></li><li><p>调用 <code>StpUtil.getTokenInfo()</code> 返回当前会话的 token 详细参数。</p></li></ol></li><li><p>前端将 token 提交到后端</p><ol><li>将 token 塞到请求<code>header</code>里 ，格式为：<code>{tokenName: tokenValue}</code>。</li></ol></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 登录
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginUser</span> userInfo <span class="token operator">=</span> remoteUserService<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token class-name">LoginType</span><span class="token punctuation">.</span><span class="token constant">PASSWORD</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token operator">!</span><span class="token class-name">BCrypt</span><span class="token punctuation">.</span><span class="token function">checkpw</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取登录token</span>
        <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">loginByDevice</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">,</span> <span class="token class-name">DeviceType</span><span class="token punctuation">.</span><span class="token constant">PC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">recordLogininfor</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">LOGIN_SUCCESS</span><span class="token punctuation">,</span> <span class="token class-name">MessageUtils</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">&quot;user.login.success&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getTokenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>SaHolder：Sa-Token上下文持有类，通过此类快速获取当前环境的相关对象</p><ul><li>SaHolder.getStorage(); // 获取当前请求的 [Storage] 对象</li></ul></li><li><p>StpUtil.login()</p></li><li><p>检查此账号是否之前已有登录</p></li><li><p>为账号生成 <code>Token</code> 凭证与 <code>Session</code> 会话</p></li><li><p>通知全局侦听器，xx 账号登录成功</p></li><li><p>将 <code>Token</code> 注入到请求上下文</p></li><li><p>注：<strong>保存数据到SaTokenDao()</strong>，可以自己将数据改到redis 中保存</p></li><li><p>等等其它工作……</p></li><li><p>存到本地ConcurrentHashMap： StpUtil.getTokenSession().set(LOGIN_USER_KEY, loginUser)</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token doc-comment comment">/**
     * 登录系统 基于 设备类型
     * 针对相同用户体系不同设备
     *
     * <span class="token keyword">@param</span> <span class="token parameter">loginUser</span> 登录用户信息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loginByDevice</span><span class="token punctuation">(</span><span class="token class-name">LoginUser</span> loginUser<span class="token punctuation">,</span> <span class="token class-name">DeviceType</span> deviceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SaHolder</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">LOGIN_USER_KEY</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getLoginId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deviceType<span class="token punctuation">.</span><span class="token function">getDevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setLoginUser</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 设置用户数据(多级缓存)
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setLoginUser</span><span class="token punctuation">(</span><span class="token class-name">LoginUser</span> loginUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getTokenSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">LOGIN_USER_KEY</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-权限认证" tabindex="-1"><a class="header-anchor" href="#_1-2-权限认证" aria-hidden="true">#</a> 1.2 权限认证</h3><p>权限认证问题的核心就是：</p><ol><li>如何获取一个账号所拥有的的权限码集合？</li><li>本次操作需要验证的权限码是哪个？</li></ol><blockquote><p>因为每个项目的需求不同，其权限设计也千变万化，因此 [ 获取当前账号权限码集合 ] 这一操作不可能内置到框架中， 所以 Sa-Token 将此操作以接口的方式暴露给你，以方便你根据自己的业务逻辑进行重写。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * sa-token 权限管理实现类
 *
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaPermissionImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StpInterface</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 获取菜单权限列表
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPermissionList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> loginId<span class="token punctuation">,</span> <span class="token class-name">String</span> loginType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserType</span> userType <span class="token operator">=</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">SYS_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getMenuPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">APP_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 其他端 自行根据业务编写</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取角色权限列表
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> loginId<span class="token punctuation">,</span> <span class="token class-name">String</span> loginType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserType</span> userType <span class="token operator">=</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">SYS_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getRolePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">APP_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 其他端 自行根据业务编写</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-微服务-网关统一鉴权" tabindex="-1"><a class="header-anchor" href="#_1-3-微服务-网关统一鉴权" aria-hidden="true">#</a> 1.3 微服务 - 网关统一鉴权</h3><ol><li><p>引入redis</p></li><li><p>实现鉴权接口</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * sa-token 权限管理实现类
 *
 * <span class="token keyword">@author</span> Lion Li
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaPermissionImpl</span> <span class="token keyword">implements</span> <span class="token class-name">StpInterface</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 获取菜单权限列表
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPermissionList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> loginId<span class="token punctuation">,</span> <span class="token class-name">String</span> loginType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserType</span> userType <span class="token operator">=</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">SYS_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getMenuPermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">APP_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 其他端 自行根据业务编写</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获取角色权限列表
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getRoleList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> loginId<span class="token punctuation">,</span> <span class="token class-name">String</span> loginType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">LoginHelper</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">UserType</span> userType <span class="token operator">=</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">SYS_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getRolePermission</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userType <span class="token operator">==</span> <span class="token class-name">UserType</span><span class="token punctuation">.</span><span class="token constant">APP_USER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 其他端 自行根据业务编写</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取用户(多级缓存)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LoginUser</span> <span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> <span class="token class-name">SaHolder</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">LOGIN_USER_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> loginUser<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">getTokenSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token constant">LOGIN_USER_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SaHolder</span><span class="token punctuation">.</span><span class="token function">getStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">LOGIN_USER_KEY</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> loginUser<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.注册全局过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * [Sa-Token 权限认证] 拦截器
 *
 * <span class="token keyword">@author</span> Lion Li
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthFilter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 注册 Sa-Token 全局过滤器
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SaReactorFilter</span> <span class="token function">getSaReactorFilter</span><span class="token punctuation">(</span><span class="token class-name">IgnoreWhiteProperties</span> ignoreWhite<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SaReactorFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 拦截地址</span>
            <span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setExcludeList</span><span class="token punctuation">(</span>ignoreWhite<span class="token punctuation">.</span><span class="token function">getWhites</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">addExclude</span><span class="token punctuation">(</span><span class="token string">&quot;/favicon.ico&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/actuator/**&quot;</span><span class="token punctuation">)</span>
            <span class="token comment">// 鉴权方法：每次访问进入</span>
            <span class="token punctuation">.</span><span class="token function">setAuth</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// 登录校验 -- 拦截所有路由</span>
                <span class="token class-name">SaRouter</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>r <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 检查是否登录 是否有token</span>
                        <span class="token class-name">StpUtil</span><span class="token punctuation">.</span><span class="token function">checkLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment">// 有效率影响 用于临时测试</span>
                        <span class="token comment">// if (log.isDebugEnabled()) {</span>
                        <span class="token comment">//     log.debug(&quot;剩余有效时间: {}&quot;, StpUtil.getTokenTimeout());</span>
                        <span class="token comment">//     log.debug(&quot;临时有效时间: {}&quot;, StpUtil.getTokenActivityTimeout());</span>
                        <span class="token comment">// }</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token class-name">SaResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;认证失败，无法访问系统资源&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-微服务-内部服务外网隔离-网关转发鉴权" tabindex="-1"><a class="header-anchor" href="#_1-4-微服务-内部服务外网隔离-网关转发鉴权" aria-hidden="true">#</a> 1.4 微服务 - 内部服务外网隔离（网关转发鉴权)</h3><h4 id="_1-4-1-需求场景" tabindex="-1"><a class="header-anchor" href="#_1-4-1-需求场景" aria-hidden="true">#</a> 1.4.1 需求场景</h4><p>我们的子服务一般不能通过外网直接访问，必须通过网关转发才是一个合法的请求，这种子服务与外网的隔离一般分为两种：</p><ol><li>物理隔离：子服务部署在指定的内网环境中，只有网关对外网开放</li><li>逻辑隔离：子服务与网关同时暴露在外网，但是子服务会有一个权限拦截层保证只接受网关发送来的请求，绕过网关直接访问子服务会被提示：无效请求</li></ol><p>这种鉴权需求牵扯到两个环节：<strong><code>网关转发鉴权</code></strong>、<strong><code>服务内部调用鉴权</code></strong></p><p>Sa-Token提供两种解决方案：</p><ol><li>使用 OAuth2.0 模式的凭证式，将 Client-Token 用作各个服务的身份凭证进行权限校验</li><li>使用 Same-Token 模块提供的身份校验能力，完成服务间的权限认证</li></ol><h4 id="_1-4-2-具体实现" tabindex="-1"><a class="header-anchor" href="#_1-4-2-具体实现" aria-hidden="true">#</a> 1.4.2 具体实现</h4><ol><li><p>引入依赖</p></li><li><h5 id="网关处添加same-token" tabindex="-1"><a class="header-anchor" href="#网关处添加same-token" aria-hidden="true">#</a> 网关处添加Same-Token</h5><p>为网关添加全局过滤器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 全局过滤器，为请求添加 Same-Token 
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForwardAuthFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServerHttpRequest</span> newRequest <span class="token operator">=</span> exchange
                <span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 为请求追加 Same-Token 参数 </span>
                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token class-name">SaSameUtil</span><span class="token punctuation">.</span><span class="token constant">SAME_TOKEN</span><span class="token punctuation">,</span> <span class="token class-name">SaSameUtil</span><span class="token punctuation">.</span><span class="token function">getToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServerWebExchange</span> newExchange <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>newRequest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>newExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此过滤器会为 Request 请求头追加 <code>Same-Token</code> 参数，这个参数会被转发到子服务</p></li><li><p>在子服务里校验参数</p></li></ol><p>在子服务添加过滤器校验参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Sa-Token 权限认证 配置类 
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaTokenConfigure</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注册 Sa-Token 全局过滤器 </span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SaServletFilter</span> <span class="token function">getSaServletFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SaServletFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addExclude</span><span class="token punctuation">(</span><span class="token string">&quot;/favicon.ico&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setAuth</span><span class="token punctuation">(</span>obj <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 校验 Same-Token 身份凭证     —— 以下两句代码可简化为：SaSameUtil.checkCurrentRequestToken(); </span>
                    <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token class-name">SaHolder</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">SaSameUtil</span><span class="token punctuation">.</span><span class="token constant">SAME_TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">SaSameUtil</span><span class="token punctuation">.</span><span class="token function">checkToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>e <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token class-name">SaResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Same-Token 模块详解</li></ol><p>Same-Token —— 专门解决同源系统互相调用时的身份认证校验，它的作用不仅局限于微服务调用场景</p><p>基本使用流程为：服务调用方获取Token，提交到请求中，被调用方取出Token进行校验：Token一致则校验通过，否则拒绝服务</p><h3 id="_1-5-单点登录模块" tabindex="-1"><a class="header-anchor" href="#_1-5-单点登录模块" aria-hidden="true">#</a> 1.5 单点登录模块</h3><p>凡是稍微上点规模的系统，统一认证中心都是绕不过去的槛。而单点登录——便是我们搭建统一认证中心的关键。</p><h4 id="_1-5-1-什么是单点登录" tabindex="-1"><a class="header-anchor" href="#_1-5-1-什么是单点登录" aria-hidden="true">#</a> 1.5.1 什么是单点登录</h4><p><strong><code>在多个互相信任的系统中，用户只需登录一次，就可以访问所有系统。</code></strong></p><h4 id="_1-5-2-架构选型" tabindex="-1"><a class="header-anchor" href="#_1-5-2-架构选型" aria-hidden="true">#</a> 1.5.2 架构选型</h4><p>Sa-Token-SSO 由简入难划分为三种模式，解决不同架构下的 SSO 接入问题：</p>`,40),k=n("thead",null,[n("tr",null,[n("th",null,"系统架构"),n("th",null,"采用模式"),n("th",null,"简介"),n("th",null,"文档链接")])],-1),r=n("td",null,"前端同域 + 后端同 Redis",-1),d=n("td",null,"模式一",-1),m=n("td",null,"共享 Cookie 同步会话",-1),v={href:"https://sa-token.dev33.cn/doc.html#/sso/sso-type1",target:"_blank",rel:"noopener noreferrer"},b={href:"https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso1-client",target:"_blank",rel:"noopener noreferrer"},g=n("td",null,"前端不同域 + 后端同 Redis",-1),h=n("td",null,"模式二",-1),f=n("td",null,"URL重定向传播会话",-1),y={href:"https://sa-token.dev33.cn/doc.html#/sso/sso-type2",target:"_blank",rel:"noopener noreferrer"},S={href:"https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso2-client",target:"_blank",rel:"noopener noreferrer"},U=n("td",null,"前端不同域 + 后端不同 Redis",-1),_=n("td",null,"模式三",-1),w=n("td",null,"Http请求获取会话",-1),T={href:"https://sa-token.dev33.cn/doc.html#/sso/sso-type3",target:"_blank",rel:"noopener noreferrer"},x={href:"https://gitee.com/dromara/sa-token/blob/master/sa-token-demo/sa-token-demo-sso3-client",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,[s("前端同域：就是指多个系统可以部署在同一个主域名之下，比如："),n("code",null,"c1.domain.com"),s("、"),n("code",null,"c2.domain.com"),s("、"),n("code",null,"c3.domain.com"),s("。")],-1),R=n("strong",null,[n("code",null,"[权限缓存与业务缓存分离]")],-1),I={href:"https://sa-token.dev33.cn/doc.html#/plugin/alone-redis",target:"_blank",rel:"noopener noreferrer"},O=n("li",null,"如果既无法做到前端同域，也无法做到后端同Redis，那么只能走模式三，Http请求获取会话（Sa-Token对SSO提供了完整的封装，你只需要按照示例从文档上复制几段代码便可以轻松集成）。",-1),j=t(`<h4 id="_1-5-3-sso模式二-url重定向传播会话" tabindex="-1"><a class="header-anchor" href="#_1-5-3-sso模式二-url重定向传播会话" aria-hidden="true">#</a> 1.5.3 SSO模式二 URL重定向传播会话</h4><p>如果我们的多个系统：部署在不同的域名之下，但是后端可以连接同一个Redis，那么便可以使用 <strong><code>[URL重定向传播会话]</code></strong> 的方式做到单点登录。</p><h5 id="_1-5-3-1、解题思路" tabindex="-1"><a class="header-anchor" href="#_1-5-3-1、解题思路" aria-hidden="true">#</a> 1.5.3.1、解题思路</h5><p>首先我们再次复习一下，多个系统之间为什么无法同步登录状态？</p><ol><li>前端的<code>Token</code>无法在多个系统下共享。</li><li>后端的<code>Session</code>无法在多个系统间共享。</li></ol><h5 id="_1-5-3-2-具体流程" tabindex="-1"><a class="header-anchor" href="#_1-5-3-2-具体流程" aria-hidden="true">#</a> 1.5.3.2 具体流程</h5><ol><li><p>用户在 子系统 点击 <code>[登录]</code> 按钮。</p></li><li><p>用户跳转到子系统登录接口 /sso/login，并携带back参数记录初始页面URL。</p><ul><li>形如：<code>http://{sso-client}/sso/login?back=xxx</code></li></ul></li><li><p>子系统检测到此用户尚未登录，再次将其重定向至SSO认证中心，并携带<code>redirect参数</code>记录子系统的登录页URL。</p><ul><li>形如：<code>http://{sso-server}/sso/auth?redirect=xxx?back=xxx</code></li></ul></li><li><p>用户进入了 SSO认证中心 的登录页面，开始登录。</p></li><li><p>用户 输入账号密码 并 登录成功，SSO认证中心再次将用户重定向至子系统的登录接口/sso/login，并携带ticket码参数。</p><ul><li>形如：<code>http://{sso-client}/sso/login?back=xxx&amp;ticket=xxxxxxxxx</code></li></ul></li><li><p>子系统根据 <code>ticket码</code> 从 <code>SSO-Redis</code> 中获取账号id，并在子系统登录此账号会话。</p></li><li><p>子系统将用户再次重定向至最初始的 <code>back</code> 页面。</p></li></ol><p>整个过程，除了第四步用户在SSO认证中心登录时会被打断，其余过程均是自动化的，当用户在另一个子系统再次点击<code>[登录]</code>按钮，由于此用户在SSO认证中心已有会话存在， 所以第四步也将自动化，也就是单点登录的最终目的 —— 一次登录，处处通行。</p><h2 id="_2-redis-存储的数据" tabindex="-1"><a class="header-anchor" href="#_2-redis-存储的数据" aria-hidden="true">#</a> 2. redis 存储的数据</h2><h3 id="_2-1-根据token-取用户id" tabindex="-1"><a class="header-anchor" href="#_2-1-根据token-取用户id" aria-hidden="true">#</a> 2.1 根据token 取用户id</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization:login:token:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpblR5cGUiOiJsb2dpbiIsImxvZ2luSWQiOiJzeXNfdXNlcjoxIiwicm5TdHIiOiJxb3h4Q2o0UTdIdU1oZUc4SnY3WFA5dlJ2TFZmUDUwUSJ9.Zo9sjXHd5cnntaMuyGsiqr2CTJWa4kH1tGwXAriKJ5U
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221123192547984.png" alt="image-20221123192547984" tabindex="0" loading="lazy"><figcaption>image-20221123192547984</figcaption></figure><h3 id="_2-2-根据token-取用户信息" tabindex="-1"><a class="header-anchor" href="#_2-2-根据token-取用户信息" aria-hidden="true">#</a> 2.2 根据token 取用户信息</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization:login:token-session:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpblR5cGUiOiJsb2dpbiIsImxvZ2luSWQiOiJzeXNfdXNlcjoxIiwicm5TdHIiOiJxb3h4Q2o0UTdIdU1oZUc4SnY3WFA5dlJ2TFZmUDUwUSJ9.Zo9sjXHd5cnntaMuyGsiqr2CTJWa4kH1tGwXAriKJ5U
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221123192803530.png" alt="image-20221123192803530" tabindex="0" loading="lazy"><figcaption>image-20221123192803530</figcaption></figure><h3 id="_2-3-根据用户id、取token信息" tabindex="-1"><a class="header-anchor" href="#_2-3-根据用户id、取token信息" aria-hidden="true">#</a> 2.3 根据用户id、取token信息</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization:login:session:sys_user:1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221123192908298.png" alt="image-20221123192908298" tabindex="0" loading="lazy"><figcaption>image-20221123192908298</figcaption></figure><h3 id="_2-4-最后登陆时间-last-activity" tabindex="-1"><a class="header-anchor" href="#_2-4-最后登陆时间-last-activity" aria-hidden="true">#</a> 2.4 最后登陆时间 last-activity</h3><p>且设置了过期时间、决定token 什么时候过期</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Authorization:login:last-activity:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJsb2dpblR5cGUiOiJsb2dpbiIsImxvZ2luSWQiOiJzeXNfdXNlcjoxIiwicm5TdHIiOiJxb3h4Q2o0UTdIdU1oZUc4SnY3WFA5dlJ2TFZmUDUwUSJ9.Zo9sjXHd5cnntaMuyGsiqr2CTJWa4kH1tGwXAriKJ5U
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221123192921116.png" alt="image-20221123192921116" tabindex="0" loading="lazy"><figcaption>image-20221123192921116</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,23),E={href:"https://sa-token.dev33.cn/doc.html#/use/login-auth",target:"_blank",rel:"noopener noreferrer"},J={href:"https://blog.csdn.net/weixin_39570751/article/details/121291274",target:"_blank",rel:"noopener noreferrer"};function A(q,z){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("table",null,[k,n("tbody",null,[n("tr",null,[r,d,m,n("td",null,[n("a",v,[s("文档"),e(a)]),s("、"),n("a",b,[s("示例"),e(a)])])]),n("tr",null,[g,h,f,n("td",null,[n("a",y,[s("文档"),e(a)]),s("、"),n("a",S,[s("示例"),e(a)])])]),n("tr",null,[U,_,w,n("td",null,[n("a",T,[s("文档"),e(a)]),s("、"),n("a",x,[s("示例"),e(a)])])])])]),n("ol",null,[L,n("li",null,[s("后端同Redis：就是指多个系统可以连接同一个Redis。PS：这里并不需要把所有项目的数据都放在同一个Redis中，Sa-Token提供了 "),R,s(" 的解决方案，详情戳： "),n("a",I,[s("Alone独立Redis插件"),e(a)]),s("。")]),O]),j,n("p",null,[n("a",E,[s("sa-token官网"),e(a)])]),n("p",null,[n("a",J,[s("sa-token使用（源码解析 + 万字）"),e(a)])])])}const C=p(l,[["render",A],["__file","manage-system-auth.html.vue"]]);export{C as default};
