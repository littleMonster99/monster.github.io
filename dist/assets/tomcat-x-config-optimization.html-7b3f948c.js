import{_ as n,W as t,X as e,Y as a,Z as o,$ as p,a0 as r,D as i}from"./framework-f64bc974.js";const l={},c=r(`<h1 id="tomcat优化一-优化自身的配置" tabindex="-1"><a class="header-anchor" href="#tomcat优化一-优化自身的配置" aria-hidden="true">#</a> Tomcat优化一：优化自身的配置</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Tomcat服务器在JavaEE项目中使用率非常高，所以在生产环境对Tomcat的优化也变得非常重要了。</p><p>对于Tomcat的优化，主要是从2个方面入手，一是<strong>Tomcat自身的配置</strong>，另一个是<strong>Tomcat所运行的jvm虚拟机的调优</strong>。</p><h2 id="_2-前置配置-登录系统-配置tomcat用户" tabindex="-1"><a class="header-anchor" href="#_2-前置配置-登录系统-配置tomcat用户" aria-hidden="true">#</a> 2. 前置配置：登录系统，配置tomcat用户</h2><p>如果不配置tomcat用户，那么查看tomcat状态时，将会出现403错误</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728220240999.png" alt="image-20210728220240999" tabindex="0" loading="lazy"><figcaption>image-20210728220240999</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728220259132.png" alt="image-20210728220259132" tabindex="0" loading="lazy"><figcaption>image-20210728220259132</figcaption></figure><p>如果需要登录系统，必须配置tomcat用户，在安装完Tomcat后，进行如下操作</p><p>在<code>/conf/tomcat-users.xml</code>文件中的<code>&lt;tomcat-users&gt;</code>标签里面添加如下内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>-- 修改配置文件，配置tomcat的管理用户 --<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>role <span class="token assign-left variable">rolename</span><span class="token operator">=</span><span class="token string">&quot;manager&quot;</span>/<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>role <span class="token assign-left variable">rolename</span><span class="token operator">=</span><span class="token string">&quot;manager-gui&quot;</span>/<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>role <span class="token assign-left variable">rolename</span><span class="token operator">=</span><span class="token string">&quot;admin&quot;</span>/<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>role <span class="token assign-left variable">rolename</span><span class="token operator">=</span><span class="token string">&quot;admin-gui&quot;</span>/<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>user <span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">&quot;tomcat&quot;</span> <span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">&quot;tomcat&quot;</span> <span class="token assign-left variable">roles</span><span class="token operator">=</span><span class="token string">&quot;admin-gui,admin,manager-gui,manager&quot;</span>/<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是tomcat7，配置了tomcat用户就可以登录系统了，但是tomcat8中不行，还需要修改另一个配置文件，否则访问不了，提示403，打开<code>webapps/manager/META-INF/context.xml</code>文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>-- 将Valve标签的内容注释掉，保存退出即可 --<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span>?<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>Context <span class="token assign-left variable">antiResourceLocking</span><span class="token operator">=</span><span class="token string">&quot;false&quot;</span> <span class="token assign-left variable">privileged</span><span class="token operator">=</span><span class="token string">&quot;true&quot;</span> <span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span>--<span class="token operator">&lt;</span>Valve <span class="token assign-left variable">className</span><span class="token operator">=</span><span class="token string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span>
         <span class="token assign-left variable">allow</span><span class="token operator">=</span><span class="token string">&quot;127\\.\\d+\\.\\d+\\.\\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /<span class="token operator">&gt;</span>--<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Manager <span class="token assign-left variable">sessionAttributeValueClassNameFilter</span><span class="token operator">=</span><span class="token string">&quot;java\\.lang\\.(?:Boolean|Integer|Long|Number|String)|org\\.apache\\.catalina\\.filters\\.CsrfPreventionFilter\\<span class="token variable">$LruCache</span>(?:\\<span class="token variable">$1</span>)?|java\\.util\\.(?:Linked)?HashMap&quot;</span>/<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>/Context<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次点击的时候，就需要输入账户密码了：tomcat/tomcat</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728220849612.png" alt="image-20210728220849612" tabindex="0" loading="lazy"><figcaption>image-20210728220849612</figcaption></figure><p>登录之后可以看到服务器状态等信息，主要包括服务器信息，JVM，ajp和http信息</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728220924142.png" alt="image-20210728220924142" tabindex="0" loading="lazy"><figcaption>image-20210728220924142</figcaption></figure><h2 id="_3-优化1-ajp连接" tabindex="-1"><a class="header-anchor" href="#_3-优化1-ajp连接" aria-hidden="true">#</a> 3. 优化1：AJP连接</h2><blockquote><p>新版tomcat8，已自动禁止</p></blockquote><p>在服务状态页面中可以看到，默认状态下会启用AJP服务，并且占用8009端口。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728221223607.png" alt="image-20210728221223607" tabindex="0" loading="lazy"><figcaption>image-20210728221223607</figcaption></figure><h3 id="_3-1-什么是ajp" tabindex="-1"><a class="header-anchor" href="#_3-1-什么是ajp" aria-hidden="true">#</a> 3.1 什么是AJP</h3><p>AJP（Apache JServer Protocol） AJPv13协议是面向包的。WEB服务器和Servlet容器通过TCP连接来交互；为了节省SOCKET创建的昂贵代价，WEB服务器会尝试维护一个永久TCP连接到servlet容器，并且在多个请求和响应周期过程会重用连接。 <img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728221317207.png" alt="image-20210728221317207" loading="lazy"></p><p>我们一般是使用Nginx+Tomcat的架构，所以用不着AJP协议，把AJP连接器禁用。</p><p>修改conf下的server.xml文件，将AJP服务禁用掉即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>-- 禁用AJP连接 --<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">&quot;8009&quot;</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">&quot;AJP/1.3&quot;</span> <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">&quot;8443&quot;</span> /<span class="token operator">&gt;</span> --<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>重启tomcat，查看效果。可以看到AJP服务已经不存在了。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728221415136.png" alt="image-20210728221415136" tabindex="0" loading="lazy"><figcaption>image-20210728221415136</figcaption></figure><h2 id="_4-优化2-执行器-线程池" tabindex="-1"><a class="header-anchor" href="#_4-优化2-执行器-线程池" aria-hidden="true">#</a> 4. 优化2：执行器（线程池）</h2><p>在tomcat中每一个用户请求都是一个线程，所以可以使用线程池提高性能。</p><p>修改server.xml文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span><span class="token operator">!</span>--将注释打开--<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Executor <span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;tomcatThreadPool&quot;</span> <span class="token assign-left variable">namePrefix</span><span class="token operator">=</span><span class="token string">&quot;catalina-exec-&quot;</span>
        <span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">&quot;500&quot;</span> <span class="token assign-left variable">minSpareThreads</span><span class="token operator">=</span><span class="token string">&quot;50&quot;</span> <span class="token assign-left variable">prestartminSpareThreads</span><span class="token operator">=</span><span class="token string">&quot;true&quot;</span> <span class="token assign-left variable">maxQueueSize</span><span class="token operator">=</span><span class="token string">&quot;100&quot;</span>/<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span>--
参数说明：
maxThreads：最大并发数，默认设置 <span class="token number">200</span>，一般建议在 <span class="token number">500</span> ~ <span class="token number">1000</span>，根据硬件设施和业务来判断
minSpareThreads：Tomcat 初始化时创建的线程数，默认设置 <span class="token number">25</span>
prestartminSpareThreads： 在 Tomcat 初始化的时候就初始化 minSpareThreads 的参数值，如果不等于 true，minSpareThreads 的值就没啥效果了
maxQueueSize，最大的等待队列数，超过则拒绝请求
--<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span>--在Connector中设置executor属性指向上面的执行器--<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Connector <span class="token assign-left variable">executor</span><span class="token operator">=</span><span class="token string">&quot;tomcatThreadPool&quot;</span> <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">&quot;8080&quot;</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">&quot;HTTP/1.1&quot;</span>
               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">&quot;20000&quot;</span>
               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">&quot;8443&quot;</span> /<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>保存退出，重启tomcat，查看效果。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728222804439.png" alt="image-20210728222804439" tabindex="0" loading="lazy"><figcaption>image-20210728222804439</figcaption></figure><p>在页面中显示最大线程数为-1，这个是正常的，仅仅是显示的问题，实际使用的是指定的值。如果配置了一个Executor，则该属性的任何值将被正确记录，但是它将被显示为-1</p><h2 id="_5-优化3-3种运行模式" tabindex="-1"><a class="header-anchor" href="#_5-优化3-3种运行模式" aria-hidden="true">#</a> 5. 优化3：3种运行模式</h2><p>tomcat的运行模式有3种：</p><ul><li><p>bio 性能非常低下，没有经过任何优化处理和支持</p></li><li><p>nio nio(new I/O)，是Java SE 1.4及后续版本提供的一种新的I/O操作方式(即java.nio包及其子包)。Java nio是一个基于缓冲区、并能提供非阻塞I/O操作的Java API，因此nio也被看成是non-blocking I/O的缩写。它拥有比传统I/O操作(bio)更好的并发运行性能。Tomcat8默认使用nio运行模式。</p></li><li><p>apr 安装起来最困难，但是从操作系统级别来解决异步的IO问题，大幅度的提高性能</p></li></ul><p>对于每种协议，Tomcat都提供了对应的I/O方式的实现，而且Tomcat官方还提供了在每种协议下每种I/O实现方案的差异， HTTP协议下的处理方式如下表，详情可查看Tomcat官网说明</p><table><thead><tr><th></th><th>BIO</th><th>NIO</th><th>NIO2</th><th>APR</th></tr></thead><tbody><tr><td>类名</td><td><code>Http11Protocol</code></td><td><code>Http11NioProtocol</code></td><td><code>Http11Nio2Protocol</code></td><td><code>Http11AprProtocol</code></td></tr><tr><td>引用版本</td><td>≥3.0</td><td>≥6.0</td><td>≥8.0</td><td>≥5.5</td></tr><tr><td>轮询支持</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>轮询队列大小</td><td>N/A</td><td><code>maxConnections</code></td><td><code>maxConnections</code></td><td><code>maxConnections</code></td></tr><tr><td>读请求头</td><td>阻塞</td><td>非阻塞</td><td>非阻塞</td><td>阻塞</td></tr><tr><td>读请求体</td><td>阻塞</td><td>阻塞</td><td>阻塞</td><td>阻塞</td></tr><tr><td>写响应</td><td>阻塞</td><td>阻塞</td><td>阻塞</td><td></td></tr><tr><td>等待新请求</td><td>阻塞</td><td>非阻塞</td><td>非阻塞</td><td>非阻塞</td></tr><tr><td>SSL支持</td><td>Java SSL</td><td>Java SSL</td><td>Java SSL</td><td>Open SSL</td></tr><tr><td>SSL握手</td><td>阻塞</td><td>非阻塞</td><td>非阻塞</td><td>阻塞</td></tr><tr><td>最大链接数</td><td><code>maxConnections</code></td><td><code>maxConnections</code></td><td><code>maxConnections</code></td><td><code>maxConnections</code></td></tr></tbody></table><p>推荐使用nio，在tomcat8中有最新的nio2，速度更快，建议使用nio2</p><p>设置nio2：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">executor</span><span class="token operator">=</span><span class="token string">&quot;tomcatThreadPool&quot;</span>  <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">&quot;8080&quot;</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span>
               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">&quot;20000&quot;</span>
               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">&quot;8443&quot;</span> /<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210728223416722.png" alt="image-20210728223416722" tabindex="0" loading="lazy"><figcaption>image-20210728223416722</figcaption></figure><p>可以看到已经设置为nio2了。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,46),d={href:"https://blog.csdn.net/ThinkWon/article/details/102744033",target:"_blank",rel:"noopener noreferrer"};function g(m,u){const s=i("ExternalLinkIcon");return t(),e("div",null,[c,a("p",null,[a("a",d,[o("史上最强Tomcat8性能优化"),p(s)])])])}const b=n(l,[["render",g],["__file","tomcat-x-config-optimization.html.vue"]]);export{b as default};
