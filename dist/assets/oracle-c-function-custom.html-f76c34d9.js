import{_ as a,W as e,X as p,Y as n,Z as t,$ as o,a0 as l,D as c}from"./framework-f64bc974.js";const i={},r=l(`<h1 id="oracle-自定义函数语法" tabindex="-1"><a class="header-anchor" href="#oracle-自定义函数语法" aria-hidden="true">#</a> Oracle 自定义函数语法</h1><h2 id="_1-语法" tabindex="-1"><a class="header-anchor" href="#_1-语法" aria-hidden="true">#</a> 1. 语法</h2><p><strong>Oracle自定义函数的语法如下：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span>参数<span class="token number">1</span> 模式 参数类型<span class="token punctuation">)</span>
<span class="token keyword">return</span> 返回值类型
<span class="token keyword">as</span>
变量<span class="token number">1</span> 变量类型<span class="token punctuation">;</span>
变量<span class="token number">2</span> 变量类型<span class="token punctuation">;</span>
<span class="token keyword">begin</span>
    函数体<span class="token punctuation">;</span>
<span class="token keyword">end</span> 函数名<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数的模式有3种:(如果没有注明, 参数默认的类型为 in.)</p><ul><li><p>in: 为只读模式, 在函数中, 参数的值只能被引用, 不能被改变;</p></li><li><p>out: 为只写模式, 只能被赋值, 不能被引用;</p></li><li><p>in out: 可读可写.</p></li></ul><p>提醒:</p><ol><li>在Oracle自定义函数中, else if 的正确写法是 elsif 而不是 else if</li><li>使用 if 需要加 then &quot;if 条件 then 操作&quot;</li></ol><h2 id="_2-示例" tabindex="-1"><a class="header-anchor" href="#_2-示例" aria-hidden="true">#</a> 2. 示例</h2><h3 id="_2-1-代替mysql的find-in-set" tabindex="-1"><a class="header-anchor" href="#_2-1-代替mysql的find-in-set" aria-hidden="true">#</a> 2.1 代替MYSQL的FIND_IN_SET</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- ----------------------------</span>
<span class="token comment">-- 函数 ，代替MYSQL的FIND_IN_SET</span>
<span class="token comment">-- 例如： SELECT * FROM SYS_DEPT WHERE FIND_IN_SET (101,ANCESTORS) &lt;&gt; 0</span>
<span class="token comment">-- MYSQL可接受0或其它NUMBER做为WHERE 条件，ORACLE只接受表达式做为WHERE 条件</span>
<span class="token comment">-- ----------------------------</span>
<span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> FIND_IN_SET<span class="token punctuation">(</span>ARG1 <span class="token operator">IN</span> VARCHAR2<span class="token punctuation">,</span>ARG2 <span class="token operator">IN</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">)</span>
<span class="token keyword">RETURN</span> NUMBER <span class="token operator">IS</span> RESULT NUMBER<span class="token punctuation">;</span>
<span class="token keyword">BEGIN</span>
<span class="token keyword">SELECT</span> INSTR<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token operator">||</span>ARG2<span class="token operator">||</span><span class="token string">&#39;,&#39;</span> <span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token operator">||</span>ARG1<span class="token operator">||</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> RESULT <span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>
<span class="token keyword">RETURN</span><span class="token punctuation">(</span>RESULT<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">END</span> FIND_IN_SET<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-读入两个值-返回比较大的值" tabindex="-1"><a class="header-anchor" href="#_2-2-读入两个值-返回比较大的值" aria-hidden="true">#</a> 2.2 读入两个值, 返回比较大的值</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">function</span> function1<span class="token punctuation">(</span>para1 <span class="token operator">in</span> number<span class="token punctuation">,</span> para2 <span class="token operator">in</span> number<span class="token punctuation">)</span> 
<span class="token keyword">return</span> number 
<span class="token keyword">as</span> 
<span class="token keyword">begin</span>
  <span class="token keyword">if</span> para1 <span class="token operator">&gt;</span> para2 <span class="token keyword">then</span>
      <span class="token keyword">return</span> para1<span class="token punctuation">;</span>
  <span class="token keyword">else</span>
      <span class="token keyword">return</span> para2<span class="token punctuation">;</span> 
  <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>
<span class="token keyword">end</span> function1<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> function1<span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span> <span class="token number">333</span><span class="token punctuation">)</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,16),d={href:"https://blog.csdn.net/libertine1993/article/details/47264211",target:"_blank",rel:"noopener noreferrer"};function u(k,v){const s=c("ExternalLinkIcon");return e(),p("div",null,[r,n("p",null,[n("a",d,[t("Oracle 自定义函数语法与实例"),o(s)])])])}const b=a(i,[["render",u],["__file","oracle-c-function-custom.html.vue"]]);export{b as default};
