import{_ as n,W as s,X as a,a0 as e}from"./framework-f64bc974.js";const t={},p=e(`<h1 id="es框架-easy-es中的注意点" tabindex="-1"><a class="header-anchor" href="#es框架-easy-es中的注意点" aria-hidden="true">#</a> ES框架 - Easy-Es中的注意点</h1><h2 id="_1-es索引的keyword类型和text类型" tabindex="-1"><a class="header-anchor" href="#_1-es索引的keyword类型和text类型" aria-hidden="true">#</a> 1. ES索引的keyword类型和text类型</h2><p>ES中的keyword类型,和MySQL中的字段基本上差不多,当我们需要对查询字段进行精确匹配,左模糊,右模糊,全模糊,排序聚合等操作时,需要该字段的索引类型为keyword类型,否则你会发现查询没有查出想要的结果,甚至报错. 比如EE中常用的API eq(),like(),distinct()等都需要字段类型为keyword类型.</p><p>当我们需要对字段进行分词查询时,需要该字段的类型为text类型,并且指定分词器(不指定就用ES默认分词器,效果通常不理想). 比如EE中常用的API match()等都需要字段类型为text类型. 当使用match查询时未查询到预期结果时,可以先检查索引类型,然后再检查分词器,因为如果一个词没被分词器分出来,那结果也是查询不出来的.</p><p>当同一个字段,我们既需要把它当keyword类型使用,又需要把它当text类型使用时,此时我们的索引类型为keyword_text类型,EE中可以对字段添加注解@TableField(fieldType = FieldType.KEYWORD_TEXT),如此该字段就会被创建为keyword+text双类型如下图所示,值得注意的是,当我们把该字段当做keyword类型查询时,ES要求传入的字段名称为&quot;字段名.keyword&quot;,当把该字段当text类型查询时,直接使用原字段名即可.</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221226110548226.png" alt="image-20221226110548226" tabindex="0" loading="lazy"><figcaption>image-20221226110548226</figcaption></figure><p>另一种做法是,可以冗余一个字段,值用相同的,一个注解标记为keyword类型,另一个标记为text类型,查询时按规则选择对应字段进行查询.</p><p>还需要注意的是,如果一个字段的索引类型被创建为仅为keyword类型(如下图所示)查询时,则不需要在其名称后面追加.keyword,直接查询就行.</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221226110620692.png" alt="image-20221226110620692" tabindex="0" loading="lazy"><figcaption>image-20221226110620692</figcaption></figure><h2 id="_2-termquery-match-match-phrase区别" tabindex="-1"><a class="header-anchor" href="#_2-termquery-match-match-phrase区别" aria-hidden="true">#</a> 2. termQuery,match,match_phrase区别</h2><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221226110422187.png" alt="image-20221226110422187" tabindex="0" loading="lazy"><figcaption>image-20221226110422187</figcaption></figure><h2 id="_3-ee在整个查询过程中做了什么" tabindex="-1"><a class="header-anchor" href="#_3-ee在整个查询过程中做了什么" aria-hidden="true">#</a> 3. EE在整个查询过程中做了什么？</h2><p>总结起来就2件:</p><ol><li>把用户输入的MySQL语法(Mybatis-Plus语法)转换成RestHighLevel语法,然后调用RestHighLevelClient执行本次查询</li><li>把查询结果转换成用户想要的格式:如<code>List&lt;T&gt;</code>并返回.</li></ol><h2 id="_4-索引处理" tabindex="-1"><a class="header-anchor" href="#_4-索引处理" aria-hidden="true">#</a> 4. 索引处理</h2><h3 id="模式一-自动托管之平滑模式-自动挡-雪地模式-默认开启此模式" tabindex="-1"><a class="header-anchor" href="#模式一-自动托管之平滑模式-自动挡-雪地模式-默认开启此模式" aria-hidden="true">#</a> 模式一:自动托管之平滑模式(自动挡-雪地模式) 默认开启此模式</h3><blockquote><p>在此模式下,索引的创建更新数据迁移等全生命周期用户均不需要任何操作即可完成,过程零停机,用户无感知,可实现在生产环境的平滑过渡,类似汽车的自动档-雪地模式,平稳舒适,彻底解放用户,尽情享受自动架势的乐趣! 需要值得特别注意的是,在自动托管模式下,系统会自动生成一条名为ee-distribute-lock的索引,该索引为框架内部使用,用户可忽略,若不幸因断电等其它因素极小概率下发生死锁,可删除该索引即可.另外,在使用时如碰到索引变更,原索引名称可能会被追加后缀_s0或_s1,不必慌张,这是全自动平滑迁移零停机的必经之路,索引后缀不影响使用,框架会自动激活该新索引.关于_s0和_s1后缀,在此模式下无法避免,因为要保留原索引数据迁移,又不能同时存在两个同名索引,凡是都是要付出代价的，如果您不认可此种处理方式,可继续往下看,总有一种适合您。</p></blockquote><p>其核心处理流程梳理如下图所示,不妨结合源码看,更容易理解:</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221226135419316.png" alt="image-20221226135419316" tabindex="0" loading="lazy"><figcaption>image-20221226135419316</figcaption></figure><blockquote><p>&quot;自动挡&quot;模式下的最佳实践示例:</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@IndexName</span><span class="token punctuation">(</span>shardsNum <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>replicasNum <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 可指定分片数,副本数,若缺省则默认均为1</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * es中的唯一id,如果你想自定义es中的id为你提供的id,比如MySQL中的id,请将注解中的type指定为customize,如此id便支持任意数据类型)
     */</span>
    <span class="token annotation punctuation">@IndexId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span><span class="token constant">CUSTOMIZE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 文档标题,不指定类型默认被创建为keyword类型,可进行精确查询
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 文档内容,指定了类型及存储/查询分词器
     */</span>
    <span class="token annotation punctuation">@HighLight</span><span class="token punctuation">(</span>mappingField<span class="token operator">=</span><span class="token string">&quot;highlightContent&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token punctuation">,</span> analyzer <span class="token operator">=</span> <span class="token class-name">Analyzer</span><span class="token punctuation">.</span><span class="token constant">IK_SMART</span><span class="token punctuation">,</span> searchAnalyzer <span class="token operator">=</span> <span class="token class-name">Analyzer</span><span class="token punctuation">.</span><span class="token constant">IK_MAX_WORD</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 作者 加@TableField注解,并指明strategy = FieldStrategy.NOT_EMPTY 表示更新的时候的策略为 创建者不为空字符串时才更新
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">FieldStrategy</span><span class="token punctuation">.</span><span class="token constant">NOT_EMPTY</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> creator<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 创建时间
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token constant">DATE</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gmtCreate<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * es中实际不存在的字段,但模型中加了,为了不和es映射,可以在此类型字段上加上 注解@TableField,并指明exist=false
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> notExistsField<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 地理位置经纬度坐标 例如: &quot;40.13933715136454,116.63441990026217&quot;
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token constant">GEO_POINT</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 图形(例如圆心,矩形)
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>fieldType <span class="token operator">=</span> <span class="token class-name">FieldType</span><span class="token punctuation">.</span><span class="token constant">GEO_SHAPE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> geoLocation<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 自定义字段名称
     */</span>
    <span class="token annotation punctuation">@IndexField</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;wu-la&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> customField<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 高亮返回值被映射的字段
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> highlightContent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-分页查询" tabindex="-1"><a class="header-anchor" href="#_5-分页查询" aria-hidden="true">#</a> 5. 分页查询</h2><blockquote><p>关于分页,我们支持了ES的三种分页模式,大家可参考下表,按需选择.</p></blockquote><table><thead><tr><th>分页方式</th><th>性能</th><th>优点</th><th>缺点</th><th>应用场景</th></tr></thead><tbody><tr><td>from+size 浅分页</td><td>低</td><td>灵活性好,实现简单</td><td>深度分页问题</td><td>数据量比较小，能容忍深度分页问题</td></tr><tr><td>scroll 滚动查询</td><td>中</td><td>解决了深度分页问题</td><td>无法反应数据的实时性</td><td>海量数据的导出需要查询海量结果集的数据</td></tr><tr><td>search_after</td><td>高</td><td>性能最好,不存在深度分页问题，能够反应数据的实时变化</td><td>实现复杂，需要有一个全局唯一的字段连续分页的实现会比较复杂，因为每一次查询都需要上次查询的结果，它不适用于大幅度跳页查询</td><td>海量数据的分页</td></tr></tbody></table><h3 id="_5-1-浅分页" tabindex="-1"><a class="header-anchor" href="#_5-1-浅分页" aria-hidden="true">#</a> 5.1 浅分页</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 物理分页</span>
    <span class="token class-name">EsPageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">LambdaEsQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> wrapper<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageNum<span class="token punctuation">,</span> <span class="token class-name">Integer</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>温馨提示</p><p>无需集成任何插件,即可使用分页查询,本查询属于物理分页，<strong>基于size+from的浅分页模式,适用于查询数据量少于1万的情况</strong>,如您需要 在一些高阶语法的使用场景中,目前已知的有聚合字段的返回,我们分页器尚不能支持,需要您自己封装分页,其它场景基本都能完美支持,用起来无比简单. 注意PageInfo是由本框架提供的,如果你项目中已经有目前最受欢迎的开源分页插件PageHelper,请在引入包的时候注意别引入错误了,EE采用和PageHelper一样的返回字段,您无需担心字段名称不统一带来的额外工作量.</p></blockquote><blockquote><p>使用示例:</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LambdaEsQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaEsQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wrapper<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token operator">::</span><span class="token function">getTitle</span><span class="token punctuation">,</span> <span class="token string">&quot;老汉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">EsPageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> documentPageInfo <span class="token operator">=</span> documentMapper<span class="token punctuation">.</span><span class="token function">pageQuery</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>documentPageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-滚动查询" tabindex="-1"><a class="header-anchor" href="#_5-2-滚动查询" aria-hidden="true">#</a> 5.2 滚动查询</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 滚动查询</span>
    <span class="token class-name">SearchResponse</span> <span class="token function">scroll</span><span class="token punctuation">(</span><span class="token class-name">SearchScrollRequest</span> searchScrollRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span> requestOptions<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示</p><p>若您有需要进行超大量的数据查询和分页需求,可以采用滚动查询来实现,关于滚动查询,我们实际上已经提供了getSearchSourceBuilderAPI用于快速构造出SearchSourceBuilder,配合上面提供的滚动查询API,助力您快速实现滚动查询 当然我们更建议您使用下面searchAfter方式分页,不仅API封装得更好,使用更简单,而且具有其它天然优势。</p></blockquote><h2 id="_5-3-searchafter" tabindex="-1"><a class="header-anchor" href="#_5-3-searchafter" aria-hidden="true">#</a> 5.3 searchAfter</h2><blockquote><p>使用示例:</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LambdaEsQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> lambdaEsQueryWrapper <span class="token operator">=</span> <span class="token class-name">EsWrappers</span><span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 必须指定一种排序规则,且排序字段值必须唯一 此处我选择用id进行排序 实际可根据业务场景自由指定,不推荐用创建时间,因为可能会相同</span>
        lambdaEsQueryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token class-name">Document</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SAPageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> saPageInfo <span class="token operator">=</span> documentMapper<span class="token punctuation">.</span><span class="token function">searchAfterPage</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 第一页</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>saPageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 获取下一页</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> nextSearchAfter <span class="token operator">=</span> saPageInfo<span class="token punctuation">.</span><span class="token function">getNextSearchAfter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SAPageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Document</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> documentMapper<span class="token punctuation">.</span><span class="token function">searchAfterPage</span><span class="token punctuation">(</span>lambdaEsQueryWrapper<span class="token punctuation">,</span> nextSearchAfter<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示</p><p>使用searchAfter必须指定排序,若没有排序不仅会报错,而且对跳页也不友好. 需要保持searchAfter排序唯一,不然会导致分页失效,推荐使用id,uuid等进行排序.</p></blockquote>`,36),c=[p];function o(l,i){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","elasticsearch-easy-es.html.vue"]]);export{r as default};
