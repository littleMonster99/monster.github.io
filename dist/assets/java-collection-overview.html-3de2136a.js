import{_ as i,W as r,X as h,Y as e,$ as t,a0 as n,D as d}from"./framework-f64bc974.js";const l={},o=n('<h1 id="collection-类关系图" tabindex="-1"><a class="header-anchor" href="#collection-类关系图" aria-hidden="true">#</a> Collection 类关系图</h1><blockquote><p>本文主要介绍JDK中Collection和Map相关知识体系，后续章节将对主要对类进行源码解读。</p></blockquote><h2 id="_1-知识体系结构" tabindex="-1"><a class="header-anchor" href="#_1-知识体系结构" aria-hidden="true">#</a> 1. 知识体系结构</h2><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/java_collections_overview.png" alt="java_collections_overview" tabindex="0" loading="lazy"><figcaption>java_collections_overview</figcaption></figure><h2 id="_2-介绍" tabindex="-1"><a class="header-anchor" href="#_2-介绍" aria-hidden="true">#</a> 2. 介绍</h2><p>容器，就是可以容纳其他Java对象的对象。<em>Java Collections Framework(JCF)</em> 为Java开发者提供了通用的容器，其始于JDK 1.2，优点是:</p><ul><li>降低编程难度</li><li>提高程序性能</li><li>提高API间的互操作性</li><li>降低学习难度</li><li>降低设计和实现相关API的难度</li><li>增加程序的重用性</li></ul><p>Java容器里只能放对象，对于基本类型(int, long, float, double等)，需要将其包装成对象类型后(Integer, Long, Float, Double等)才能放到容器里。很多时候拆包装和解包装能够自动完成。这虽然会导致额外的性能和空间开销，但简化了设计和编程。</p><h2 id="_3-collection" tabindex="-1"><a class="header-anchor" href="#_3-collection" aria-hidden="true">#</a> 3. Collection</h2><blockquote><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对(两个对象)的映射表。</p></blockquote><h3 id="_3-1-set" tabindex="-1"><a class="header-anchor" href="#_3-1-set" aria-hidden="true">#</a> 3.1 Set</h3><h4 id="_3-1-1-treeset" tabindex="-1"><a class="header-anchor" href="#_3-1-1-treeset" aria-hidden="true">#</a> 3.1.1 TreeSet</h4><p>基于红黑树实现，支持有序性操作，例如根据一个范围查找元素的操作。但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p><h4 id="_3-1-2-hashset" tabindex="-1"><a class="header-anchor" href="#_3-1-2-hashset" aria-hidden="true">#</a> 3.1.2 HashSet</h4><p>基于哈希表实现，支持快速查找，但不支持有序性操作。并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p><h4 id="_3-1-3-linkedhashset" tabindex="-1"><a class="header-anchor" href="#_3-1-3-linkedhashset" aria-hidden="true">#</a> 3.1.3 LinkedHashSet</h4><p>具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p><h3 id="_3-2-list" tabindex="-1"><a class="header-anchor" href="#_3-2-list" aria-hidden="true">#</a> 3.2 List</h3><h4 id="_3-2-1-arraylist" tabindex="-1"><a class="header-anchor" href="#_3-2-1-arraylist" aria-hidden="true">#</a> 3.2.1 ArrayList</h4><p>基于动态数组实现，支持随机访问。</p><h4 id="_3-2-2-vector" tabindex="-1"><a class="header-anchor" href="#_3-2-2-vector" aria-hidden="true">#</a> 3.2.2 Vector</h4><p>和 ArrayList 类似，但它是线程安全的。</p><h4 id="_3-2-3-linkedlist" tabindex="-1"><a class="header-anchor" href="#_3-2-3-linkedlist" aria-hidden="true">#</a> 3.2.3 LinkedList</h4><p>基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p><h3 id="_3-3-queue" tabindex="-1"><a class="header-anchor" href="#_3-3-queue" aria-hidden="true">#</a> 3.3 Queue</h3><h4 id="_3-3-1-linkedlist" tabindex="-1"><a class="header-anchor" href="#_3-3-1-linkedlist" aria-hidden="true">#</a> 3.3.1 LinkedList</h4><p>可以用它来实现双向队列。</p><h4 id="_3-3-2-priorityqueue" tabindex="-1"><a class="header-anchor" href="#_3-3-2-priorityqueue" aria-hidden="true">#</a> 3.3.2 PriorityQueue</h4><p>基于堆结构实现，可以用它来实现优先队列。</p><h2 id="_4-map" tabindex="-1"><a class="header-anchor" href="#_4-map" aria-hidden="true">#</a> 4. Map</h2><h3 id="_4-1-treemap" tabindex="-1"><a class="header-anchor" href="#_4-1-treemap" aria-hidden="true">#</a> 4.1 TreeMap</h3><p>基于红黑树实现。</p><h3 id="_4-2-hashmap" tabindex="-1"><a class="header-anchor" href="#_4-2-hashmap" aria-hidden="true">#</a> 4.2 HashMap</h3><p>基于哈希表实现。</p><h3 id="_4-3-hashtable" tabindex="-1"><a class="header-anchor" href="#_4-3-hashtable" aria-hidden="true">#</a> 4.3 HashTable</h3><p>和 HashMap 类似，但它是线程安全的，这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全，并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p><h3 id="_4-4-linkedhashmap" tabindex="-1"><a class="header-anchor" href="#_4-4-linkedhashmap" aria-hidden="true">#</a> 4.4 LinkedHashMap</h3><p>使用双向链表来维护元素的顺序，顺序为插入顺序或者最近最少使用(LRU)顺序。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>',39),s={href:"https://pdai.tech/md/java/collection/java-collection-all.html",target:"_blank",rel:"noopener noreferrer"},c=e("strong",null,"Collection 类关系图",-1);function p(_,u){const a=d("ExternalLinkIcon");return r(),h("div",null,[o,e("p",null,[e("a",s,[c,t(a)])])])}const f=i(l,[["render",p],["__file","java-collection-overview.html.vue"]]);export{f as default};
