import{_ as t,W as l,X as p,Y as n,Z as a,$ as e,a0 as o,D as i}from"./framework-f64bc974.js";const c={},d=o(`<h1 id="jpa查询方式总结" tabindex="-1"><a class="header-anchor" href="#jpa查询方式总结" aria-hidden="true">#</a> JPA查询方式总结</h1><h2 id="查询方式种类" tabindex="-1"><a class="header-anchor" href="#查询方式种类" aria-hidden="true">#</a> 查询方式种类</h2><ol><li><p>按照jpa规范，通过方法名来创建查询</p><p>（简单的用这个，条件很多的话，用这个方法名会很长。）</p></li><li><p>Query by Example</p><p>每次需要重新new 对象传入(不支持or,仅支持and)</p></li><li><p>@Query JPQL 或原生sql查询</p></li><li><p>EntityManager.createNativeQuery 原生SQL</p></li></ol><h2 id="_1-按照jpa规范-通过方法名来创建查询" tabindex="-1"><a class="header-anchor" href="#_1-按照jpa规范-通过方法名来创建查询" aria-hidden="true">#</a> 1. 按照jpa规范，通过方法名来创建查询</h2><h3 id="_1-1-核心方法" tabindex="-1"><a class="header-anchor" href="#_1-1-核心方法" aria-hidden="true">#</a> 1.1 核心方法</h3><ul><li><p>查询所有数据 findAll()</p></li><li><p>修改 添加数据 S save(S entity)</p></li><li><p>分页查询 Page<code>&lt;S&gt;</code> findAll(Example<code>&lt;S&gt; </code>example, Pageable pageable)</p></li><li><p>根据id查询 findOne()</p></li><li><p>根据实体类属性查询： findByProperty (type Property); 例如：findByAge(int age)</p></li><li><p>删除 void delete(T entity)</p></li><li><p>计数 查询 long count() 或者 根据某个属性的值查询总数 countByAge(int age)</p></li><li><p>是否存在 boolean existsById(ID primaryKey)</p></li></ul><h3 id="_1-2-查询关键字" tabindex="-1"><a class="header-anchor" href="#_1-2-查询关键字" aria-hidden="true">#</a> 1.2 查询关键字</h3><ul><li><p>and</p><p>And 例如：findByUsernameAndPassword(String user, Striang pwd)；</p></li><li><p>or</p><p>Or 例如：findByUsernameOrAddress(String user, String addr)；</p></li><li><p>between</p><p>Between 例如：SalaryBetween(int max, int min)；</p></li><li><p>&quot;&lt;&quot;</p><p>LessThan 例如： findBySalaryLessThan(int max)；</p></li><li><p>&quot;&gt;&quot;</p><p>GreaterThan 例如： findBySalaryGreaterThan(int min)；</p></li><li><p>is null</p><p>IsNull 例如： findByUsernameIsNull()；</p></li><li><p>is not null</p><p>IsNotNull NotNull 与 IsNotNull 等价 例如： findByUsernameIsNotNull()；</p></li><li><p>like</p><p>Like 例如： findByUsernameLike(String user)；</p></li><li><p>not like</p><p>NotLike 例如： findByUsernameNotLike(String user)；</p></li><li><p>order by</p><p>OrderBy 例如： findByUsernameOrderByNameAsc(String user)；直接通过name正序排序</p></li><li><p>&quot;!=&quot;</p><p>Not 例如： findByUsernameNot(String user)；</p></li><li><p>in</p><p>In 例如： findByUsernameIn(Collection<code>&lt;String&gt;</code> userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</p></li><li><p>not in</p><p>NotIn 例如： findByUsernameNotIn(Collection<code>&lt;String&gt;</code> userList) ，方法的参数可以是 Collection 类型，也可以是数组或者不定长参数；</p></li><li><p>Top/Limit</p><p>查询方法结果的数量可以通过关键字来限制，first 或者 top都可以使用。top/first加数字可以指定要返回最大结果的大小 默认为1</p></li></ul><p>例如:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">findFirstByOrderByLastnameAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">User</span> <span class="token function">findTopByOrderByAgeDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryFirst10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Slice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findTop3ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirst10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Sort</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findTop10ByLastname</span><span class="token punctuation">(</span><span class="token class-name">String</span> lastname<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-详细查询语法" tabindex="-1"><a class="header-anchor" href="#_1-3-详细查询语法" aria-hidden="true">#</a> 1.3 详细查询语法</h3><table><thead><tr><th style="text-align:left;"><strong>关键词</strong></th><th style="text-align:left;">示例</th><th style="text-align:left;">对应的sql片段</th></tr></thead><tbody><tr><td style="text-align:left;"><code>And</code></td><td style="text-align:left;"><code>findByLastnameAndFirstname</code></td><td style="text-align:left;"><code>… where x.lastname = ?1 and x.firstname = ?2</code></td></tr><tr><td style="text-align:left;"><code>Or</code></td><td style="text-align:left;"><code>findByLastnameOrFirstname</code></td><td style="text-align:left;"><code>… where x.lastname = ?1 or x.firstname = ?2</code></td></tr><tr><td style="text-align:left;"><code>Is,Equals</code></td><td style="text-align:left;"><code>findByFirstname</code>,<code>findByFirstnameIs</code>,<code>findByFirstnameEquals</code></td><td style="text-align:left;"><code>… where x.firstname = ?1</code></td></tr><tr><td style="text-align:left;"><code>Between</code></td><td style="text-align:left;"><code>findByStartDateBetween</code></td><td style="text-align:left;"><code>… where x.startDate between ?1 and ?2</code></td></tr><tr><td style="text-align:left;"><code>LessThan</code></td><td style="text-align:left;"><code>findByAgeLessThan</code></td><td style="text-align:left;"><code>… where x.age &lt; ?1</code></td></tr><tr><td style="text-align:left;"><code>LessThanEqual</code></td><td style="text-align:left;"><code>findByAgeLessThanEqual</code></td><td style="text-align:left;"><code>… where x.age &lt;= ?1</code></td></tr><tr><td style="text-align:left;"><code>GreaterThan</code></td><td style="text-align:left;"><code>findByAgeGreaterThan</code></td><td style="text-align:left;"><code>… where x.age &gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>GreaterThanEqual</code></td><td style="text-align:left;"><code>findByAgeGreaterThanEqual</code></td><td style="text-align:left;"><code>… where x.age &gt;= ?1</code></td></tr><tr><td style="text-align:left;"><code>After</code></td><td style="text-align:left;"><code>findByStartDateAfter</code></td><td style="text-align:left;"><code>… where x.startDate &gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>Before</code></td><td style="text-align:left;"><code>findByStartDateBefore</code></td><td style="text-align:left;"><code>… where x.startDate &lt; ?1</code></td></tr><tr><td style="text-align:left;"><code>IsNull</code></td><td style="text-align:left;"><code>findByAgeIsNull</code></td><td style="text-align:left;"><code>… where x.age is null</code></td></tr><tr><td style="text-align:left;"><code>IsNotNull,NotNull</code></td><td style="text-align:left;"><code>findByAge(Is)NotNull</code></td><td style="text-align:left;"><code>… where x.age not null</code></td></tr><tr><td style="text-align:left;"><code>Like</code></td><td style="text-align:left;"><code>findByFirstnameLike</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code></td></tr><tr><td style="text-align:left;"><code>NotLike</code></td><td style="text-align:left;"><code>findByFirstnameNotLike</code></td><td style="text-align:left;"><code>… where x.firstname not like ?1</code></td></tr><tr><td style="text-align:left;"><code>StartingWith</code></td><td style="text-align:left;"><code>findByFirstnameStartingWith</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code> (parameter bound with appended <code>%</code>)</td></tr><tr><td style="text-align:left;"><code>EndingWith</code></td><td style="text-align:left;"><code>findByFirstnameEndingWith</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code> (parameter bound with prepended <code>%</code>)</td></tr><tr><td style="text-align:left;"><code>Containing</code></td><td style="text-align:left;"><code>findByFirstnameContaining</code></td><td style="text-align:left;"><code>… where x.firstname like ?1</code> (parameter bound wrapped in <code>%</code>)</td></tr><tr><td style="text-align:left;"><code>OrderBy</code></td><td style="text-align:left;"><code>findByAgeOrderByLastnameDesc</code></td><td style="text-align:left;"><code>… where x.age = ?1 order by x.lastname desc</code></td></tr><tr><td style="text-align:left;"><code>Not</code></td><td style="text-align:left;"><code>findByLastnameNot</code></td><td style="text-align:left;"><code>… where x.lastname &lt;&gt; ?1</code></td></tr><tr><td style="text-align:left;"><code>In</code></td><td style="text-align:left;"><code>findByAgeIn(Collection ages)</code></td><td style="text-align:left;"><code>… where x.age in ?1</code></td></tr><tr><td style="text-align:left;"><code>NotIn</code></td><td style="text-align:left;"><code>findByAgeNotIn(Collection ages)</code></td><td style="text-align:left;"><code>… where x.age not in ?1</code></td></tr><tr><td style="text-align:left;"><code>True</code></td><td style="text-align:left;"><code>findByActiveTrue()</code></td><td style="text-align:left;"><code>… where x.active = true</code></td></tr><tr><td style="text-align:left;"><code>False</code></td><td style="text-align:left;"><code>findByActiveFalse()</code></td><td style="text-align:left;"><code>… where x.active = false</code></td></tr><tr><td style="text-align:left;"><code>IgnoreCase</code></td><td style="text-align:left;"><code>findByFirstnameIgnoreCase</code></td><td style="text-align:left;"><code>… where UPPER(x.firstame) = UPPER(?1)</code></td></tr></tbody></table><h3 id="_1-4-内置方法-分页-排序" tabindex="-1"><a class="header-anchor" href="#_1-4-内置方法-分页-排序" aria-hidden="true">#</a> 1.4 内置方法 （分页，排序）</h3><ul><li><strong>Sort_排序</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Sort</span> sort <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">ASC</span><span class="token punctuation">,</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//其中第一个参数表示是降序还是升序（此处表示升序）</span>
<span class="token comment">//第二个参数表示你要按你的 entity（记住是entity中声明的变量，不是数据库中表对应的字段）中的那个变量进行排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>PageRequest_分页</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> num<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//index偏移量 num查询数量 sort排序</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分页+排序实现:</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DemoBean</span> demoBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
demoBean<span class="token punctuation">.</span><span class="token function">setAppId</span><span class="token punctuation">(</span>appId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//查询条件</span>
<span class="token comment">//创建查询参数</span>
<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DemoBean</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>demoBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取排序对象</span>
<span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//创建分页对象</span>
<span class="token class-name">PageRequest</span> pageRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> num<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//分页查询</span>
<span class="token keyword">return</span> demoRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> pageRequest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-example-实例查询" tabindex="-1"><a class="header-anchor" href="#_2-example-实例查询" aria-hidden="true">#</a> 2. Example_实例查询</h2><p>创建一个ExampleMatcher对象，最后再用Example的of方法构造相应的Example对象并传递给相关查询方法。我们看看Spring的例子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          
person<span class="token punctuation">.</span><span class="token function">setFirstname</span><span class="token punctuation">(</span><span class="token string">&quot;Dave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Firstname = &#39;Dave&#39;                          </span>
<span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                     
			<span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token class-name">GenericPropertyMatchers</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//姓名采用“开始匹配”的方式查询</span>
			<span class="token punctuation">.</span><span class="token function">withIgnorePaths</span><span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//忽略属性：是否关注。因为是基本类型，需要忽略掉</span>
<span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> example <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Example根据域对象和配置创建一个新的ExampleMatcher  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ExampleMatcher用于创建一个查询对象，上面的代码就创建了一个查询对象。withIgnorePaths方法用来排除某个属性的查询。withIncludeNullValues方法让空值也参与查询，就是我们设置了对象的姓，而名为空值.</p><h3 id="_2-1-概念定义" tabindex="-1"><a class="header-anchor" href="#_2-1-概念定义" aria-hidden="true">#</a> 2.1 概念定义:</h3><p>上面例子中，是这样创建“实例”的：Example<code>&lt;Customer&gt;</code> ex = Example.of(customer, matcher);我们看到，Example对象，由customer和matcher共同创建。</p><ul><li><p>实体对象：</p><p>在持久化框架中与Table对应的域对象，一个对象代表数据库表中的一条记录，如上例中Customer对象。在构建查询条件时，一个实体对象代表的是查询条件中的“数值”部分。如：要查询名字是“Dave”的客户，实体对象只能存储条件值“Dave”。</p></li><li><p>匹配器：ExampleMatcher对象，</p><p>它是匹配“实体对象”的，表示了如何使用“实体对象”中的“值”进行查询，它代表的是“查询方式”，解释了如何去查的问题。如：要查询FirstName是“Dave”的客户,即名以“Dave&quot;开头的客户，该对象就表示了“以什么开头的”这个查询方式，如上例中:withMatcher(&quot;name&quot;, GenericPropertyMatchers.startsWith())</p></li><li><p>实例：即Example对象</p><p>代表的是完整的查询条件。由实体对象（查询条件值）和匹配器（查询方式）共同创建。</p><p>再来理解“实例查询”，顾名思义，就是通过一个例子来查询。要查询的是Customer对象，查询条件也是一个Customer对象，通过一个现有的客户对象作为例子，查询和这个例子相匹配的对象。</p></li></ul><h3 id="_2-2-特点及约束-局限性" tabindex="-1"><a class="header-anchor" href="#_2-2-特点及约束-局限性" aria-hidden="true">#</a> 2.2 特点及约束（局限性）:</h3><ul><li><p>支持动态查询。</p><p>即支持查询条件个数不固定的情况，如：客户列表中有多个过滤条件，用户使用时在“地址”查询框中输入了值，就需要按地址进行过滤，如果没有输入值，就忽略这个过滤条件。对应的实现是，在构建查询条件Customer对象时，将address属性值置具体的条件值或置为null。</p></li><li><p>不支持过滤条件分组。<strong>即不支持过滤条件用 or(或) 来连接，所有的过滤查件，都是简单一层的用 and(并且) 连接</strong>。</p></li><li><p><strong>仅支持</strong>字符串的开始/包含/结束/正则表达式匹配 和 其他属性类型的<strong>精确匹配</strong>。</p><p>查询时，对一个要进行匹配的属性（如：姓名 name），只能传入一个过滤条件值，如以Customer为例，要查询姓“刘”的客户，“刘”这个条件值就存储在表示条件对象的Customer对象的name属性中，针对于“姓名”的过滤也只有这么一个存储过滤值的位置，没办法同时传入两个过滤值。正是由于这个限制，有些查询是没办法支持的，例如要查询某个时间段内添加的客户，对应的属性是 addTime，需要传入“开始时间”和“结束时间”两个条件值，而这种查询方式没有存两个值的位置，所以就没办法完成这样的查询。</p></li></ul><h3 id="_2-3-范例" tabindex="-1"><a class="header-anchor" href="#_2-3-范例" aria-hidden="true">#</a> 2.3 范例</h3><ul><li><p>综合使用:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建查询条件数据对象</span>
    <span class="token class-name">Customer</span> customer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;zhang&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    customer<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;河南省&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    customer<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token comment">//创建匹配器，即如何使用查询条件</span>
    <span class="token class-name">ExampleMatcher</span> matcher <span class="token operator">=</span> <span class="token class-name">ExampleMatcher</span><span class="token punctuation">.</span><span class="token function">matching</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//构建对象</span>
            <span class="token punctuation">.</span><span class="token function">withStringMatcher</span><span class="token punctuation">(</span><span class="token class-name">StringMatcher</span><span class="token punctuation">.</span><span class="token constant">CONTAINING</span><span class="token punctuation">)</span> <span class="token comment">//改变默认字符串匹配方式：模糊查询</span>
            <span class="token punctuation">.</span><span class="token function">withIgnoreCase</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">//改变默认大小写忽略方式：忽略大小写</span>
            <span class="token punctuation">.</span><span class="token function">withMatcher</span><span class="token punctuation">(</span><span class="token string">&quot;address&quot;</span><span class="token punctuation">,</span> <span class="token class-name">GenericPropertyMatchers</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//地址采用“开始匹配”的方式查询</span>
            <span class="token punctuation">.</span><span class="token function">withIgnorePaths</span><span class="token punctuation">(</span><span class="token string">&quot;focus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//忽略属性：是否关注。因为是基本类型，需要忽略掉</span>
    
    <span class="token comment">//创建实例</span>
    <span class="token class-name">Example</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> ex <span class="token operator">=</span> <span class="token class-name">Example</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>customer<span class="token punctuation">,</span> matcher<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    
    <span class="token comment">//查询</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> ls <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询null值:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//创建查询条件数据对象
        Customer customer = new Customer();
 
        //创建匹配器，即如何使用查询条件
        ExampleMatcher matcher = ExampleMatcher.matching() //构建对象
                .withIncludeNullValues() //改变“Null值处理方式”：包括
                .withIgnorePaths(&quot;id&quot;,&quot;name&quot;,&quot;sex&quot;,&quot;age&quot;,&quot;focus&quot;,&quot;addTime&quot;,&quot;remark&quot;,&quot;customerType&quot;);  //忽略其他属性
        
        //创建实例
        Example&lt;Customer&gt; ex = Example.of(customer, matcher); 
        
        //查询
        List&lt;Customer&gt; ls = dao.findAll(ex);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="_3-query注解" tabindex="-1"><a class="header-anchor" href="#_3-query注解" aria-hidden="true">#</a> 3. @Query注解</h2><p>查询接口不符合命名规范呢，如果想使用自定义查询，比如子查询呢？</p><p>上面所讲述的方法将失效，此时就要用到@Query注解，<strong>注解里面使用JPQL语言或者普通SQL查询</strong>。</p><h3 id="_3-1-jpql" tabindex="-1"><a class="header-anchor" href="#_3-1-jpql" aria-hidden="true">#</a> 3.1 JPQL</h3><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>public interface UserRepository extends JpaRepository&lt;User, Long&gt; {
  @Query(&quot;select u from User u where u.emailAddress = ?1&quot;)
  User findByEmailAddress(String emailAddress);

 
  @Query(&quot;select u from User u where u.firstname like %?1&quot;)
  List&lt;User&gt; findByFirstnameEndsWith(String firstname);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-原生sql查询" tabindex="-1"><a class="header-anchor" href="#_3-2-原生sql查询" aria-hidden="true">#</a> 3.2 原生sql查询</h3><p>需要 添加：<strong>nativeQuery = true</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;SELECT * FROM USERS WHERE EMAIL_ADDRESS = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
  <span class="token class-name">User</span> <span class="token function">findByEmailAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> emailAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-怎么往-query注解中的jpql中传递参数呢" tabindex="-1"><a class="header-anchor" href="#_3-3-怎么往-query注解中的jpql中传递参数呢" aria-hidden="true">#</a> 3.3 怎么往@Query注解中的JPQL中传递参数呢？</h3><p>两种方式：索引参数和命名参数。</p><ul><li><p>索引参数</p><p>索引参数如下所示，索引值从1开始，查询中 <code>”?X”</code>个数需要与方法定义的参数个数相一致，并且顺序也要一致。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Query(&quot;select u from User u where u.lastName=?1 and u.email=?2&quot;)
User testQueryAnnotationParams1(String lastName,String email);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>命名参数</p><p>可以定义好参数名，赋值时采用@Param(“参数名”)，而不用管顺序。<strong>推荐使用这种方式</strong>。</p><p>实例如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Query(&quot;select u from User u where u.lastName=:lastName and u.email=:email&quot;)
User testQueryAnnotationParams2(@Param(&quot;lastName&quot;) String lastName, @Param(&quot;email&quot;) String email);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-4-query中有like关键字" tabindex="-1"><a class="header-anchor" href="#_3-4-query中有like关键字" aria-hidden="true">#</a> 3.4 Query中有like关键字</h3><p>如果是 @Query 中有 LIKE 关键字，后面的参数需要前面或者后面加 %，这样在传递参数值的时候就可以不加 %：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//参数后面添加%</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastName like ?1%&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findBylastName <span class="token punctuation">(</span><span class="token class-name">String</span> lastName <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//参数前面添加%</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastName like %?1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findBylastName <span class="token punctuation">(</span><span class="token class-name">String</span> lastName <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//参数前后添加%</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select u from User u where u.lastName like %?1%&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> findBylastName <span class="token punctuation">(</span><span class="token class-name">String</span> lastName <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-entitymanager-createnativequery-原生sql" tabindex="-1"><a class="header-anchor" href="#_4-entitymanager-createnativequery-原生sql" aria-hidden="true">#</a> 4. EntityManager.createNativeQuery 原生SQL</h2><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>@Repository
public class SysRoleDaoImpl implements SysRoleDao {
 
    @Autowired
    private EntityManagerFactory factory;
 
    @Override
    public List&lt; SysRole &gt; findByUserId(String id) {
        String sql = &quot;SELECT r.* FROM sys_role_user ru LEFT JOIN sys_role r ON ru.sys_role_id = r.id WHERE ru.sys_user_id =:userId&quot;;
        EntityManager manager = factory.createEntityManager();
        Query query = manager.createNativeQuery(sql , SysRole.class);
        query.setParameter(&quot;userId&quot; , id);
        List list = query.getResultList();
        manager.close();
        return list;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,47),r={href:"https://blog.csdn.net/qq_30054997/article/details/79420141",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/J080624/article/details/82559318",target:"_blank",rel:"noopener noreferrer"},m={href:"https://blog.csdn.net/laokaizzz/article/details/81741994",target:"_blank",rel:"noopener noreferrer"};function k(g,v){const s=i("ExternalLinkIcon");return l(),p("div",null,[d,n("p",null,[n("a",r,[a("Spring data jpa 复杂动态查询方式总结"),e(s)])]),n("p",null,[n("a",u,[a("Spring Data JPA 查询方法那些事"),e(s)])]),n("p",null,[n("a",m,[a("spring data jpa 几种查询方式"),e(s)])])])}const y=t(c,[["render",k],["__file","jpa-i-query-overview.html.vue"]]);export{y as default};
