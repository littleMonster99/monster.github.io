import{_ as a,W as t,X as p,Y as n,Z as e,$ as o,a0 as c,D as i}from"./framework-f64bc974.js";const l={},u=c(`<h1 id="使用zxing生成二维码去除白边" tabindex="-1"><a class="header-anchor" href="#使用zxing生成二维码去除白边" aria-hidden="true">#</a> 使用zxing生成二维码去除白边</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>我们在使用zxing生成二维码的时候，会带上一个白色边框。因业务需要不能有这个白边，一定要把这个白边去除，那么如何去除呢？</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220527142912892.png" alt="image-20220527142912892" tabindex="0" loading="lazy"><figcaption>image-20220527142912892</figcaption></figure><h2 id="_2-源码白边产生" tabindex="-1"><a class="header-anchor" href="#_2-源码白边产生" aria-hidden="true">#</a> 2. 源码白边产生</h2><p>我们先看看二维码生成的步骤</p><h3 id="_2-1-创建字符串" tabindex="-1"><a class="header-anchor" href="#_2-1-创建字符串" aria-hidden="true">#</a> 2.1 创建字符串</h3><p>创建比特矩阵(位矩阵)的QR码编码的字符串的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">QRCodeWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QRCodeWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 解决中文乱码问题</span>
<span class="token class-name">String</span> contentCharset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BitMatrix</span> matrix <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contentCharset<span class="token punctuation">,</span> format<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-encode-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-encode-方法" aria-hidden="true">#</a> 2.2 encode 方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token class-name">BitMatrix</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span> format<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> format<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">BitMatrix</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span> format<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> hints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Found empty contents&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">!=</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span><span class="token constant">QR_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Can only encode QR_CODE, but got &quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorCorrectionLevel</span> errorCorrectionLevel <span class="token operator">=</span> <span class="token class-name">ErrorCorrectionLevel<span class="token punctuation">.</span>L</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> quietZone <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hints <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    errorCorrectionLevel <span class="token operator">=</span> <span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    quietZone <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token function">renderResult</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> errorCorrectionLevel<span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> quietZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Requested dimensions are too small: &quot;</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token char">&#39;x&#39;</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-renderresult-方法" tabindex="-1"><a class="header-anchor" href="#_2-3-renderresult-方法" aria-hidden="true">#</a> 2.3 renderResult 方法</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BitMatrix</span> <span class="token function">renderResult</span><span class="token punctuation">(</span><span class="token class-name">QRCode</span> code<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> quietZone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteMatrix</span> input<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">getMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> inputWidth <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> inputHeight <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           	<span class="token comment">//以下两行源码是原始代码中控制边距的参数</span>
            <span class="token keyword">int</span> qrWidth <span class="token operator">=</span> inputWidth <span class="token operator">+</span> <span class="token punctuation">(</span>quietZone <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> qrHeight <span class="token operator">=</span> inputHeight <span class="token operator">+</span> <span class="token punctuation">(</span>quietZone <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> outputWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> qrWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> outputHeight <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> qrHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> multiple <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>outputWidth <span class="token operator">/</span> qrWidth<span class="token punctuation">,</span> outputHeight <span class="token operator">/</span> qrHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> leftPadding <span class="token operator">=</span> <span class="token punctuation">(</span>outputWidth <span class="token operator">-</span> inputWidth <span class="token operator">*</span> multiple<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> topPadding <span class="token operator">=</span> <span class="token punctuation">(</span>outputHeight <span class="token operator">-</span> inputHeight <span class="token operator">*</span> multiple<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token class-name">BitMatrix</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitMatrix</span><span class="token punctuation">(</span>outputWidth<span class="token punctuation">,</span> outputHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> inputY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> outputY <span class="token operator">=</span> topPadding<span class="token punctuation">;</span> inputY <span class="token operator">&lt;</span> inputHeight<span class="token punctuation">;</span> outputY <span class="token operator">+=</span> multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> inputX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> outputX <span class="token operator">=</span> leftPadding<span class="token punctuation">;</span> inputX <span class="token operator">&lt;</span> inputWidth<span class="token punctuation">;</span> outputX <span class="token operator">+=</span> multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>inputX<span class="token punctuation">,</span> inputY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        output<span class="token punctuation">.</span><span class="token function">setRegion</span><span class="token punctuation">(</span>outputX<span class="token punctuation">,</span> outputY<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token operator">++</span>inputX<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token operator">++</span>inputY<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> output<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-问题原因" tabindex="-1"><a class="header-anchor" href="#_3-问题原因" aria-hidden="true">#</a> 3. 问题原因</h2><p>zxing在renderResult方法中帮我们计算了边框。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//以下两行源码是原始代码中控制边距的参数
    //int qrWidth = inputWidth + (quietZone &lt;&lt; 1);
    //int qrHeight = inputHeight + (quietZone &lt;&lt; 1);
   //以下两行源码是修改后的控制边距的参数
    int qrWidth = inputWidth + 2;
    int qrHeight = inputHeight + 2;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们需要更改，则自行调整qrWidth 以及qrHeight 来设置间距</p><h2 id="_4-解决方案" tabindex="-1"><a class="header-anchor" href="#_4-解决方案" aria-hidden="true">#</a> 4. 解决方案</h2><p>自行复制QRCodeWriter，修改。如我自定义了类MyQRCodeWriter</p><blockquote><p>QRCodeWriter 是final 类不能继承，所以只能新建类了</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>faduit<span class="token punctuation">.</span>report<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>qr</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">BarcodeFormat</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">EncodeHintType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">Writer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span></span><span class="token class-name">WriterException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">BitMatrix</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>decoder<span class="token punctuation">.</span></span><span class="token class-name">ErrorCorrectionLevel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span></span><span class="token class-name">ByteMatrix</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span></span><span class="token class-name">Encoder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>zxing<span class="token punctuation">.</span>qrcode<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span></span><span class="token class-name">QRCode</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zsz
 * <span class="token keyword">@date</span> 2022-05-27
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyQRCodeWriter</span> <span class="token keyword">implements</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">QUIET_ZONE_SIZE</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyQRCodeWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">BitMatrix</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span> format<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> format<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">BitMatrix</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span> contents<span class="token punctuation">,</span> <span class="token class-name">BarcodeFormat</span> format<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> hints<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">WriterException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Found empty contents&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>format <span class="token operator">!=</span> <span class="token class-name">BarcodeFormat</span><span class="token punctuation">.</span><span class="token constant">QR_CODE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Can only encode QR_CODE, but got &quot;</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorCorrectionLevel</span> errorCorrectionLevel <span class="token operator">=</span> <span class="token class-name">ErrorCorrectionLevel<span class="token punctuation">.</span>L</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> quietZone <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hints <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    errorCorrectionLevel <span class="token operator">=</span> <span class="token class-name">ErrorCorrectionLevel</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">ERROR_CORRECTION</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    quietZone <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>hints<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">EncodeHintType</span><span class="token punctuation">.</span><span class="token constant">MARGIN</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token function">renderResult</span><span class="token punctuation">(</span><span class="token class-name">Encoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> errorCorrectionLevel<span class="token punctuation">,</span> hints<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> quietZone<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Requested dimensions are too small: &quot;</span> <span class="token operator">+</span> width <span class="token operator">+</span> <span class="token char">&#39;x&#39;</span> <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BitMatrix</span> <span class="token function">renderResult</span><span class="token punctuation">(</span><span class="token class-name">QRCode</span> code<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> quietZone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ByteMatrix</span> input <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">getMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>input <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> inputWidth <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> inputHeight <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//以下两行源码是原始代码中控制边距的参数</span>
        <span class="token comment">//int qrWidth = inputWidth + (quietZone &lt;&lt; 1);</span>
        <span class="token comment">//int qrHeight = inputHeight + (quietZone &lt;&lt; 1);</span>
        <span class="token comment">//以下两行源码是修改后的控制边距的参数</span>
        <span class="token keyword">int</span> qrWidth <span class="token operator">=</span> inputWidth <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> qrHeight <span class="token operator">=</span> inputHeight <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> outputWidth <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> qrWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> outputHeight <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> qrHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> multiple <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>outputWidth <span class="token operator">/</span> qrWidth<span class="token punctuation">,</span> outputHeight <span class="token operator">/</span> qrHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Padding includes both the quiet zone and the extra white pixels to accommodate the requested</span>
        <span class="token comment">// dimensions. For example, if input is 25x25 the QR will be 33x33 including the quiet zone.</span>
        <span class="token comment">// If the requested size is 200x160, the multiple will be 4, for a QR of 132x132. These will</span>
        <span class="token comment">// handle all the padding from 100x100 (the actual QR) up to 200x160.</span>
        <span class="token keyword">int</span> leftPadding <span class="token operator">=</span> <span class="token punctuation">(</span>outputWidth <span class="token operator">-</span> <span class="token punctuation">(</span>inputWidth <span class="token operator">*</span> multiple<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> topPadding <span class="token operator">=</span> <span class="token punctuation">(</span>outputHeight <span class="token operator">-</span> <span class="token punctuation">(</span>inputHeight <span class="token operator">*</span> multiple<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token class-name">BitMatrix</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitMatrix</span><span class="token punctuation">(</span>outputWidth<span class="token punctuation">,</span> outputHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> inputY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> outputY <span class="token operator">=</span> topPadding<span class="token punctuation">;</span> inputY <span class="token operator">&lt;</span> inputHeight<span class="token punctuation">;</span> inputY<span class="token operator">++</span><span class="token punctuation">,</span> outputY <span class="token operator">+=</span> multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Write the contents of this row of the barcode</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> inputX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> outputX <span class="token operator">=</span> leftPadding<span class="token punctuation">;</span> inputX <span class="token operator">&lt;</span> inputWidth<span class="token punctuation">;</span> inputX<span class="token operator">++</span><span class="token punctuation">,</span> outputX <span class="token operator">+=</span> multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>inputX<span class="token punctuation">,</span> inputY<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    output<span class="token punctuation">.</span><span class="token function">setRegion</span><span class="token punctuation">(</span>outputX<span class="token punctuation">,</span> outputY<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> multiple<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> output<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只改动了边框设置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//以下两行源码是修改后的控制边距的参数</span>
<span class="token keyword">int</span> qrWidth <span class="token operator">=</span> inputWidth <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> qrHeight <span class="token operator">=</span> inputHeight <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候调用自己的类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>      <span class="token class-name">MyQRCodeWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyQRCodeWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 解决中文乱码问题</span>
        <span class="token class-name">String</span> contentCharset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;ISO-8859-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BitMatrix</span> matrix <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>contentCharset<span class="token punctuation">,</span> format<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220527144637643.png" alt="image-20220527144637643" tabindex="0" loading="lazy"><figcaption>image-20220527144637643</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,27),k={href:"https://www.jianshu.com/p/5e44cff150c6",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const s=i("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",k,[e("使用zxing生成二维码去除白边"),o(s)])])])}const h=a(l,[["render",r],["__file","qr-x-zxing-white-lace.html.vue"]]);export{h as default};
