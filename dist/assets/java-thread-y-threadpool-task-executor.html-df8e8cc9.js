import{_ as n,W as s,X as a,a0 as e}from"./framework-f64bc974.js";const t={},o=e(`<h1 id="threadpooltaskexecutor和threadpoolexecutor有何区别" tabindex="-1"><a class="header-anchor" href="#threadpooltaskexecutor和threadpoolexecutor有何区别" aria-hidden="true">#</a> ThreadPoolTaskExecutor和ThreadPoolExecutor有何区别?</h1><h2 id="_1-区别" tabindex="-1"><a class="header-anchor" href="#_1-区别" aria-hidden="true">#</a> 1. 区别</h2><ol><li>所属包不同： <ul><li>ThreadPoolTaskExecutor 在 spring core包中</li><li>ThreadPoolExecutor 是JDK中的JUC</li></ul></li><li><strong>ThreadPoolTaskExecutor 是对ThreadPoolExecutor进行了封装处理</strong></li><li>相比 ThreadPoolExecutor，ThreadPoolTaskExecutor 增加了 submitListenable 方法，该方法返回 ListenableFuture 接口对象。 <ul><li>ListenableFuture 接口对象，增加了线程执行完毕后成功和失败的回调方法。从而避免了 Future 需要以阻塞的方式调用 get，然后再执行成功和失败的方法。</li></ul></li></ol><h2 id="_2-threadpooltaskexecutor-源码" tabindex="-1"><a class="header-anchor" href="#_2-threadpooltaskexecutor-源码" aria-hidden="true">#</a> 2. ThreadPoolTaskExecutor 源码</h2><ol><li>成员变量与构造函数</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutorConfigurationSupport</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncListenableTaskExecutor</span><span class="token punctuation">,</span> <span class="token class-name">SchedulingTaskExecutor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> poolSizeMonitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxPoolSize <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> allowCoreThreadTimeOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">TaskDecorator</span> taskDecorator<span class="token punctuation">;</span> 
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">private</span> <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor<span class="token punctuation">;</span><span class="token comment">//这里就用到了ThreadPoolExecutor</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> decoratedTaskMap<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>decoratedTaskMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentReferenceHashMap</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token class-name">ReferenceType</span><span class="token punctuation">.</span><span class="token constant">WEAK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>设置完配置需要调用initialize方法初始化。最终实例化了ThreadPoolExecutor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">protected</span> <span class="token class-name">ExecutorService</span> <span class="token function">initializeExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createQueue</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskDecorator <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Runnable</span> decorated <span class="token operator">=</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskDecorator<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>decorated <span class="token operator">!=</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>decoratedTaskMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>decorated<span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>decorated<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolSize<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> queue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCoreThreadTimeOut<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            executor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPoolExecutor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-推荐" tabindex="-1"><a class="header-anchor" href="#_3-推荐" aria-hidden="true">#</a> 3. 推荐</h2><p>推荐直接使用spring封装好的 ThreadPoolTaskExecutor ，更加简洁方便一些</p></li></ol>`,7),p=[o];function c(l,u){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","java-thread-y-threadpool-task-executor.html.vue"]]);export{r as default};
