import{_ as a,W as t,X as i,Y as e,Z as r,$ as d,a0 as s,D as o}from"./framework-f64bc974.js";const l={},c=s(`<h1 id="spring-data-jpa使用getone方法报错-method-threw-org-hibernate-lazyinitializationexception" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa使用getone方法报错-method-threw-org-hibernate-lazyinitializationexception" aria-hidden="true">#</a> Spring Data JPA使用getOne方法报错：Method threw &#39;org.hibernate.LazyInitializationException</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>之前项目一直用 jpa的dao.getOne() 都是正常的，但是加入线程池后，程序直接卡主不动。debug 后发现，提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Method threw &#39;org.hibernate.LazyInitializationException&#39; exception. Cannot evaluate com.xxx.xxx._$$_jvst6a8_a.toString()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为什么会出现这个问题呢？</p><h2 id="_2-原因" tabindex="-1"><a class="header-anchor" href="#_2-原因" aria-hidden="true">#</a> 2. 原因</h2><p><strong>getOne 是懒加载</strong>。每次初始化一个实体的关联就会创建一个<strong>临时的session来加载</strong>，每个临时的session都会获取一个<strong>临时的数据库连接</strong>，<strong>开启一个新的事物</strong>。这就导致对底层连接池压力很大，而且事物日志也会被每次flush.</p><p>设想一下：假如我们查询了一个分页list每次查出1000条，这个实体有三个lazy关联对象,那么，恭喜你，你至少需要创建3000个临时session+connection+transaction.</p><h2 id="_3-解决方案" tabindex="-1"><a class="header-anchor" href="#_3-解决方案" aria-hidden="true">#</a> 3. 解决方案</h2><ul><li><p>增加配置</p><p>getOne 是懒加载，需要增加这个配置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方法不太友好，<strong>不建议使用</strong></p></li><li><p>改用findOne 或 findById</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// findOne
Example&lt;MyEntity&gt; example = Example.of(entity);
MyEntity myEntity = riskWarnDao.findOne(example).get();

// findById
MyEntity myEntity = riskWarnDao.findById(idno).get();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,11),h={href:"https://www.itdaan.com/blog/2018/12/19/286dcc4fd95fa33a5e22901e4ecc9832.html",target:"_blank",rel:"noopener noreferrer"};function p(g,u){const n=o("ExternalLinkIcon");return t(),i("div",null,[c,e("p",null,[e("a",h,[r("Spring Data JPA使用getOne方法报错：Method threw 'org.hibernate.LazyInitializationException' exception. Cannot evaluat"),d(n)])])])}const m=a(l,[["render",p],["__file","jpa-y-genone-error.html.vue"]]);export{m as default};
