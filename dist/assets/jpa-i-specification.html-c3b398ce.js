import{_ as e,W as c,X as o,Y as n,Z as s,$ as p,a0 as a,D as l}from"./framework-f64bc974.js";const i={},u=a('<h1 id="spring-data-jpa使用specification复杂查询" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa使用specification复杂查询" aria-hidden="true">#</a> Spring Data JPA使用Specification复杂查询</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1.简介</h2><ul><li>JpaRepository ： <ul><li>拥有：拥有常用的 CURD 方法以及分页方法、字段排序</li></ul></li><li>JpaSpecificationExecutor</li></ul><h2 id="_2-用法" tabindex="-1"><a class="header-anchor" href="#_2-用法" aria-hidden="true">#</a> 2. 用法</h2>',4),k=a(`<li><p>使用方法，让dao接口继承JpaSpecificationExecutor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">,</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>在JpaSpecificationExecutor中有下列方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
   	<span class="token comment">// 查询单个对象</span>
    <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 查询列表</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 查询全部，分页</span>
    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//查询列表</span>
	<span class="token comment">//Sort：排序参数</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">,</span> <span class="token class-name">Sort</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//统计查询</span>
    <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> var1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，Specification 为查询条件，需要自定义我们<strong>自己的Specification实现类,实现 toPredicate 方法</strong></p><ul><li><p>root：查询的根对象（查询的任何属性都可以从根对象中获取）</p></li><li><p>CriteriaQuery：顶层查询对象，自定义查询方式（了解：一般不用）</p></li><li><p>CriteriaBuilder：查询的构造器，封装了很多的查询条件</p></li></ul></li><li><p><strong>自定义查询条件spec</strong></p><ol><li><p>实现Specification接口（提供泛型：查询的对象类型）</p></li><li><p>实现toPredicate方法（构造查询条件）</p></li><li><p>需要借助方法参数中的两个参数</p><ul><li><p>root：获取需要查询的对象属性</p></li><li><p>CriteriaBuilder：构造查询条件的，内部封装了很多的查询条件（模糊匹配，精准匹配）</p></li></ul></li></ol></li>`,3),r=n("p",null,"spec 示例",-1),d=a(`<li><p><strong>自定义findOne单个条件查询</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// 取需要查询的对象属性</span>
			<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;custName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 进行精准的匹配，</span>
			<span class="token comment">// 第一个参数：需要比较的属性（path对象）,第二个参数：当前需要比较的取值</span>
			<span class="token class-name">Predicate</span> predicate <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custName<span class="token punctuation">,</span> <span class="token string">&quot;支付宝&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> predicate<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>自定义findOne多条件查询</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token comment">// 取需要查询的对象属性</span>
   	<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;custName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> custIndustry <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;custIndustry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// 构造第一个查询条件的精确匹配</span>
   	<span class="token class-name">Predicate</span> p1 <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custName<span class="token punctuation">,</span> <span class="token string">&quot;支付宝&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// 构造第二个查询条件的精确匹配</span>
   	<span class="token class-name">Predicate</span> p2 <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>custIndustry<span class="token punctuation">,</span> <span class="token string">&quot;it&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// 将多个查询条件组合到一起</span>
   	<span class="token class-name">Predicate</span> and <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   	<span class="token comment">// cb.or();//以或的形式拼接多个查询条件</span>
   	<span class="token keyword">return</span> and<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Customer</span> customer <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),m=n("p",null,[n("strong",null,"自定义findAll模糊匹配")],-1),v=n("p",null,"前面使用 equal 直接使用path对象（属性），进行比较即可",-1),b={href:"https://link.zhihu.com/?target=http%3A//path.as",target:"_blank",rel:"noopener noreferrer"},g={href:"https://link.zhihu.com/?target=http%3A//cb.like",target:"_blank",rel:"noopener noreferrer"},f={href:"https://link.zhihu.com/?target=http%3A//custName.as",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//构造查询条件</span>
	<span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//查询属性：客户名</span>
			<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;custName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//查询方式：模糊匹配</span>
			<span class="token class-name">Predicate</span> like <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>custName<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;支付%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> like<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span> customer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),y=a(`<li><p><strong>排序查询</strong></p><p>创建排序对象,需要调用构造方法实例化sort对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">,</span><span class="token string">&quot;custId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数：排序的顺序（倒序，正序）</p><p>Sort.Direction.DESC:倒序</p><p>Sort.Direction.ASC ： 升序</p><p>第二个参数：排序的属性名称</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//构造查询条件</span>
	<span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> spec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//查询属性：客户名</span>
			<span class="token class-name">Path</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> custName <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;custName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//查询方式：模糊匹配</span>
			<span class="token class-name">Predicate</span> like <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>custName<span class="token punctuation">.</span><span class="token function">as</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;支付%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> like<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">//添加排序</span>
	<span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">DESC</span><span class="token punctuation">,</span><span class="token string">&quot;custId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>spec<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Customer</span> customer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>分页查询</strong></p><p>Pageable：分页参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分页参数：查询的页码，每页查询的条数</p><p>第一个参数：当前查询的页数（从0开始），第二个参数：每页查询的数量</p><p>分页查询的findAll有两个重载方法</p><p>findAll(Specification,Pageable)：带有条件的分页</p><p>findAll(Pageable)：没有条件的分页</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSpec4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Specification</span> spec <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token comment">//PageRequest对象是Pageable接口的实现类</span>
	<span class="token doc-comment comment">/**
	 * 创建PageRequest的过程中，需要调用他的构造方法传入两个参数
	 *      第一个参数：当前查询的页数（从0开始）
	 *      第二个参数：每页查询的数量
	 */</span>
	<span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//分页查询</span>
	<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">&gt;</span></span> page <span class="token operator">=</span> customerDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        Page&lt;Customer&gt; page = customerDao.findAll(spec, pageable);</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//得到数据集合列表</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到总条数</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getTotalPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得到总页数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,2),S=a(`<h2 id="_3-用法示例" tabindex="-1"><a class="header-anchor" href="#_3-用法示例" aria-hidden="true">#</a> 3. 用法示例</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentService</span> <span class="token keyword">implements</span> <span class="token class-name">IStudentService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IStudentRepository</span> repository<span class="token punctuation">;</span>

    <span class="token comment">//无关代码略</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> studentNumber<span class="token punctuation">,</span><span class="token class-name">String</span> name <span class="token punctuation">,</span><span class="token class-name">String</span> nickName<span class="token punctuation">,</span>
            <span class="token class-name">Date</span> birthday<span class="token punctuation">,</span><span class="token class-name">String</span> courseName<span class="token punctuation">,</span><span class="token keyword">float</span> chineseScore<span class="token punctuation">,</span><span class="token keyword">float</span> mathScore<span class="token punctuation">,</span>
            <span class="token keyword">float</span> englishScore<span class="token punctuation">,</span><span class="token keyword">float</span> performancePoints<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//用于暂时存放查询条件的集合</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Predicate</span><span class="token punctuation">&gt;</span></span> predicatesList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//--------------------------------------------</span>
                <span class="token comment">//查询条件示例</span>
                <span class="token comment">//equal示例</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">Predicate</span> namePredicate <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    predicatesList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>namePredicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//like示例</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>nickName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token class-name">Predicate</span> nickNamePredicate <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;nickName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token char">&#39;%&#39;</span><span class="token operator">+</span>nickName<span class="token operator">+</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    predicatesList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nickNamePredicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//between示例</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>birthday <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Predicate</span> birthdayPredicate <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;birthday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> birthday<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    predicatesList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>birthdayPredicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token comment">//关联表查询示例</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>courseName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span><span class="token class-name">Teacher</span><span class="token punctuation">&gt;</span></span> joinTeacher <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;teachers&quot;</span><span class="token punctuation">,</span><span class="token class-name">JoinType</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> coursePredicate <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>joinTeacher<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;courseName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> courseName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    predicatesList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>coursePredicate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token comment">//复杂条件组合示例</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>chineseScore<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mathScore<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> englishScore<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> performancePoints<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Join</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">,</span><span class="token class-name">Examination</span><span class="token punctuation">&gt;</span></span> joinExam <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;exams&quot;</span><span class="token punctuation">,</span><span class="token class-name">JoinType</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> predicateExamChinese <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>joinExam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;chineseScore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>chineseScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> predicateExamMath <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>joinExam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;mathScore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mathScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> predicateExamEnglish <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>joinExam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;englishScore&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>englishScore<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> predicateExamPerformance <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>joinExam<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;performancePoints&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>performancePoints<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//组合</span>
                    <span class="token class-name">Predicate</span> predicateExam <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>predicateExamChinese<span class="token punctuation">,</span>predicateExamEnglish<span class="token punctuation">,</span>predicateExamMath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Predicate</span> predicateExamAll <span class="token operator">=</span> cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicateExamPerformance<span class="token punctuation">,</span>predicateExam<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    predicatesList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>predicateExamAll<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//--------------------------------------------</span>
                <span class="token comment">//排序示例(先根据学号排序，后根据姓名排序)</span>
                query<span class="token punctuation">.</span><span class="token function">orderBy</span><span class="token punctuation">(</span>cb<span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;studentNumber&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cb<span class="token punctuation">.</span><span class="token function">asc</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//--------------------------------------------</span>
                <span class="token comment">//最终将查询条件拼好然后return</span>
                <span class="token class-name">Predicate</span><span class="token punctuation">[</span><span class="token punctuation">]</span> predicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Predicate</span><span class="token punctuation">[</span>predicatesList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> cb<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicatesList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>predicates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>specification<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,3),w={href:"https://zhuanlan.zhihu.com/p/101564157",target:"_blank",rel:"noopener noreferrer"},P={href:"https://www.jianshu.com/p/659e9715d01d",target:"_blank",rel:"noopener noreferrer"};function q(_,j){const t=l("ExternalLinkIcon");return c(),o("div",null,[u,n("ol",null,[k,n("li",null,[r,n("ol",null,[d,n("li",null,[m,v,n("p",null,[s("但是 gt，lt,ge,le,like 不能直接使用path对象，要根据path对象指定比较的参数类型："),n("a",b,[s("path.as"),p(t)]),s("(类型的字节码对象)，")]),n("p",null,[s("再进行比较："),n("a",g,[s("cb.like"),p(t)]),s("("),n("a",f,[s("custName.as"),p(t)]),s('(String.class), "支付%");')]),h]),y])])]),S,n("p",null,[n("a",w,[s("Spring Data JPA（7）使用Specification进行动态查询"),p(t)])]),n("p",null,[n("a",P,[s("Spring Data JPA使用Specification动态构建多表查询"),p(t)])])])}const C=e(i,[["render",q],["__file","jpa-i-specification.html.vue"]]);export{C as default};
