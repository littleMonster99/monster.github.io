import{_ as a,W as t,X as e,Y as n,Z as o,$ as p,a0 as c,D as i}from"./framework-f64bc974.js";const l={},u=c(`<h1 id="druid源码学习-八-druiddatasource的removeabandoned机制" tabindex="-1"><a class="header-anchor" href="#druid源码学习-八-druiddatasource的removeabandoned机制" aria-hidden="true">#</a> Druid源码学习（八）-DruidDataSource的removeAbandoned机制</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>有关于 Druid 的removeAbandoned机制，在getConnection源码中介绍过。removeAbandoned实际上就是Druid的泄露检测机制。主要的参数有：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>removeAbandoned</td><td>如果连接泄露，是否需要回收泄露的连接，默认false；</td></tr><tr><td>logAbandoned</td><td>如果回收了泄露的连接，是否要打印一条log，默认false；</td></tr><tr><td>removeAbandonedTimeoutMillis</td><td>连接回收的超时时间，默认5分钟；</td></tr></tbody></table><p>removeAbandoned作为开启连接泄露检测机制的开关，默认为false,当为true的时候，在随着DestroyTask的调用频率定期检测。 在DestroyTask的run方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">shrink</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> keepAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRemoveAbandoned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">removeAbandoned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当开启连接泄露检测机制之后，会定期检测连接是否触发超时时间，如果触发则关闭连接。凡是get之后被使用的连接都放置在activeConnections中。 之后遍历activeConnections，对连接进行判断，如果触发超时时间，则close。</p><h2 id="_2-removeabandoned-源码" tabindex="-1"><a class="header-anchor" href="#_2-removeabandoned-源码" aria-hidden="true">#</a> 2. removeAbandoned 源码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义一个abandonedList来存放符合超时时间的连接。</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DruidPooledConnection</span><span class="token punctuation">&gt;</span></span> abandonedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DruidPooledConnection</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//加锁</span>
activeConnectionLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
     <span class="token comment">//通过迭代器遍历activeConnections</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DruidPooledConnection</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> activeConnections<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取到连接</span>
        <span class="token class-name">DruidPooledConnection</span> pooledConnection <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//如果连级为Running状态，说明sql语句正在执行，则跳过当前连接</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pooledConnection<span class="token punctuation">.</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//计算超时时间 默认值为5分钟</span>
        <span class="token keyword">long</span> timeMillis <span class="token operator">=</span> <span class="token punctuation">(</span>currrentNanos <span class="token operator">-</span> pooledConnection<span class="token punctuation">.</span><span class="token function">getConnectedTimeNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//如果触发超时：</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&gt;=</span> removeAbandonedTimeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">//从iter删除该连接</span>
            iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">//关闭setTraceEnable</span>
            pooledConnection<span class="token punctuation">.</span><span class="token function">setTraceEnable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//添加到abandonedList</span>
            abandonedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pooledConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
<span class="token comment">//解锁</span>
    activeConnectionLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将满足超时条件的连接放置到abandonedList中。 如果abandonedList不为空，则要对abandonedList进行遍历，然后关闭这些连接：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义锁</span>
<span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> pooledConnection<span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">//如果连接为disiable状态 说明已经不可用 直接跳过</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pooledConnection<span class="token punctuation">.</span><span class="token function">isDisable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">//解锁</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//关闭连接</span>
<span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>pooledConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置abandond状态</span>
pooledConnection<span class="token punctuation">.</span><span class="token function">abandond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//增加计数器</span>
removeAbandonedCount<span class="token operator">++</span><span class="token punctuation">;</span>
removeCount<span class="token operator">++</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后进行日志处理。 打印出warn的日志之后，方法执行完毕。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,13),d={href:"https://blog.csdn.net/dhaibo1986/article/details/121384904?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const s=i("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",d,[o("Druid源码阅读8-DruidDataSource的removeAbandoned机制"),p(s)])])])}const b=a(l,[["render",r],["__file","dbcp-y-druid-source-removeAbandoned.html.vue"]]);export{b as default};
