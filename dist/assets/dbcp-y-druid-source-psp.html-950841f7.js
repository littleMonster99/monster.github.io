import{_ as s,W as e,X as t,Y as n,Z as p,$ as o,a0 as c,D as l}from"./framework-f64bc974.js";const i={},r=c(`<h1 id="druid源码学习-六-preparedstatementpool源码及使用场景分析" tabindex="-1"><a class="header-anchor" href="#druid源码学习-六-preparedstatementpool源码及使用场景分析" aria-hidden="true">#</a> Druid源码学习（六）-PreparedStatementPool源码及使用场景分析</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>在阅读DruidDataSource源码的过程中，发现DruidConnectionHolder有个特别的属性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PreparedStatementPool statementPool。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据经验可知，这是DruidPreparedStatement进行缓存的cache。我们在使用PreparedStatement的过程中，由于PreparedStatement对sql语句的解析和参数的注入是分开的， 因此，加入cache之后，可以在同一个连接上，对相同sql,不同参数的请求进行复用。</p><h2 id="_2-开启参数" tabindex="-1"><a class="header-anchor" href="#_2-开启参数" aria-hidden="true">#</a> 2. 开启参数</h2><p>如果要使用psCache，那么需要配置druid.maxPoolPreparedStatementPerConnectionSize大于0。 在DruidDataSource源码的configFromPropety方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> property <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;druid.maxPoolPreparedStatementPerConnectionSize&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>property <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> property<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//set 配置的参数</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMaxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;illegal property &#39;druid.maxPoolPreparedStatementPerConnectionSize&#39;&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过setMaxPoolPreparedStatementPerConnectionSize方法，当配置的参数大于0的时候，修改poolPreparedStatements为true。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMaxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxPoolPreparedStatementPerConnectionSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//maxPoolPreparedStatementPerConnectionSize 大于0，则设置poolPreparedStatements为true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxPoolPreparedStatementPerConnectionSize <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>poolPreparedStatements <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>poolPreparedStatements <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>maxPoolPreparedStatementPerConnectionSize <span class="token operator">=</span> maxPoolPreparedStatementPerConnectionSize<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后通过判断这个变量的状态来确定是否创建缓存。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPoolPreparedStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> poolPreparedStatements<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-cache创建" tabindex="-1"><a class="header-anchor" href="#_3-cache创建" aria-hidden="true">#</a> 3. cache创建</h2><p>在开启参数打开之后，使用prepareStatement的过程中，创建cache。 在DruidPooledConnection的prepareStatement方法中有如下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> poolPreparedStatements <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">isPoolPreparedStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//如果开启了psCache</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>poolPreparedStatements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stmtHolder <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getStatementPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而getStatementPool方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">PreparedStatementPool</span> <span class="token function">getStatementPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>statementPool <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        statementPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PreparedStatementPool</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> statementPool<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用getStatementPool方法的时候，如果开启了statementPool，此时就会对这个cache进行初始化。 初始化方法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token class-name">PreparedStatementPool</span><span class="token punctuation">(</span><span class="token class-name">DruidConnectionHolder</span> holder<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> initCapacity <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMaxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initCapacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            initCapacity <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span>initCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时可以发现，maxPoolPreparedStatementPerConnectionSize的配置就是LRUCache初始的initCapacity。 如果该参数不配置，默认的值为10:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>protected volatile int  maxPoolPreparedStatementPerConnectionSize = 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也就是说，如果不配置druid.maxPoolPreparedStatementPerConnectionSize，那么系统将默认开启psCache。默认的长度为10。</p><h2 id="_4-pscache结构" tabindex="-1"><a class="header-anchor" href="#_4-pscache结构" aria-hidden="true">#</a> 4. psCache结构</h2><p>psCache的构成非常简单，其内部就一个LRUCache的map。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PreparedStatementPool</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Log</span> <span class="token constant">LOG</span> <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatementPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//cache结构</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LRUCache</span> map<span class="token punctuation">;</span>
	<span class="token comment">//指向dataSource的指针</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DruidAbstractDataSource</span> dataSource<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LRUCache的结构： LRUCache本质上是一个LinkedHashMap，学习过LinkedHashMap源码就会知道，实际上这是一个非常适合LRU缓存的数据结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreparedStatementKey</span><span class="token punctuation">,</span> <span class="token class-name">PreparedStatementHolder</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//重写了removeEldestEntry方法</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PreparedStatementKey</span><span class="token punctuation">,</span> <span class="token class-name">PreparedStatementHolder</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//确认remove状态</span>
        <span class="token keyword">boolean</span> remove <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> dataSource<span class="token punctuation">.</span><span class="token function">getMaxPoolPreparedStatementPerConnectionSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭statement</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>remove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">closeRemovedStatement</span><span class="token punctuation">(</span>eldest<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> remove<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重写removeEldestEntry方法的目的是在LinkedHashMap中调用remove移除Entry的时候，对缓存的statement进行关闭。这样就能完成对statement的回收。 需要注意的是，在使用LRUCache的时候，并没有加锁，也就意味着LRUCache是非线程安全的。实际上由于cache对连接生效，一个connection就会创建一个LRUCache。 而连接又是单线程操作，因此不会存在线程安全问题。 当然，对于CRUCache中PreparedStatement的回收还存在于多个场景中。</p><h2 id="_5-entry中的preparedstatementkey" tabindex="-1"><a class="header-anchor" href="#_5-entry中的preparedstatementkey" aria-hidden="true">#</a> 5. Entry中的PreparedStatementKey</h2><p>在Entry中，key的类型PreparedStatementKey,value的类型为PreparedStatementHolder。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">PreparedStatementKey</span> <span class="token punctuation">{</span>
   <span class="token comment">//sql语句</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span>     sql<span class="token punctuation">;</span>
    <span class="token comment">//catlog name</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span>     catalog<span class="token punctuation">;</span>
    <span class="token comment">//method  参见MethodType枚举类</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">MethodType</span> methodType<span class="token punctuation">;</span>
    <span class="token comment">//返回值类型</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span>           resultSetType<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span>           resultSetConcurrency<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span>           resultSetHoldability<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span>           autoGeneratedKeys<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        columnIndexes<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>     columnNames<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，PreparedStatementKey主要是来标识两个要执行的sql语句是否为同一个PreparedStatement。 这个生成hashcode的方法也非常特别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sql <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> sql<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>catalog <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> catalog<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>methodType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> methodType<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> resultSetConcurrency<span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> resultSetHoldability<span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> resultSetType<span class="token punctuation">;</span>

    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> autoGeneratedKeys<span class="token punctuation">;</span>

    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>columnIndexes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>columnNames<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要确认两个语句是否可以为同一个statement,那么需要PreparedStatementKey中的全部字段都相同。</p><h2 id="_6-entry中的preparedstatementholder" tabindex="-1"><a class="header-anchor" href="#_6-entry中的preparedstatementholder" aria-hidden="true">#</a> 6.Entry中的PreparedStatementHolder</h2><p>PreparedStatementHolder是一个对PreparedStatement的扩展类。 其属性如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public final PreparedStatementKey key;
public final PreparedStatement    statement;
private int                       hitCount                 = 0;

//fetch峰值
private int                       fetchRowPeak             = -1;

private int                       defaultRowPrefetch       = -1;
private int                       rowPrefetch              = -1;

private boolean                   enterOracleImplicitCache = false;

private int                       inUseCount               = 0;
private boolean                   pooling                  = false;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类主要扩展了部分统计参数。当调用PreparedStatement的时候，会调用这些参数对应的统计方法。 通过源码可以发现，作者特别喜欢通过Holder来对java sql包提供的对象进行扩展。当然这也与druid连接池的定位是分不开的，druid最大的有点就是其监控功能非常完善。这些监控中统计的数据就是通过这些Holder来实现的。 如果我们在业务系统的开发过程中需要增加一些监控的参数，也可以参考Druid的实现。</p><h2 id="_7-总结" tabindex="-1"><a class="header-anchor" href="#_7-总结" aria-hidden="true">#</a> 7. 总结</h2><p>关于PreparedStatementCache的使用，在Druid中实际上cache是Connection级的。每个连接一个Cache。 一般在mysql中不建议使用这个Cache。mysql不支持游标。 在分库分表的场景下，会导致大量的内存占用，也不建议使用。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,41),u={href:"https://blog.csdn.net/dhaibo1986/article/details/121342475?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const a=l("ExternalLinkIcon");return e(),t("div",null,[r,n("p",null,[n("a",u,[p("Druid源码阅读6-PreparedStatementPool源码及使用场景分析"),o(a)])])])}const b=s(i,[["render",d],["__file","dbcp-y-druid-source-psp.html.vue"]]);export{b as default};
