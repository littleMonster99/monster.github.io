import{_ as a,W as t,X as p,Y as n,$ as e,a0 as o,D as c}from"./framework-f64bc974.js";const l={},u=o(`<h1 id="mybatis详解-插件之分页机制" tabindex="-1"><a class="header-anchor" href="#mybatis详解-插件之分页机制" aria-hidden="true">#</a> MyBatis详解 - 插件之分页机制</h1><blockquote><p>Mybatis的分页功能很弱，它是基于内存的分页（查出所有记录再按偏移量和limit取结果），在大数据量的情况下这样的分页基本上是没有用的。本文基于插件，通过拦截StatementHandler重写sql语句，实现数据库的物理分页。</p></blockquote><h2 id="_1-准备" tabindex="-1"><a class="header-anchor" href="#_1-准备" aria-hidden="true">#</a> 1. 准备</h2><h3 id="_1-1-为什么在statementhandler拦截" tabindex="-1"><a class="header-anchor" href="#_1-1-为什么在statementhandler拦截" aria-hidden="true">#</a> 1.1 为什么在StatementHandler拦截</h3><p>在前面章节介绍了一次sqlsession的完整执行过程，从中可以知道sql的解析是在StatementHandler里完成的，所以为了重写sql需要拦截StatementHandler。</p><h3 id="_1-2-metaobject简介" tabindex="-1"><a class="header-anchor" href="#_1-2-metaobject简介" aria-hidden="true">#</a> 1.2 MetaObject简介</h3><p>在实现里大量使用了MetaObject这个对象，因此有必要先介绍下它。MetaObject是Mybatis提供的一个的工具类，通过它包装一个对象后可以获取或设置该对象的原本不可访问的属性（比如那些私有属性）。它有个三个重要方法经常用到：</p><ul><li>MetaObject forObject(Object object,ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory) 用于包装对象；</li><li>Object getValue(String name) 用于获取属性的值（支持OGNL的方法）；</li><li>void setValue(String name, Object value) 用于设置属性的值（支持OGNL的方法）；</li></ul><h2 id="_2-拦截器签名" tabindex="-1"><a class="header-anchor" href="#_2-拦截器签名" aria-hidden="true">#</a> 2. 拦截器签名</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span><span class="token class-name">StatementHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;prepare&quot;</span><span class="token punctuation">,</span> args <span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">Connection</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>  
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从签名里可以看出，要拦截的目标类型是StatementHandler（注意：type只能配置成接口类型），拦截的方法是名称为prepare参数为Connection类型的方法。</p><h2 id="_3-intercept实现" tabindex="-1"><a class="header-anchor" href="#_3-intercept实现" aria-hidden="true">#</a> 3. intercept实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>  
     <span class="token class-name">StatementHandler</span> statementHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token class-name">MetaObject</span> metaStatementHandler <span class="token operator">=</span> <span class="token class-name">MetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>statementHandler<span class="token punctuation">,</span>  
     <span class="token constant">DEFAULT_OBJECT_FACTORY</span><span class="token punctuation">,</span> <span class="token constant">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token comment">// 分离代理对象链(由于目标类可能被多个拦截器拦截，从而形成多次代理，通过下面的两次循环  </span>
     <span class="token comment">// 可以分离出最原始的的目标类)  </span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span>metaStatementHandler<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
         <span class="token class-name">Object</span> object <span class="token operator">=</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         metaStatementHandler <span class="token operator">=</span> <span class="token class-name">MetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token constant">DEFAULT_OBJECT_FACTORY</span><span class="token punctuation">,</span>   
         <span class="token constant">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token punctuation">}</span>  
     <span class="token comment">// 分离最后一个代理对象的目标类  </span>
     <span class="token keyword">while</span> <span class="token punctuation">(</span>metaStatementHandler<span class="token punctuation">.</span><span class="token function">hasGetter</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
         <span class="token class-name">Object</span> object <span class="token operator">=</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         metaStatementHandler <span class="token operator">=</span> <span class="token class-name">MetaObject</span><span class="token punctuation">.</span><span class="token function">forObject</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token constant">DEFAULT_OBJECT_FACTORY</span><span class="token punctuation">,</span>   
         <span class="token constant">DEFAULT_OBJECT_WRAPPER_FACTORY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token punctuation">}</span>  
     <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Configuration</span><span class="token punctuation">)</span> metaStatementHandler<span class="token punctuation">.</span>  
     <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.configuration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     dialect <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;dialect&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> dialect <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dialect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
         logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Property dialect is not setted,use default &#39;mysql&#39; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         dialect <span class="token operator">=</span> defaultDialect<span class="token punctuation">;</span>  
     <span class="token punctuation">}</span>  
     pageSqlId <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;pageSqlId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> pageSqlId <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>pageSqlId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
         logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Property pageSqlId is not setted,use default &#39;.*Page$&#39; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         pageSqlId <span class="token operator">=</span> defaultPageSqlId<span class="token punctuation">;</span>  
     <span class="token punctuation">}</span>  
     <span class="token class-name">MappedStatement</span> mappedStatement <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MappedStatement</span><span class="token punctuation">)</span>   
     metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.mappedStatement&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
     <span class="token comment">// 只重写需要分页的sql语句。通过MappedStatement的ID匹配，默认重写以Page结尾的  </span>
     <span class="token comment">//  MappedStatement的sql  </span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>pageSqlId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
         <span class="token class-name">BoundSql</span> boundSql <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BoundSql</span><span class="token punctuation">)</span> metaStatementHandler<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.boundSql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token class-name">Object</span> parameterObject <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token keyword">if</span> <span class="token punctuation">(</span>parameterObject <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
             <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;parameterObject is null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
             <span class="token comment">// 分页参数作为参数对象parameterObject的一个属性  </span>
             <span class="token class-name">PageParameter</span> page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PageParameter</span><span class="token punctuation">)</span> metaStatementHandler  
                     <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.boundSql.parameterObject.page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
             <span class="token class-name">String</span> sql <span class="token operator">=</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
             <span class="token comment">// 重写sql  </span>
             <span class="token class-name">String</span> pageSql <span class="token operator">=</span> <span class="token function">buildPageSql</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>  
             metaStatementHandler<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.boundSql.sql&quot;</span><span class="token punctuation">,</span> pageSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
             <span class="token comment">// 采用物理分页后，就不需要mybatis的内存分页了，所以重置下面的两个参数  </span>
             metaStatementHandler<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.rowBounds.offset&quot;</span><span class="token punctuation">,</span>   
             <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">NO_ROW_OFFSET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
             metaStatementHandler<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">&quot;delegate.rowBounds.limit&quot;</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token constant">NO_ROW_LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
             <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span><span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
             <span class="token comment">// 重设分页参数里的总页数等  </span>
             <span class="token function">setPageParameter</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> connection<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> boundSql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token punctuation">}</span>  
     <span class="token punctuation">}</span>  
     <span class="token comment">// 将执行权交给下一个拦截器  </span>
     <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StatementHandler的默认实现类是RoutingStatementHandler，因此拦截的实际对象是它。RoutingStatementHandler的主要功能是分发，它根据配置Statement类型创建真正执行数据库操作的StatementHandler，并将其保存到delegate属性里。由于delegate是一个私有属性并且没有提供访问它的方法，因此需要借助MetaObject的帮忙。通过MetaObject的封装后我们可以轻易的获得想要的属性。</p><p>在上面的方法里有个两个循环，通过他们可以分离出原始的RoutingStatementHandler（而不是代理对象）。</p><p>前面提到，签名里配置的要拦截的目标类型是StatementHandler拦截的方法是名称为prepare参数为Connection类型的方法，而这个方法是每次数据库访问都要执行的。因为我是通过重写sql的方式实现分页，为了不影响其他sql（update或不需要分页的query），我采用了通过ID匹配的方式过滤。默认的过滤方式只对id以Page结尾的进行拦截（注意区分大小写），如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>queryUserByPage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDto<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDto<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    <span class="token cdata">&lt;![CDATA[ 
    select * from t_user t where t.username = #{username} 
    ]]&gt;</span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，也可以自定义拦截模式，在mybatis的配置文件里加入以下配置项：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dialect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mysql<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pageSqlId<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.*Page$<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，属性dialect指示数据库类型，目前只支持mysql和oracle两种数据库。其中，属性pageSqlId指示拦截的规则，以正则方式匹配。</p><h2 id="_4-sql重写" tabindex="-1"><a class="header-anchor" href="#_4-sql重写" aria-hidden="true">#</a> 4. sql重写</h2><p>sql重写其实在原始的sql语句上加入分页的参数，目前支持mysql和oracle两种数据库的分页。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildPageSql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">PageParameter</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>page <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token class-name">StringBuilder</span> pageSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;mysql&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dialect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            pageSql <span class="token operator">=</span> <span class="token function">buildPageSqlForMysql</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;oracle&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>dialect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            pageSql <span class="token operator">=</span> <span class="token function">buildPageSqlForOracle</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
            <span class="token keyword">return</span> sql<span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> pageSql<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> sql<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>mysql的分页实现</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">buildPageSqlForMysql</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">PageParameter</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">StringBuilder</span> pageSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> beginrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; limit &quot;</span> <span class="token operator">+</span> beginrow <span class="token operator">+</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">+</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> pageSql<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>oracle的分页实现</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">StringBuilder</span> <span class="token function">buildPageSqlForOracle</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">PageParameter</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token class-name">StringBuilder</span> pageSql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> beginrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token class-name">String</span> endrow <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getCurrentPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;select * from ( select temp.*, rownum row_id from ( &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; ) temp where rownum &lt;= &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>endrow<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    pageSql<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;) where row_id &gt; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>beginrow<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> pageSql<span class="token punctuation">;</span>  
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-分页参数重写" tabindex="-1"><a class="header-anchor" href="#_5-分页参数重写" aria-hidden="true">#</a> 5. 分页参数重写</h2><p>有时候会有这种需求，就是不但要查出指定页的结果，还需要知道总的记录数和页数。我通过重写分页参数的方式提供了一种解决方案：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 
 * 从数据库里查询总的记录数并计算总页数，回写进分页参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">PageParameter</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>,这样调用  
 * 者就可用通过 分页参数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token class-name">PageParameter</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>获得相关信息。 
 *  
 * <span class="token keyword">@param</span> <span class="token parameter">sql</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">connection</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">mappedStatement</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">boundSql</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">page</span> 
 */</span>  
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setPageParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span>  
        <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">,</span> <span class="token class-name">PageParameter</span> page<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 记录总记录数  </span>
    <span class="token class-name">String</span> countSql <span class="token operator">=</span> <span class="token string">&quot;select count(0) from (&quot;</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">&quot;) as total&quot;</span><span class="token punctuation">;</span>  
    <span class="token class-name">PreparedStatement</span> countStmt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
    <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  
    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        countStmt <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>countSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token class-name">BoundSql</span> countBS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoundSql</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> countSql<span class="token punctuation">,</span>  
                boundSql<span class="token punctuation">.</span><span class="token function">getParameterMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token function">setParameters</span><span class="token punctuation">(</span>countStmt<span class="token punctuation">,</span> mappedStatement<span class="token punctuation">,</span> countBS<span class="token punctuation">,</span> boundSql<span class="token punctuation">.</span><span class="token function">getParameterObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        rs <span class="token operator">=</span> countStmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">int</span> totalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            totalCount <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        page<span class="token punctuation">.</span><span class="token function">setTotalCount</span><span class="token punctuation">(</span>totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">int</span> totalPage <span class="token operator">=</span> totalCount <span class="token operator">/</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>totalCount <span class="token operator">%</span> page<span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        page<span class="token punctuation">.</span><span class="token function">setTotalPage</span><span class="token punctuation">(</span>totalPage<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Ignore this exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Ignore this exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">try</span> <span class="token punctuation">{</span>  
            countStmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Ignore this exception&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>  
  
<span class="token doc-comment comment">/** 
 * 对SQL参数(?)设值 
 *  
 * <span class="token keyword">@param</span> <span class="token parameter">ps</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">mappedStatement</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">boundSql</span> 
 * <span class="token keyword">@param</span> <span class="token parameter">parameterObject</span> 
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span> 
 */</span>  
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setParameters</span><span class="token punctuation">(</span><span class="token class-name">PreparedStatement</span> ps<span class="token punctuation">,</span> <span class="token class-name">MappedStatement</span> mappedStatement<span class="token punctuation">,</span> <span class="token class-name">BoundSql</span> boundSql<span class="token punctuation">,</span>  
        <span class="token class-name">Object</span> parameterObject<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>  
    <span class="token class-name">ParameterHandler</span> parameterHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParameterHandler</span><span class="token punctuation">(</span>mappedStatement<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    parameterHandler<span class="token punctuation">.</span><span class="token function">setParameters</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-plugin实现" tabindex="-1"><a class="header-anchor" href="#_6-plugin实现" aria-hidden="true">#</a> 6. plugin实现</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
    <span class="token comment">// 当目标类是StatementHandler类型时，才包装目标类，否者直接返回目标本身,减少目标被代理的  </span>
    <span class="token comment">// 次数  </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">StatementHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,33),i={href:"https://pdai.tech/md/framework/orm-mybatis/mybatis-y-plugin-page.html",target:"_blank",rel:"noopener noreferrer"},k=n("strong",null,"MyBatis详解 - 插件之分页机制",-1);function r(d,m){const s=c("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",i,[k,e(s)])])])}const g=a(l,[["render",r],["__file","mybatis-y-plugin-page.html.vue"]]);export{g as default};
