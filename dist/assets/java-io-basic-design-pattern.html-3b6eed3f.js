const t=JSON.parse('{"key":"v-dd6781f0","path":"/java/io/java-io-basic-design-pattern.html","title":"Java IO - 设计模式(装饰者模式)","lang":"zh-CN","frontmatter":{"order":30,"category":["Java","IO"],"description":"Java I/O 使用了装饰者模式来实现。 1. 装饰者模式 请参考装饰者模式详解 (https://pdai.tech/md/dev-spec/pattern/12_decorator.html) 装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而...","head":[["meta",{"property":"og:url","content":"http://www.mr-monster.site/java/io/java-io-basic-design-pattern.html"}],["meta",{"property":"og:site_name","content":"Java学习笔记"}],["meta",{"property":"og:title","content":"Java IO - 设计模式(装饰者模式)"}],["meta",{"property":"og:description","content":"Java I/O 使用了装饰者模式来实现。 1. 装饰者模式 请参考装饰者模式详解 (https://pdai.tech/md/dev-spec/pattern/12_decorator.html) 装饰者(Decorator)和具体组件(ConcreteComponent)都继承自组件(Component)，具体组件的方法实现不需要依赖于其它对象，而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-30T07:30:48.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-30T07:30:48.000Z"}]]},"headers":[{"level":2,"title":"1. 装饰者模式","slug":"_1-装饰者模式","link":"#_1-装饰者模式","children":[]},{"level":2,"title":"2. IO 装饰者模式","slug":"_2-io-装饰者模式","link":"#_2-io-装饰者模式","children":[]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1680161448000,"updatedTime":1680161448000,"contributors":[{"name":"fanweihua","email":"littlemonster163@163.com","commits":1}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"java/io/java-io-basic-design-pattern.md","localizedDate":"2023年3月30日","autoDesc":true}');export{t as data};
