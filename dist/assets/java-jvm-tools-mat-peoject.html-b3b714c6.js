import{_ as i,W as n,X as t,Y as a,Z as o,$ as r,a0 as s,D as g}from"./framework-f64bc974.js";const l={},c=s(`<h1 id="记一次mat分析线上项目过程" tabindex="-1"><a class="header-anchor" href="#记一次mat分析线上项目过程" aria-hidden="true">#</a> 记一次MAT分析线上项目过程</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>前段时间接手了一个项目，正常运行都没有问题。但是<strong>运行个几天就会OOM异常</strong>，导致服务不可用。我们首先第一个想到的就是该项目内存泄漏导致，但是项目本身已经比较庞大，要找到一个内存泄漏的点，还是比较难得。</p><p>所以我们使用MAT来分析线上项目的运行情况</p><h2 id="_2-jmap-生成堆转储快照" tabindex="-1"><a class="header-anchor" href="#_2-jmap-生成堆转储快照" aria-hidden="true">#</a> 2. <code>jmap</code>:生成堆转储快照</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>jmap -dump:format=b,file=./heap.hprof 19012
Dumping heap to /home/ftpuser/services/mywebsocket/heap.hprof ...
Heap dump file created
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>19012 是进程号</p><p>我们将heap.hprof 导出到我们本地，使用MAT来分析</p><h2 id="_3-mat分析" tabindex="-1"><a class="header-anchor" href="#_3-mat分析" aria-hidden="true">#</a> 3. MAT分析</h2><h3 id="_3-1-查看内存泄漏疑点报告" tabindex="-1"><a class="header-anchor" href="#_3-1-查看内存泄漏疑点报告" aria-hidden="true">#</a> 3.1 查看内存泄漏疑点报告</h3><p>这是最简单有效的方式，我们根据报告的提示来进行分析</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107232248818.png" alt="image-20200107232248818" tabindex="0" loading="lazy"><figcaption>image-20200107232248818</figcaption></figure><p>我们点开报告得到</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107232335036.png" alt="image-20200107232335036" tabindex="0" loading="lazy"><figcaption>image-20200107232335036</figcaption></figure><p>我们根据报告得知，有个对象已经占用了44.4 MB的内存，他来源于<strong>ConcurrentHashMap$Node[]</strong></p><h3 id="_3-2-查看histogram" tabindex="-1"><a class="header-anchor" href="#_3-2-查看histogram" aria-hidden="true">#</a> 3.2 查看Histogram</h3><p>通过查看<strong>Histogram</strong>，列出内存中的对象情况（个数，大小）</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107233119349.png" alt="image-20200107233119349" tabindex="0" loading="lazy"><figcaption>image-20200107233119349</figcaption></figure><ul><li><p><strong>Class Name</strong> ： 类名称，java类名</p></li><li><p>**Objects **： 类的对象的数量，这个对象被创建了多少个</p></li><li><p><strong>Shallow Heap ：一个对象内存的消耗大小，不包含对其他对象的引用</strong></p></li><li><p><strong>Retained Heap ：是shallow Heap的总和，也就是该对象被GC之后所能回收到内存的总和</strong></p></li></ul><h4 id="_3-2-1-通过正则查找自己的类" tabindex="-1"><a class="header-anchor" href="#_3-2-1-通过正则查找自己的类" aria-hidden="true">#</a> 3.2.1 通过正则查找自己的类</h4><p>这儿借助工具提供的regex正则搜索一下我们自己的类，排序后看看哪些相对是占用比较大的。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107233400178.png" alt="image-20200107233400178" tabindex="0" loading="lazy"><figcaption>image-20200107233400178</figcaption></figure><p>我们可以看出内存泄漏是有EsscWebSocket开始的</p><h3 id="_3-3-查看dominator-tree" tabindex="-1"><a class="header-anchor" href="#_3-3-查看dominator-tree" aria-hidden="true">#</a> 3.3 查看Dominator Tree</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107233826983.png" alt="image-20200107233826983" tabindex="0" loading="lazy"><figcaption>image-20200107233826983</figcaption></figure><h3 id="_3-4-top-consumers" tabindex="-1"><a class="header-anchor" href="#_3-4-top-consumers" aria-hidden="true">#</a> 3.4 Top consumers</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107233905138.png" alt="image-20200107233905138" tabindex="0" loading="lazy"><figcaption>image-20200107233905138</figcaption></figure><p><strong>这张图展示的是占用内存比较多的****对象的分布，下面是具体的一些类和占用。</strong></p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20200107234011953.png" alt="image-20200107234011953" tabindex="0" loading="lazy"><figcaption>image-20200107234011953</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,30),m={href:"https://www.cnblogs.com/AloneSword/p/3821569.html",target:"_blank",rel:"noopener noreferrer"};function d(p,h){const e=g("ExternalLinkIcon");return n(),t("div",null,[c,a("p",null,[a("a",m,[o("Java程序内存分析：使用mat工具分析内存占用"),r(e)])])])}const u=i(l,[["render",d],["__file","java-jvm-tools-mat-peoject.html.vue"]]);export{u as default};
