import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,D as l}from"./framework-f64bc974.js";const i={},u=n("h1",{id:"定时任务-springschedule实现方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#定时任务-springschedule实现方式","aria-hidden":"true"},"#"),s(" 定时任务 - SpringSchedule实现方式")],-1),k=n("blockquote",null,[n("p",null,"前文我们介绍了Timer和ScheduledExecutorService是JDK内置的定时任务方案以及Netty内部基于时间轮实现的HashedWheelTimer；而主流的SpringBoot集成方案有两种，一种是Spring Sechedule, 另一种是Spring集成Quartz； 本文主要介绍Spring Schedule实现方式。")],-1),d=n("h2",{id:"_1-准备知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-准备知识点","aria-hidden":"true"},"#"),s(" 1. 准备知识点")],-1),r={href:"https://pdai.tech/md/spring/spring-x-framework-ioc-source-3.html",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"_1-1-什么是cron表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-什么是cron表达式","aria-hidden":"true"},"#"),s(" 1.1 什么是cron表达式")],-1),m=n("p",null,"定时任务和CRON表达式在开发中使用也非常广泛；在学习时，总体上理解，对常用的知悉，开发时可以快速查询使用即可。",-1),b=n("p",null,[n("em",null,"相关文章")],-1),g={href:"https://pdai.tech/md/develop/cron/dev-cron-x-usage.html",target:"_blank",rel:"noopener noreferrer"},h=n("ul",null,[n("li",null,"定时任务和CRON表达式在开发中使用也非常广泛，本文整理了CRON表达式和常见使用例子")],-1),f={href:"https://pdai.tech/md/develop/cron/dev-cron-x-tools.html",target:"_blank",rel:"noopener noreferrer"},y=n("ul",null,[n("li",null,"本文主要总结常用的在线CRON生成和校验工具，从而高效的写出正确的表达式")],-1),w=e(`<h2 id="_2-实现案例" tabindex="-1"><a class="header-anchor" href="#_2-实现案例" aria-hidden="true">#</a> 2. 实现案例</h2><blockquote><p>SpringTask封装的比较好，使用非常简单。</p></blockquote><h3 id="_2-1-enablescheduling-scheduled" tabindex="-1"><a class="header-anchor" href="#_2-1-enablescheduling-scheduled" aria-hidden="true">#</a> 2.1 @EnableScheduling+@Scheduled</h3><ul><li><strong>通过@EnableScheduling启用定时任务，@Scheduled定义任务</strong></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableScheduling</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleDemo</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 每隔1分钟执行一次。
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runScheduleFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;runScheduleFixedRate: current DateTime, {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 每个整点小时执行一次。
     */</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0 0 */1 * * ?&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runScheduleCron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;runScheduleCron: current DateTime, {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>@Scheduled所支持的参数</strong>：</li></ul><ol><li><code>cron</code>：cron表达式，指定任务在特定时间执行；</li><li><code>fixedDelay</code>：表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms；</li><li><code>fixedDelayString</code>：与fixedDelay含义一样，只是参数类型变为String；</li><li><code>fixedRate</code>：表示按一定的频率执行任务，参数类型为long，单位ms；</li><li><code>fixedRateString</code>: 与fixedRate的含义一样，只是将参数类型变为String；</li><li><code>initialDelay</code>：表示延迟多久再第一次执行任务，参数类型为long，单位ms；</li><li><code>initialDelayString</code>：与initialDelay的含义一样，只是将参数类型变为String；</li><li><code>zone</code>：时区，默认为当前时区，一般没有用到。</li></ol><h2 id="_3-进一步理解" tabindex="-1"><a class="header-anchor" href="#_3-进一步理解" aria-hidden="true">#</a> 3. 进一步理解</h2><blockquote><p>我们再通过一些问题来帮助你更深入理解SpringTask实现方式。</p></blockquote><h3 id="_3-1-使用spring-schedule要注意什么" tabindex="-1"><a class="header-anchor" href="#_3-1-使用spring-schedule要注意什么" aria-hidden="true">#</a> 3.1 使用Spring Schedule要注意什么？</h3><ul><li><strong>关于异常处理</strong></li></ul><p>建议自行处理异常</p><ul><li><strong>关于超时处理</strong></li></ul><p>在实际的开发中，这个问题经常会出现，比如执行一段时间后定时任务不再执行了； 这种情况会发生在，比如你调用一个第三方接口，没有设置调用超时，继而引发异常，这时候当前任务便阻塞了。</p><h3 id="_3-2-springtask的原理" tabindex="-1"><a class="header-anchor" href="#_3-2-springtask的原理" aria-hidden="true">#</a> 3.2 SpringTask的原理？</h3><blockquote><p>SpringTask的源码在这里：</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719042742912.png" alt="image-20220719042742912" tabindex="0" loading="lazy"><figcaption>image-20220719042742912</figcaption></figure><h4 id="_3-2-1-enablescheduling注解" tabindex="-1"><a class="header-anchor" href="#_3-2-1-enablescheduling注解" aria-hidden="true">#</a> 3.2.1 @EnableScheduling注解</h4><p>添加@EnableScheduling注解会自动注入SchedulingConfiguration</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> <span class="token class-name">Chris</span> <span class="token class-name">Beams</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@author</span> <span class="token class-name">Juergen</span> <span class="token class-name">Hoeller</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@since</span> <span class="token number">3.1</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">Scheduled</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">SchedulingConfiguration</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">SchedulingConfigurer</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">ScheduledTaskRegistrar</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">Trigger</span>
 <span class="token operator">*</span> <span class="token annotation punctuation">@see</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span>
 <span class="token operator">*</span><span class="token operator">/</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">SchedulingConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableScheduling</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-schedulingconfiguration中初始化scheduledannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#_3-2-2-schedulingconfiguration中初始化scheduledannotationbeanpostprocessor" aria-hidden="true">#</a> 3.2.2 SchedulingConfiguration中初始化ScheduledAnnotationBeanPostProcessor</h4><p>SchedulingConfiguration配置中自动初始化ScheduledAnnotationBeanPostProcessor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulingConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token class-name">TaskManagementConfigUtils</span><span class="token punctuation">.</span><span class="token constant">SCHEDULED_ANNOTATION_PROCESSOR_BEAN_NAME</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinition</span><span class="token punctuation">.</span><span class="token constant">ROLE_INFRASTRUCTURE</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span> <span class="token function">scheduledAnnotationProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),S={href:"https://pdai.tech/md/spring/spring-x-framework-ioc-source-3.html",target:"_blank",rel:"noopener noreferrer"},x=e(`<p><strong>Spring 容器中 Bean 的生命周期流程</strong></p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719042950892.png" alt="image-20220719042950892" tabindex="0" loading="lazy"><figcaption>image-20220719042950892</figcaption></figure><h4 id="_3-2-3-scheduledtaskregistrar注册task" tabindex="-1"><a class="header-anchor" href="#_3-2-3-scheduledtaskregistrar注册task" aria-hidden="true">#</a> 3.2.3 ScheduledTaskRegistrar注册task</h4><p>在ScheduledAnnotationBeanPostProcessor构造函数中初始化了ScheduledTaskRegistrar</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
    * Create a default <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ScheduledAnnotationBeanPostProcessor</span></span></span><span class="token punctuation">}</span>.
    */</span>
<span class="token keyword">public</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>registrar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledTaskRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ScheduledTaskRegistrar最主要的是注册各种类型的task （这种方式在新的版本中已经废弃了）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">scheduleTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>localExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentTaskScheduler</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TriggerTask</span> task <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token function">scheduleTriggerTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cronTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">CronTask</span> task <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cronTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token function">scheduleCronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedRateTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IntervalTask</span> task <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedRateTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>fixedDelayTasks <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">IntervalTask</span> task <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fixedDelayTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">addScheduledTask</span><span class="token punctuation">(</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册哪些Task，怎么设计类的呢？</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220719043438091.png" alt="image-20220719043438091" tabindex="0" loading="lazy"><figcaption>image-20220719043438091</figcaption></figure><h4 id="_3-2-4-scheduledannotationbeanpostprocessor加载scheduled注解" tabindex="-1"><a class="header-anchor" href="#_3-2-4-scheduledannotationbeanpostprocessor加载scheduled注解" aria-hidden="true">#</a> 3.2.4 ScheduledAnnotationBeanPostProcessor加载Scheduled注解</h4><p>在BeanPostProcessor的postProcessAfterInitialization阶段加载Scheduled注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">AopInfrastructureBean</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">TaskScheduler</span> <span class="token operator">||</span>
            bean <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Ignore AOP infrastructure such as scoped proxies.</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token class-name">AnnotationUtils</span><span class="token punctuation">.</span><span class="token function">isCandidateClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">Scheduled</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Scheduled</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> annotatedMethods <span class="token operator">=</span> <span class="token class-name">MethodIntrospector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token class-name">MethodIntrospector<span class="token punctuation">.</span>MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Scheduled</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> method <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Scheduled</span><span class="token punctuation">&gt;</span></span> scheduledAnnotations <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">getMergedRepeatableAnnotations</span><span class="token punctuation">(</span>
                            method<span class="token punctuation">,</span> <span class="token class-name">Scheduled</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>scheduledAnnotations<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> scheduledAnnotations <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotatedMethods<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>nonAnnotatedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No @Scheduled annotations found on bean class: &quot;</span> <span class="token operator">+</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Non-empty set of methods</span>
            annotatedMethods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> scheduledAnnotations<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
                    scheduledAnnotations<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>scheduled <span class="token operator">-&gt;</span> <span class="token function">processScheduled</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">,</span> method<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>annotatedMethods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; @Scheduled methods processed on bean &#39;&quot;</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>
                        <span class="token string">&quot;&#39;: &quot;</span> <span class="token operator">+</span> annotatedMethods<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Scheduled注解是添加到方法级别，具体如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Schedules</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Scheduled</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * A special cron expression value that indicates a disabled trigger: <span class="token punctuation">{</span><span class="token keyword">@value</span><span class="token punctuation">}</span>.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is primarily meant for use with <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">$<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> placeholders,
	 * allowing for external disabling of corresponding scheduled methods.
	 * <span class="token keyword">@since</span> 5.1
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token class-name">ScheduledTaskRegistrar</span><span class="token punctuation">#</span><span class="token field">CRON_DISABLED</span></span>
	 */</span>
	<span class="token class-name">String</span> <span class="token constant">CRON_DISABLED</span> <span class="token operator">=</span> <span class="token class-name">ScheduledTaskRegistrar</span><span class="token punctuation">.</span><span class="token constant">CRON_DISABLED</span><span class="token punctuation">;</span>


	<span class="token doc-comment comment">/**
	 * A cron-like expression, extending the usual UN*X definition to include triggers
	 * on the second, minute, hour, day of month, month, and day of week.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>For example, <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;0 * * * * MON-FRI&quot;</span></span></span><span class="token punctuation">}</span> means once per minute on weekdays
	 * (at the top of the minute - the 0th second).
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The fields read from left to right are interpreted as follows.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>minute<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>hour<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>day of month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>month<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>day of week<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The special value <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">CRON_DISABLED</span></span> &quot;-&quot;<span class="token punctuation">}</span> indicates a disabled cron
	 * trigger, primarily meant for externally specified values resolved by a
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">$<span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span> placeholder.
	 * <span class="token keyword">@return</span> an expression that can be parsed to a cron schedule
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">CronExpression</span><span class="token punctuation">#</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
	 */</span>
	<span class="token class-name">String</span> <span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * A time zone for which the cron expression will be resolved. By default, this
	 * attribute is the empty String (i.e. the server&#39;s local time zone will be used).
	 * <span class="token keyword">@return</span> a zone id accepted by <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimeZone</span><span class="token punctuation">#</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>,
	 * or an empty String to indicate the server&#39;s default time zone
	 * <span class="token keyword">@since</span> 4.0
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>scheduling<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">CronTrigger</span><span class="token punctuation">#</span><span class="token function">CronTrigger</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimeZone</span><span class="token punctuation">)</span></span>
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">TimeZone</span></span>
	 */</span>
	<span class="token class-name">String</span> <span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Execute the annotated method with a fixed period between the end of the
	 * last invocation and the start of the next.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the delay
	 */</span>
	<span class="token keyword">long</span> <span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Execute the annotated method with a fixed period between the end of the
	 * last invocation and the start of the next.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the delay as a String value <span class="token entity named-entity" title="—">&amp;mdash;</span> for example, a placeholder
	 * or a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">#</span><span class="token field">parse</span></span> java.time.Duration<span class="token punctuation">}</span> compliant value
	 * <span class="token keyword">@since</span> 3.2.2
	 */</span>
	<span class="token class-name">String</span> <span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Execute the annotated method with a fixed period between invocations.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the period
	 */</span>
	<span class="token keyword">long</span> <span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Execute the annotated method with a fixed period between invocations.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the period as a String value <span class="token entity named-entity" title="—">&amp;mdash;</span> for example, a placeholder
	 * or a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">#</span><span class="token field">parse</span></span> java.time.Duration<span class="token punctuation">}</span> compliant value
	 * <span class="token keyword">@since</span> 3.2.2
	 */</span>
	<span class="token class-name">String</span> <span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Number of units of time to delay before the first execution of a
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedRate</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedDelay</span></span><span class="token punctuation">}</span> task.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the initial
	 * <span class="token keyword">@since</span> 3.2
	 */</span>
	<span class="token keyword">long</span> <span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * Number of units of time to delay before the first execution of a
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedRate</span></span><span class="token punctuation">}</span> or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedDelay</span></span><span class="token punctuation">}</span> task.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>The time unit is milliseconds by default but can be overridden via
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">timeUnit</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the initial delay as a String value <span class="token entity named-entity" title="—">&amp;mdash;</span> for example, a placeholder
	 * or a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span><span class="token punctuation">#</span><span class="token field">parse</span></span> java.time.Duration<span class="token punctuation">}</span> compliant value
	 * <span class="token keyword">@since</span> 3.2.2
	 */</span>
	<span class="token class-name">String</span> <span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * The <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TimeUnit</span></span><span class="token punctuation">}</span> to use for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedDelay</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedDelayString</span></span><span class="token punctuation">}</span>,
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedRate</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedRateString</span></span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">initialDelay</span></span><span class="token punctuation">}</span>, and
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">initialDelayString</span></span><span class="token punctuation">}</span>.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Defaults to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TimeUnit</span><span class="token punctuation">#</span><span class="token field">MICROSECONDS</span></span><span class="token punctuation">}</span>.
	 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This attribute is ignored for <span class="token punctuation">{</span><span class="token keyword">@linkplain</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> cron expressions<span class="token punctuation">}</span>
	 * and for <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Duration</span></span><span class="token punctuation">}</span> values supplied via <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedDelayString</span></span><span class="token punctuation">}</span>,
	 * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">fixedRateString</span></span><span class="token punctuation">}</span>, or <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">initialDelayString</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@return</span> the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">TimeUnit</span></span></span><span class="token punctuation">}</span> to use
	 * <span class="token keyword">@since</span> 5.3.10
	 */</span>
	<span class="token class-name">TimeUnit</span> <span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>@Scheduled所支持的参数：</p><ol><li><code>cron</code>：cron表达式，指定任务在特定时间执行；</li><li><code>fixedDelay</code>：表示上一次任务执行完成后多久再次执行，参数类型为long，单位ms；</li><li><code>fixedDelayString</code>：与fixedDelay含义一样，只是参数类型变为String；</li><li><code>fixedRate</code>：表示按一定的频率执行任务，参数类型为long，单位ms；</li><li><code>fixedRateString</code>: 与fixedRate的含义一样，只是将参数类型变为String；</li><li><code>initialDelay</code>：表示延迟多久再第一次执行任务，参数类型为long，单位ms；</li><li><code>initialDelayString</code>：与initialDelay的含义一样，只是将参数类型变为String；</li><li><code>zone</code>：时区，默认为当前时区，一般没有用到。</li></ol><p>获取到方法上Scheduled注解（对任务的定义），通过processScheduled处理具体类型的task</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
    * Process the given <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Scheduled</span></span></span><span class="token punctuation">}</span> method declaration on the given bean.
    * <span class="token keyword">@param</span> <span class="token parameter">scheduled</span> the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@Scheduled</span></span></span><span class="token punctuation">}</span> annotation
    * <span class="token keyword">@param</span> <span class="token parameter">method</span> the method that the annotation has been declared on
    * <span class="token keyword">@param</span> <span class="token parameter">bean</span> the target bean instance
    * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">createRunnable</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Method</span><span class="token punctuation">)</span></span>
    */</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processScheduled</span><span class="token punctuation">(</span><span class="token class-name">Scheduled</span> scheduled<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token function">createRunnable</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> processedSchedule <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> errorMessage <span class="token operator">=</span>
                <span class="token string">&quot;Exactly one of the &#39;cron&#39;, &#39;fixedDelay(String)&#39;, or &#39;fixedRate(String)&#39; attributes is required&quot;</span><span class="token punctuation">;</span>

        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledTask</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Determine initial delay</span>
        <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">.</span><span class="token function">initialDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> initialDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">initialDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Specify &#39;initialDelay&#39; or &#39;initialDelayString&#39;, not both&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                initialDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    initialDelay <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>initialDelayString<span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                            <span class="token string">&quot;Invalid initialDelayString value \\&quot;&quot;</span> <span class="token operator">+</span> initialDelayString <span class="token operator">+</span> <span class="token string">&quot;\\&quot; - cannot parse into long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Check cron expression</span>
        <span class="token class-name">String</span> cron <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">cron</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> zone <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">zone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cron <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">;</span>
                zone <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>initialDelay <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;&#39;initialDelay&#39; not supported for cron triggers&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Scheduled</span><span class="token punctuation">.</span><span class="token constant">CRON_DISABLED</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cron<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeZone</span> timeZone<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        timeZone <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">parseTimeZoneString</span><span class="token punctuation">(</span>zone<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        timeZone <span class="token operator">=</span> <span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleCronTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CronTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CronTrigger</span><span class="token punctuation">(</span>cron<span class="token punctuation">,</span> timeZone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// At this point we don&#39;t need to differentiate between initial delay set or not anymore</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialDelay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            initialDelay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Check fixed delay</span>
        <span class="token keyword">long</span> fixedDelay <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">.</span><span class="token function">fixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedDelay <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> fixedDelayString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedDelayString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fixedDelayString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    fixedDelay <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>fixedDelayString<span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                            <span class="token string">&quot;Invalid fixedDelayString value \\&quot;&quot;</span> <span class="token operator">+</span> fixedDelayString <span class="token operator">+</span> <span class="token string">&quot;\\&quot; - cannot parse into long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedDelayTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedDelayTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedDelay<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Check fixed rate</span>
        <span class="token keyword">long</span> fixedRate <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>scheduled<span class="token punctuation">.</span><span class="token function">fixedRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fixedRate <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
            processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> fixedRateString <span class="token operator">=</span> scheduled<span class="token punctuation">.</span><span class="token function">fixedRateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fixedRateString <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>embeddedValueResolver<span class="token punctuation">.</span><span class="token function">resolveStringValue</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token operator">!</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
                processedSchedule <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    fixedRate <span class="token operator">=</span> <span class="token function">convertToMillis</span><span class="token punctuation">(</span>fixedRateString<span class="token punctuation">,</span> scheduled<span class="token punctuation">.</span><span class="token function">timeUnit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                            <span class="token string">&quot;Invalid fixedRateString value \\&quot;&quot;</span> <span class="token operator">+</span> fixedRateString <span class="token operator">+</span> <span class="token string">&quot;\\&quot; - cannot parse into long&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                tasks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registrar<span class="token punctuation">.</span><span class="token function">scheduleFixedRateTask</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedRateTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> fixedRate<span class="token punctuation">,</span> initialDelay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Check whether we had any attribute set</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>processedSchedule<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Finally register the scheduled tasks</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledTask</span><span class="token punctuation">&gt;</span></span> regTasks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledTasks<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> key <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            regTasks<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Encountered invalid @Scheduled method &#39;&quot;</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-5-scheduledtaskregistrar-中解析task" tabindex="-1"><a class="header-anchor" href="#_3-2-5-scheduledtaskregistrar-中解析task" aria-hidden="true">#</a> 3.2.5 ScheduledTaskRegistrar 中解析task</h4><p>以CronTask为例，如果定义了taskScheduler则由taskScheduler执行，如果没有放到unresolvedTasks中。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
    * Schedule the specified cron task, either right away if possible
    * or on initialization of the scheduler.
    * <span class="token keyword">@return</span> a handle to the scheduled task, allowing to cancel it
    * (or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if processing a previously registered task)
    * <span class="token keyword">@since</span> 4.3
    */</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">ScheduledTask</span> <span class="token function">scheduleCronTask</span><span class="token punctuation">(</span><span class="token class-name">CronTask</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ScheduledTask</span> scheduledTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>unresolvedTasks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> newTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scheduledTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scheduledTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        newTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        scheduledTask<span class="token punctuation">.</span>future <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskScheduler<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">addCronTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>unresolvedTasks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> scheduledTask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>newTask <span class="token operator">?</span> scheduledTask <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-6-taskscheduler对task处理" tabindex="-1"><a class="header-anchor" href="#_3-2-6-taskscheduler对task处理" aria-hidden="true">#</a> 3.2.6 TaskScheduler对Task处理</h4><p>默认是ConcurrentTaskScheduler， 处理方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enterpriseConcurrentScheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EnterpriseConcurrentTriggerScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token function">decorateTask</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">ErrorHandler</span> errorHandler <span class="token operator">=</span>
                    <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>errorHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>errorHandler <span class="token operator">:</span> <span class="token class-name">TaskUtils</span><span class="token punctuation">.</span><span class="token function">getDefaultErrorHandler</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReschedulingRunnable</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> trigger<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clock<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutor<span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RejectedExecutionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TaskRejectedException</span><span class="token punctuation">(</span><span class="token string">&quot;Executor [&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutor <span class="token operator">+</span> <span class="token string">&quot;] did not accept task: &quot;</span> <span class="token operator">+</span> task<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EnterpriseConcurrentTriggerScheduler 是 JSR-236 Trigger标准，它的处理方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
    * Delegate that adapts a Spring Trigger to a JSR-236 Trigger.
    * Separated into an inner class in order to avoid a hard dependency on the JSR-236 API.
    */</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">EnterpriseConcurrentTriggerScheduler</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Trigger</span> trigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ManagedScheduledExecutorService</span> executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ManagedScheduledExecutorService</span><span class="token punctuation">)</span> scheduledExecutor<span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">javax<span class="token punctuation">.</span>enterprise<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token annotation punctuation">@Nullable</span>
            <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getNextRunTime</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">LastExecution</span> le<span class="token punctuation">,</span> <span class="token class-name">Date</span> taskScheduledTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>trigger<span class="token punctuation">.</span><span class="token function">nextExecutionTime</span><span class="token punctuation">(</span>le <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span>
                        <span class="token keyword">new</span> <span class="token class-name">SimpleTriggerContext</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span><span class="token function">getScheduledStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span><span class="token function">getRunStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span><span class="token function">getRunEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span>
                        <span class="token keyword">new</span> <span class="token class-name">SimpleTriggerContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">skipRun</span><span class="token punctuation">(</span><span class="token class-name">LastExecution</span> lastExecution<span class="token punctuation">,</span> <span class="token class-name">Date</span> scheduledRunTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有使用EnterpriseConcurrentTriggerScheduler, 则使用ReschedulingRunnable，本质上由ScheduledExecutorService处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ReschedulingRunnable</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> delegate<span class="token punctuation">,</span> <span class="token class-name">Trigger</span> trigger<span class="token punctuation">,</span> <span class="token class-name">Clock</span> clock<span class="token punctuation">,</span>
			<span class="token class-name">ScheduledExecutorService</span> executor<span class="token punctuation">,</span> <span class="token class-name">ErrorHandler</span> errorHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">super</span><span class="token punctuation">(</span>delegate<span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">=</span> trigger<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>triggerContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleTriggerContext</span><span class="token punctuation">(</span>clock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>executor <span class="token operator">=</span> executor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerContextMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutionTime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>trigger<span class="token punctuation">.</span><span class="token function">nextExecutionTime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>triggerContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutionTime <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> initialDelay <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scheduledExecutionTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>triggerContext<span class="token punctuation">.</span><span class="token function">getClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">millis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>currentFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>executor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> initialDelay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,29),T={href:"https://pdai.tech/md/spring/springboot/springboot-x-task-spring-task-timer.html",target:"_blank",rel:"noopener noreferrer"},R=n("strong",null,"SpringBoot定时任务 - Spring Schedule实现方式",-1);function D(E,_){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,k,d,n("blockquote",null,[n("p",null,[s("cron表达式， 以及BeanPostProcessor（方便你理解它的原理，相关介绍在之前的文章中"),n("a",r,[s("Spring核心之控制反转(IOC)源码解析"),t(a)]),s("）.")])]),v,m,b,n("ul",null,[n("li",null,[n("a",g,[s("CRON表达式 - CRON表达式介绍和使用"),t(a)]),h]),n("li",null,[n("a",f,[s("CRON表达式 - CRON生成和校验工具"),t(a)]),y])]),w,n("p",null,[s("什么是BeanPostProcessor? 我们在前文中有详解的讲解，具体看"),n("a",S,[s("Spring核心之控制反转(IOC)源码解析"),t(a)])]),x,n("p",null,[n("a",T,[R,t(a)])])])}const q=p(i,[["render",D],["__file","springboot-x-task-spring-task-timer.html.vue"]]);export{q as default};
