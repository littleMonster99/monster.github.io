import{_ as a,W as t,X as e,Y as n,Z as p,$ as o,a0 as c,D as l}from"./framework-f64bc974.js";const i={},u=c(`<h1 id="mongotemplate和mongorepository总结" tabindex="-1"><a class="header-anchor" href="#mongotemplate和mongorepository总结" aria-hidden="true">#</a> MongoTemplate和MongoRepository总结</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p><code>Spring Data</code> 操作 <code>MongoDB</code> 做 <code>CRUD</code> 的时候一般会使用两种方式MongoTemplate和MongoRepositor。本文就这两种方式做个简单的对比介绍，并对我们在业务中经常使用到的查询做一些举例。</p><h2 id="_2-数据准备" tabindex="-1"><a class="header-anchor" href="#_2-数据准备" aria-hidden="true">#</a> 2. 数据准备</h2><p>其中使用到的 <code>User</code> 类如下 <code>User.java</code> 如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>index<span class="token punctuation">.</span></span><span class="token class-name">Indexed</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>mongodb<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapping<span class="token punctuation">.</span></span><span class="token class-name">Document</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Document</span><span class="token punctuation">(</span>collection <span class="token operator">=</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Id</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> _id<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
		
	<span class="token comment">// 只在本文最后一部分使用</span>
	<span class="token comment">// @CreatedDate</span>
	<span class="token comment">// @Indexed</span>
	<span class="token comment">// private DateTime createdAt;</span>
	<span class="token comment">// @LastModifiedDate</span>
	<span class="token comment">// @Indexed</span>
	<span class="token comment">// private DateTime updatedAt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-使用-mongotemplate-形式" tabindex="-1"><a class="header-anchor" href="#_3-使用-mongotemplate-形式" aria-hidden="true">#</a> 3. 使用 MongoTemplate 形式</h2><p>直接使用 <code>MongoTemplate </code> 形式。 首先注入 <code>MongoTemplate </code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Autowired</span>
 <span class="token class-name">MongoTemplate</span> mongoTemplate<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-insert" tabindex="-1"><a class="header-anchor" href="#_3-1-insert" aria-hidden="true">#</a> 3.1 insert</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// insert用来插入一条数据</span>
 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Jon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-save" tabindex="-1"><a class="header-anchor" href="#_3-2-save" aria-hidden="true">#</a> 3.2 save</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// save的形式在首次插入的时候和insert效果一样</span>
 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Albert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-save-update" tabindex="-1"><a class="header-anchor" href="#_3-3-save-update" aria-hidden="true">#</a> 3.3 save - update</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// save 还可以用来更新一条数据	</span>
 user <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span>
 <span class="token class-name">Query</span><span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;Jim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-updatefirst" tabindex="-1"><a class="header-anchor" href="#_3-4-updatefirst" aria-hidden="true">#</a> 3.4 updateFirst</h3><p>假设我们现在有数据如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
         <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
         <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>updateFirst </code> 更新数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Alex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 mongoTemplate<span class="token punctuation">.</span><span class="token function">updateFirst</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新后的数据，我们发现只更新了第一条数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token punctuation">[</span>
     <span class="token punctuation">{</span>
         <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;James&quot;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token punctuation">{</span>
         <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
         <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-updatemulti" tabindex="-1"><a class="header-anchor" href="#_3-5-updatemulti" aria-hidden="true">#</a> 3.5 updateMulti</h3><p>和上一条 <code>updateFirst</code> 对应的，如果要全部更新，使用 <code>updateMuti</code>，会将上一条例子中所有的 <code>Alex</code> 更新为 <code>James</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Alex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 mongoTemplate<span class="token punctuation">.</span><span class="token function">updateMulti</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-findandmodify" tabindex="-1"><a class="header-anchor" href="#_3-6-findandmodify" aria-hidden="true">#</a> 3.6 findAndModify</h3><p>这个方法其实和上一条类似，只是在更新后会把更新后的内容返回。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Markus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">User</span> user <span class="token operator">=</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findAndModify</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-upsert" tabindex="-1"><a class="header-anchor" href="#_3-7-upsert" aria-hidden="true">#</a> 3.7 upsert</h3><p>查找并更新，如果无法查到，则结合 query 和 update 的信息创建一条新的数据并插入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token class-name">Query</span> query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 query<span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span><span class="token class-name">Criteria</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&quot;Markus&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">Update</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 update<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nick&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 mongoTemplate<span class="token punctuation">.</span><span class="token function">upsert</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> update<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-8-remove" tabindex="-1"><a class="header-anchor" href="#_3-8-remove" aria-hidden="true">#</a> 3.8 remove</h3><p>删除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> mongoTemplate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-使用-mongorepository-形式。" tabindex="-1"><a class="header-anchor" href="#_4-使用-mongorepository-形式。" aria-hidden="true">#</a> 4. 使用 <code>MongoRepository </code> 形式。</h2><p>第一步，创建某个 <code>collection</code> 的 <code>repository </code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Repository</span>
 <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span>  <span class="token keyword">extends</span> <span class="token class-name">MongoRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不同于 <code>mongoTemplate</code>，<code>repository </code> 只需写方法名就能指定做的操作。我们一般只需要对删除和查找做一些自定义。下面就增删改查做一些介绍。</p><h3 id="_4-1-插入和更新" tabindex="-1"><a class="header-anchor" href="#_4-1-插入和更新" aria-hidden="true">#</a> 4.1 插入和更新</h3><p><code>MongoRepository</code> 中已经有两个方法，<code>save</code> and <code>insert</code>。和上面的 <code>mongoTemplate</code> 一样，<code>insert</code> 用于插入，<code>save</code> 兼具插入和更新的功能。以下是 <code>MongoRepository</code> 中自带的 <code>save</code> and <code>insert</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> entites<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">S</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">S</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> entities<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用用例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 1. 注入</span>
 <span class="token annotation punctuation">@Autowired</span>
 <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>
 <span class="token comment">// 2. 准备数据</span>
 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;MIKE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">User</span> user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;ARHTUR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> user2<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 3. insert 插入</span>
 userRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
 userRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 4. save 更新</span>
 <span class="token class-name">User</span> user4save <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findUserByNameIs</span><span class="token punctuation">(</span><span class="token string">&quot;ARHTUR&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user4save<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-查找" tabindex="-1"><a class="header-anchor" href="#_4-2-查找" aria-hidden="true">#</a> 4.2 查找</h3><p>查找可以使用函数名作为查询的条件，几乎所有的简单查询都能用这种方式实现，这种方式也是最简单的方式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 根据name查找 只返回一条</span>
 <span class="token class-name">User</span> <span class="token function">findUserByNameIs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据name查找 返回匹配的所有数据</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUsersByNameIs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据name查找，in匹配</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUsersByNameIn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据名字等于给定名字和年龄大于给定年龄来作为筛选条件</span>
 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUsersByNameIsAndAgeGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的还有很多，可以根据 ide 的提示来写，基本上符合我们正常的思维模式。</p><h3 id="_4-3-删除" tabindex="-1"><a class="header-anchor" href="#_4-3-删除" aria-hidden="true">#</a> 4.3 删除</h3><p>删除和查询基本类似。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 删除和name匹配的一条数据</span>
 <span class="token class-name">Integer</span> <span class="token function">removeUserByNameIs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 删除所有和name匹配的数据</span>
 <span class="token class-name">Integer</span> <span class="token function">removeUsersByNameIs</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据name查找，删除in匹配的数据</span>
 <span class="token class-name">Integer</span> <span class="token function">removeUsersByNameIn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">// 根据名字等于给定名字和年龄大于给定年龄来作为筛选条件s删除</span>
 <span class="token class-name">Integer</span> <span class="token function">removeUsersByNameIsAndAgeGreaterThan</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Integer</span> age<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-两种方式的对比" tabindex="-1"><a class="header-anchor" href="#_5-两种方式的对比" aria-hidden="true">#</a> 5. 两种方式的对比</h2><p><code>MongoTemplate</code> 在写法上比 <code>MongoRepository </code> 更复杂一些，但是带来更多的灵活性。对于复杂的查询操作，我们一般使用 <code>MongoTemplate</code>，对于一些简单的查询我们会使用 <code>MongoRepository </code>。可以这么理解，<code>MongoRepository </code> 只是作为一种对于简单查询的简便操作，而 <code>MongoTemplate</code> 才是我们在做一些复杂查询时的首选。</p><h2 id="_6-常见业务问题做法" tabindex="-1"><a class="header-anchor" href="#_6-常见业务问题做法" aria-hidden="true">#</a> 6. 常见业务问题做法</h2><p>我们在业务中经常会有这样的情况：判断一个条件是否为空，如果为空就不使用该查询条件作为约束，另外我们也会经常使用到分页功能。 举例：</p><p>数据：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;age&quot;</span>  <span class="token operator">:</span> <span class="token number">12</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55b5ffa5511fee0e45ed614c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Alex&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;age&quot;</span>  <span class="token operator">:</span> <span class="token number">13</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token class-name">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;55bsafa5511fee0e45ed6asf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&quot;_class&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;org.baeldung.model.User&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Marray&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;age&quot;</span>  <span class="token operator">:</span> <span class="token number">15</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询要求：能根据给定的 <code>name list</code> 和 <code>age list</code> 查询，给定的如果为空则不作为查询条件。另外给出时间范围作为条件之一，并提供分页功能。 其中 <code>User</code> 为文章开头的 <code>User.java</code>。 实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 请确保names和ages不为null或者自行添加非null判断</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findUsers</span><span class="token punctuation">(</span><span class="token class-name">List</span> names<span class="token punctuation">,</span><span class="token class-name">List</span> ages<span class="token punctuation">,</span><span class="token class-name">Date</span> from<span class="token punctuation">,</span><span class="token class-name">Date</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">Integer</span> offset<span class="token punctuation">,</span><span class="token class-name">Integer</span> limit<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token class-name">Criteria</span> criteria <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 非空判断</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>names<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		criteria <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		criteria <span class="token operator">=</span> criteria<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 时间范围</span>
   criteria<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">&quot;createdAt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">gte</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lte</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 分页条件</span>
   <span class="token class-name">Pageable</span> pageableRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment">// 查询</span>
   <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCriteria</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>pageableRequest<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,59),r={href:"https://ld246.com/article/1509882133082",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=l("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[p("Spring Data MongoDB 常用 CRUD 形式总结"),o(s)])])])}const g=a(i,[["render",k],["__file","mongodb-action-template-repository.html.vue"]]);export{g as default};
