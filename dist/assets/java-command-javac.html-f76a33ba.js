import{_ as n,W as e,X as l,Y as a,Z as c,$ as o,a0 as i,D as t}from"./framework-f64bc974.js";const p={},d=i(`<h1 id="java编译" tabindex="-1"><a class="header-anchor" href="#java编译" aria-hidden="true">#</a> Java编译</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>IDE或maven等工具已将Java程序的编译代劳。但工具越高级，隐藏的细节就越多，一旦出现问题就懵逼，归根到底还是基础概念不牢靠。返璞归真，回到最原始的地方<code>javac</code>，会让问题豁然开朗。下面就一步一步演示用<code>javac</code>和<code>java</code>徒手编译运行一个常规工程。</p><h2 id="_2-hello-world练个手" tabindex="-1"><a class="header-anchor" href="#_2-hello-world练个手" aria-hidden="true">#</a> 2. Hello World练个手</h2><p>来个简单的先，我们祭出祖传的HelloWorld程序。（感兴趣的话，可以试一试徒手是否写的出来~）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写完后，保存为：<code>HelloWorld.java</code>，然后在当前目录执行<code>javac</code>编译命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javac HelloWorld.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看<strong>当前目录</strong>（更准确的说是java文件同级目录），果然生成了<code>HelloWorld.class</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span>
HelloWorld.class HelloWorld.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>继续在<strong>当前目录运行</strong><code>java</code>命令，正确打印出Hello, World!</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>maoshuai@ms:~/javaLinux/w1$ java HelloWorld 
Hello, World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>老司机，稳！看起来很简单嘛：先<code>javac</code>再<code>java</code>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428163059164.png" alt="image-20220428163059164" tabindex="0" loading="lazy"><figcaption>image-20220428163059164</figcaption></figure><h3 id="_2-1-容易犯的错" tabindex="-1"><a class="header-anchor" href="#_2-1-容易犯的错" aria-hidden="true">#</a> 2.1 容易犯的错</h3><ul><li>执行class 或.java 文件</li></ul><p>虽然简单，但新手通常会犯的一个错：想象成去<strong>执行</strong><code>.class</code>文件，比如写成这样，自然会报错：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428163045920.png" alt="image-20220428163045920" tabindex="0" loading="lazy"><figcaption>image-20220428163045920</figcaption></figure><h2 id="_3-带包名" tabindex="-1"><a class="header-anchor" href="#_3-带包名" aria-hidden="true">#</a> 3. 带包名</h2><p>一切都很顺利，但没有包名是不专业的，所以我们加一个牛逼的包<code>package com.zszdevelop;</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zszdevelop</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还是一样用<code>javac</code>编译，查看<strong>当前目录</strong>下<code>HelloWorld.class</code>生成了，很顺利。</p><p>还是一样用<code>java</code>命令，瞬间被打脸：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428163506356.png" alt="image-20220428163506356" tabindex="0" loading="lazy"><figcaption>image-20220428163506356</figcaption></figure><p>想了想，<strong>HelloWorld已经有自己的包名了，所以它的名字不在是没有姓氏</strong>的<code>HelloWorld</code>，新名字叫<code>com.zszdevelop.HelloWorld</code>，那么传给<code>java</code>自然要用新名字，再试一试：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428163605539.png" alt="image-20220428163605539" tabindex="0" loading="lazy"><figcaption>image-20220428163605539</figcaption></figure><p>还是被打脸，这时候老司机告诉你，创建一个<code>com.zszdevelop</code>目录，然后把<code>HelloWorld.class</code>放进来，执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> com/zszdevelop
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mv</span> HelloWorld.class com/zszdevelop
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span>
HelloWorld.java com
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> com.zszdevelop.HelloWorld
Hello, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428163804684.png" alt="image-20220428163804684" tabindex="0" loading="lazy"><figcaption>image-20220428163804684</figcaption></figure><p>果然，正常打印出了Hello, World!</p><p><strong>上面的步骤，说明了两点：</strong></p><ol><li>增加了package名，所以class名也变了，行不改名坐不改姓，自然要带上姓（即所谓全限定名）。</li><li>Java <strong>会根据包名对应出目录结构，并从class path搜索该目录去找class文件</strong>。由于默认的class path是当前目录，所以<code>com.zszdevelop.HelloWorld</code>必须存储在<code>./com/zszdevelop/HelloWorld.class</code></li></ol><p>当然每次自己创建包路径的目录太麻烦。<strong><code>-d</code>参数可以代劳上面的工作</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> javac <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> HelloWorld.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span>
HelloWorld.java com
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> com.zszdevelop.HelloWorld
Hello, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-d</code>指定了生成class文件的根目录（这里用的是当前目录），并且会根据class的包路径创建子目录。</p><h2 id="_4-编译两个有依赖关系的class" tabindex="-1"><a class="header-anchor" href="#_4-编译两个有依赖关系的class" aria-hidden="true">#</a> 4. 编译两个有依赖关系的class</h2><p>包名解决了，我们再复杂些，搞个依赖调用。首先，我们抽取一个<code>HelloService</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zszdevelop</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HelloService, &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改<code>HelloWorld.java</code>，调用<code>HelloService</code>完成say hello：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>zszdevelop</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">HelloService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        service<span class="token punctuation">.</span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token string">&quot;World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们依次编译：<code>HelloService.java</code>和<code>HelloWorld.java</code>，最后运行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> javac <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> HelloService.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> javac <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> HelloWorld.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span>
HelloService.java HelloWorld.java   com
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> com.zszdevelop.HelloWorld
HelloService, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428164924047.png" alt="image-20220428164924047" tabindex="0" loading="lazy"><figcaption>image-20220428164924047</figcaption></figure><p>直觉上，要先编译<code>HelloService.java</code>，这是对的。那如果先编译<code>HelloWorld.java</code>呢？当然是打脸：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428164950212.png" alt="image-20220428164950212" tabindex="0" loading="lazy"><figcaption>image-20220428164950212</figcaption></figure><p>如果编译的时候，还要根据依赖关系确定顺序，太low了吧。我觉得<code>java</code>命令应该能自动解决它，一次性将两个java文件传给它试一试：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> javac <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> HelloWorld.java HelloService.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> LS
HelloService.java	HelloWorld.java		com
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> com.zszdevelop.HelloWorld
HelloService, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428165035879.png" alt="image-20220428165035879" tabindex="0" loading="lazy"><figcaption>image-20220428165035879</figcaption></figure><p>牛逼，它自动解决了顺序问题，赞一个（虽然我不怀好意的将<code>HelloWorld.java</code>放到了前面）！</p><h2 id="_5-使用src和target目录" tabindex="-1"><a class="header-anchor" href="#_5-使用src和target目录" aria-hidden="true">#</a> 5. 使用src和target目录</h2><p>从上面的例子可以看出，虽然class文件必须放在包名一致的目录里，<strong>但java源文件并没有这个要求</strong>。不过，为了管理方便，我们将java源文件也放在包结构目录里：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span>  <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> com/zszdevelop
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mv</span> *.java com/zszdevelop/
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span>  <span class="token function">ls</span> com/zszdevelop/
HelloService.java HelloWorld.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span>  javac <span class="token parameter variable">-d</span> <span class="token builtin class-name">.</span> com/zszdevelop/*.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span> com/zszdevelop/
HelloService.class HelloService.java  HelloWorld.class   HelloWorld.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> com.zszdevelop.HelloWorld
HelloService, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428165610980.png" alt="image-20220428165610980" tabindex="0" loading="lazy"><figcaption>image-20220428165610980</figcaption></figure><p>编译时<code>javac</code>要传入新的java文件路径（这里用了通配符），其他也没有什么不同。可以看到<strong>class文件生成到了与java文件相同的目录里</strong>。class文件和java源文件放在一起，很不清爽，能否像IDE里那样：java文件放到src目录，class文件放到target目录？下面我试一试。</p><p>先创建src和target目录，并将原来的java文件都移动到src目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mkdir</span> src
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mkdir</span> target
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">mv</span> com src

<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span>
src    target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428165943655.png" alt="image-20220428165943655" tabindex="0" loading="lazy"><figcaption>image-20220428165943655</figcaption></figure><p>然后编译，<code>-d</code>参数指定到target目录：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> javac <span class="token parameter variable">-d</span> target src/com/zszdevelop/*.java
<span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">ls</span> target/com/zszdevelop/
HelloService.class HelloWorld.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428170120215.png" alt="image-20220428170120215" tabindex="0" loading="lazy"><figcaption>image-20220428170120215</figcaption></figure><p>怎么运行呢？直接在当前目录运行是不行了，毕竟多了一层target目录，进入target目录运行，妥妥的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(base) ➜  test cd target
(base) ➜  target java com.zszdevelop.HelloWorld
HelloService, World!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428170206636.png" alt="image-20220428170206636" tabindex="0" loading="lazy"><figcaption>image-20220428170206636</figcaption></figure><p>除了进入<code>target</code>目录以外，更常用的方法是通过<code>-classpath</code>（或简写为<code>-cp</code>）选项设置<strong>类路径</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>base<span class="token punctuation">)</span> ➜  <span class="token builtin class-name">test</span> <span class="token function">java</span> <span class="token parameter variable">-cp</span> target com.zszdevelop.HelloWorld
HelloService, World<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220428170320183.png" alt="image-20220428170320183" tabindex="0" loading="lazy"><figcaption>image-20220428170320183</figcaption></figure><h2 id="_6-类路径classpath" tabindex="-1"><a class="header-anchor" href="#_6-类路径classpath" aria-hidden="true">#</a> 6. 类路径CLASSPATH</h2><p>上面演示了通过<code>-cp</code>设置类路径。下面再进一步研究一下类路径。</p><p>类路径，是JRE搜索用户级class文件或其他资源的路径，<code>javac</code>或<code>java</code>等工具都可以指定类路径。如果没有设置，默认的类路径就是当前目录。<strong>但如果设置了类路径，默认值就被覆盖了，所以如果想保留当前目录为类路径，需要同时将<code>.</code>加入</strong>，有点像默认构造函数的感觉。</p><p>类路径，可以通过环境变量<code>CLASSPATH</code>或<code>-cp</code>参数设置，后者会覆盖前者。推荐通过<code>-cp</code>设置，它只会影响当前进程。</p><p>类路径类似操作系统里的<code>path</code>概念，不过它是java工具搜索class文件的路径。同样的，类路径可以是多个，并通过分号分隔：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export CLASSPATH=path1:path2:...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sdkTool -classpath path1:path2:...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>sdkTool可以是 java, javac, javadoc等。</p><p>类路径不仅可以是目录，还也可以是jar包或zip包。</p><p>类路径的设置是有顺序的，java会优先在靠前的类路径里搜索。这一点和操作系统的<code>path</code>类似。</p><p>类路径可以用通配符<code>*</code>匹配jar或zip，但：</p><ol><li>通配符只匹配jar或zip，比如path/*只是将下面的jar或zip加入类路径，但path本身不加入类路径。</li><li>通配符不递归搜索，即指匹配第一层目录下的jar或zip。</li><li>通配符匹配到的jar或zip，加入到classpath的顺序是不确定的。因此，更稳妥的做法是显示的枚举所有jar或zip。</li><li>通配符适用于<code>CLASSPATH</code>变量或<code>-cp</code>参数，但不适用于jar包的manifest文件。</li></ol><h2 id="_7-javac" tabindex="-1"><a class="header-anchor" href="#_7-javac" aria-hidden="true">#</a> 7. Javac</h2><p>javac的语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>javac [ options ] [ sourcefiles ] [ classes] [ @argfiles ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>options：是一些参数，比如-cp，-d</li><li>sourcefiles：就是编译的java文件，如<code>HelloWorld.java</code>，可以是多个，并用空格隔开</li><li>classes：用来处理处理注解。暂时没搞懂怎么用</li><li>@argfiles，就是包含option或java文件列表的文件路径，用@符号开头，就像上面的@javaOptions.txt和@javaFiles.txt</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,84),u={href:"https://zhuanlan.zhihu.com/p/74229762",target:"_blank",rel:"noopener noreferrer"};function r(v,m){const s=t("ExternalLinkIcon");return e(),l("div",null,[d,a("p",null,[a("a",u,[c("第1期：抛开IDE，了解一下javac如何编译"),o(s)])])])}const b=n(p,[["render",r],["__file","java-command-javac.html.vue"]]);export{b as default};
