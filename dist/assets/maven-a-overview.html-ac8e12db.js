import{_ as t,W as l,X as p,Y as e,Z as a,$ as s,a0 as i,D as c}from"./framework-f64bc974.js";const o={},r=i(`<h1 id="maven核心知识" tabindex="-1"><a class="header-anchor" href="#maven核心知识" aria-hidden="true">#</a> Maven核心知识</h1><h2 id="_1-maven-简介" tabindex="-1"><a class="header-anchor" href="#_1-maven-简介" aria-hidden="true">#</a> 1. Maven 简介</h2><p>Maven 是一个项目管理工具，他包含了</p><ul><li>一个项目对象模型（Project Object Model）</li><li>一组标准集合</li><li>一个项目生命周期（Project Lifecycle）</li><li>一个依赖管理系统（Dependency Management System）</li><li>和用来运行定义在生命周期阶段（phase）中的插件（pulgin）目标（goal）的逻辑</li></ul><h2 id="_2-核心功能" tabindex="-1"><a class="header-anchor" href="#_2-核心功能" aria-hidden="true">#</a> 2. 核心功能</h2><ul><li>依赖管理：Maven工程对jar包的管理过程</li><li>项目构建</li></ul><h2 id="_3-仓库" tabindex="-1"><a class="header-anchor" href="#_3-仓库" aria-hidden="true">#</a> 3. 仓库</h2><ul><li>本地仓库</li><li>远程仓库（私服）</li><li>中央仓库</li></ul><h2 id="_4-maven-常用命令" tabindex="-1"><a class="header-anchor" href="#_4-maven-常用命令" aria-hidden="true">#</a> 4. Maven 常用命令</h2><ul><li>clean：删除项目中已经编译好的信息，删除target目录</li><li>compile：Maven工程的编译命令，用于编译项目的源代码，将<code>src/main/java</code>下的文件编译成class文件输出到target目录下</li><li>test：使用合适的单元测试框架运行测试</li><li>package：将编译好的代码打包成可分发的格式，如jar，war</li><li>install：安装包至本地仓库，已备本地的其它项目作为依赖使用</li><li>deploy: 复制最终的包至远程仓库，共享给其他开发人员和项目（通常和一次正式发布相关）</li></ul><p>每一个构建项目的命令都对应了maven底层一个插件</p><h2 id="_5-maven命令package、install、deploy-的联系和区别" tabindex="-1"><a class="header-anchor" href="#_5-maven命令package、install、deploy-的联系和区别" aria-hidden="true">#</a> 5. Maven命令package、install、deploy 的联系和区别</h2><ul><li><p>mvn clean package：</p><p>依次执行了clean、resources、compile、testResources、testCompile、test、jar（打包）等七个阶段</p></li><li><p>mvn clean install：</p><p>依次执行了 clean、resources、compile、testResuources、testComplie、jar（打包）、install 等8个阶段</p></li><li><p>mvn clean deploy:</p><p>依次执行了clean、resources、compile、testResuources、testComplie、jar（打包）、install、deploy等9个阶段</p></li></ul><p><strong>主要区别：</strong> package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。</p><p>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库。</p><p>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库。</p><h2 id="_6-maven-生命周期" tabindex="-1"><a class="header-anchor" href="#_6-maven-生命周期" aria-hidden="true">#</a> 6. Maven 生命周期</h2><p>清理生命周期：运行 mvn clean 将调用清理生命周期</p><p>默认生命周期：是一个软件应用程序构建过程的总体模型</p><p>compile、test、package、install、deploy</p><p>站点生命周期：为一个或者一组项目生成项目文档和报告，使用较少。</p><h2 id="_7-maven-依赖范围" tabindex="-1"><a class="header-anchor" href="#_7-maven-依赖范围" aria-hidden="true">#</a> 7. Maven 依赖范围</h2><ul><li><p>complie：默认范围、编译测试运行都有效</p></li><li><p>provided：编译和运行有效，最后在运行的时候不会加入</p><p>官方举了一个例子。比如在JavaEE web项目中我们需要使用servlet的API，但是Tomcat中已经提供这个jar，我们在编译和测试的时候需要使用这个api，但是部署到tomcat的时候，如果还加入servlet构建就会产生冲突，这个时候就可以使用provided。</p></li><li><p>runtime：测试和运行有效</p></li><li><p>test：测试有效</p></li><li><p>system：与本机系统关联，编译和测试时有效</p></li></ul><p>-　import：导入的范围，它只在使用dependencyManagement中，表示从其他pom中导入dependecy的配置。</p><h2 id="_8-依赖冲突" tabindex="-1"><a class="header-anchor" href="#_8-依赖冲突" aria-hidden="true">#</a> 8. 依赖冲突</h2><p>每个显示申明的类包都会依赖于一些其它的隐式类，这些隐式的类包会被maven间接依赖进来，因而可能造成一个我们不想要的类包的载入，严重的甚至会引起类包之间的冲突</p><p>要解决这个问题，首先就是要查看pom.xml 显式和隐式的依赖类包，然后通过这个类包树找出我们不想要的依赖类包，手工将其排除在外就可以了</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>unitils-database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.unitils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>  
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,29),d={href:"https://www.cnblogs.com/sgh1023/p/10900130.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.cnblogs.com/sgh1023/p/10900130.html",target:"_blank",rel:"noopener noreferrer"};function h(m,v){const n=c("ExternalLinkIcon");return l(),p("div",null,[r,e("p",null,[a("["),e("a",d,[a("Maven核心知识点梳理"),s(n)]),a("]("),e("a",u,[a("https://www.cnblogs.com/sgh1023/p/10900130.html"),s(n)]),a(")")])])}const k=t(o,[["render",h],["__file","maven-a-overview.html.vue"]]);export{k as default};
