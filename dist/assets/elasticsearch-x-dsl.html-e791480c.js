import{_ as e,W as i,X as l,Y as n,Z as s,$ as t,a0 as o,D as p}from"./framework-f64bc974.js";const c={},u=o(`<h1 id="es详解-查询-dsl查询之复合查询详解" tabindex="-1"><a class="header-anchor" href="#es详解-查询-dsl查询之复合查询详解" aria-hidden="true">#</a> ES详解 - 查询：DSL查询之复合查询详解</h1><blockquote><p>在查询中会有多种条件组合的查询，在ElasticSearch中叫复合查询。它提供了5种复合查询方式：<strong>bool query(布尔查询)</strong>、<strong>boosting query(提高查询)</strong>、<strong>constant_score（固定分数查询）</strong>、<strong>dis_max(最佳匹配查询）</strong>、<strong>function_score(函数查询）</strong>。</p></blockquote><h2 id="_0-复合查询引入" tabindex="-1"><a class="header-anchor" href="#_0-复合查询引入" aria-hidden="true">#</a> 0. 复合查询引入</h2><p>在前文中，我们使用<code>bool</code>查询来组合多个查询条件。</p><p>比如之前介绍的语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /bank/_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;must&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;age&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;40&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>,
      <span class="token string">&quot;must_not&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;state&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ID&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种查询就是本文要介绍的<strong>复合查询</strong>，并且bool查询只是复合查询一种。</p><h2 id="_1-bool-query-布尔查询" tabindex="-1"><a class="header-anchor" href="#_1-bool-query-布尔查询" aria-hidden="true">#</a> 1. bool query(布尔查询)</h2><blockquote><p>通过布尔逻辑将较小的查询组合成较大的查询。</p></blockquote><h3 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念" aria-hidden="true">#</a> 1.1 概念</h3><p>Bool查询语法有以下特点</p><ul><li>子查询可以任意顺序出现</li><li>可以嵌套多个查询，包括bool查询</li><li>如果bool查询中没有must条件，should中必须至少满足一条才会返回结果。</li></ul><p>bool查询包含四种操作符，分别是must,should,must_not,filter。他们均是一种数组，数组里面是对应的判断条件。</p><ul><li><code>must</code>： 必须匹配。贡献算分</li><li><code>must_not</code>：过滤子句，必须不能匹配，但不贡献算分</li><li><code>should</code>： 选择性匹配，至少满足一条。贡献算分</li><li><code>filter</code>： 过滤子句，必须匹配，但不贡献算分</li></ul><h3 id="_1-2-一些例子" tabindex="-1"><a class="header-anchor" href="#_1-2-一些例子" aria-hidden="true">#</a> 1.2 一些例子</h3><p>看下官方举例</p><ul><li>例子1</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST _search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;bool&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;must&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;user.id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;kimchy&quot;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;tags&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;production&quot;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;must_not&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;range&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;age&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;gte&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">10</span>, <span class="token string">&quot;lte&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;should&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;term&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;tags&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;env1&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>,
        <span class="token punctuation">{</span> <span class="token string">&quot;term&quot;</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;tags&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;deployed&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>,
      <span class="token string">&quot;minimum_should_match&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,
      <span class="token string">&quot;boost&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">1.0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在filter元素下指定的查询对评分没有影响 , 评分返回为0。分数仅受已指定查询的影响。</p><ul><li>例子2</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET _search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;status&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;active&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子查询查询为所有文档分配0分，因为没有指定评分查询。</p><ul><li>例子3</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET _search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;must&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;match_all&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;status&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;active&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此bool查询具有match_all查询，该查询为所有文档指定1.0分。</p><ul><li>例子4</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;should&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;name.first&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;shay&quot;</span>, <span class="token string">&quot;_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;first&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>,
        <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;name.last&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;banon&quot;</span>, <span class="token string">&quot;_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;last&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>,
      <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;terms&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;name.last&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;banon&quot;</span>, <span class="token string">&quot;kimchy&quot;</span> <span class="token punctuation">]</span>,
          <span class="token string">&quot;_name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;test&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每个query条件都可以有一个<code>_name</code>属性，用来追踪搜索出的数据到底match了哪个条件。</p><h2 id="_2-boosting-query-提高查询" tabindex="-1"><a class="header-anchor" href="#_2-boosting-query-提高查询" aria-hidden="true">#</a> 2. boosting query(提高查询)</h2><blockquote><p>不同于bool查询，bool查询中只要一个子查询条件不匹配那么搜索的数据就不会出现。而boosting query则是降低显示的权重/优先级（即score)。</p></blockquote><h3 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念" aria-hidden="true">#</a> 2.1 概念</h3><p>比如搜索逻辑是 name = &#39;apple&#39; and type =&#39;fruit&#39;，对于只满足部分条件的数据，不是不显示，而是降低显示的优先级（即score)</p><h3 id="_2-2-例子" tabindex="-1"><a class="header-anchor" href="#_2-2-例子" aria-hidden="true">#</a> 2.2 例子</h3><p>首先创建数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /test-dsl-boosting/_bulk
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Apple Mac&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Apple Fruit&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Apple employee like Apple Pie and Apple Juice&quot;</span> <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对匹配<code>pie</code>的做降级显示处理</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-boosting/_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;boosting&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;positive&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;apple&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;negative&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;pie&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;negative_boost&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0.5</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805032904414.png" alt="image-20220805032904414" tabindex="0" loading="lazy"><figcaption>image-20220805032904414</figcaption></figure><h2 id="_3-constant-score-固定分数查询" tabindex="-1"><a class="header-anchor" href="#_3-constant-score-固定分数查询" aria-hidden="true">#</a> 3. constant_score（固定分数查询）</h2><blockquote><p>查询某个条件时，固定的返回指定的score；显然当不需要计算score时，只需要filter条件即可，因为filter context忽略score。</p></blockquote><h3 id="_3-1-例子" tabindex="-1"><a class="header-anchor" href="#_3-1-例子" aria-hidden="true">#</a> 3.1 例子</h3><p>首先创建数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /test-dsl-constant/_bulk
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Apple Mac&quot;</span> <span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Apple Fruit&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询apple</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-constant/_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;constant_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;term&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;content&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;apple&quot;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;boost&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1.2</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805033131958.png" alt="image-20220805033131958" tabindex="0" loading="lazy"><figcaption>image-20220805033131958</figcaption></figure><h2 id="_4-dis-max-最佳匹配查询" tabindex="-1"><a class="header-anchor" href="#_4-dis-max-最佳匹配查询" aria-hidden="true">#</a> 4. dis_max(最佳匹配查询）</h2><blockquote><p>分离最大化查询（Disjunction Max Query）指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 。</p></blockquote><h3 id="_4-1-例子" tabindex="-1"><a class="header-anchor" href="#_4-1-例子" aria-hidden="true">#</a> 4.1 例子</h3><p>假设有个网站允许用户搜索博客的内容，以下面两篇博客内容文档为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>POST /test-dsl-dis-max/_bulk
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Quick brown rabbits&quot;</span>,<span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;Brown rabbits are commonly seen.&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span> <span class="token string">&quot;index&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Keeping pets healthy&quot;</span>,<span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;My quick brown fox eats rabbits on a regular basis.&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用户输入词组 “Brown fox” 然后点击搜索按钮。事先，我们并不知道用户的搜索项是会在 title 还是在 body 字段中被找到，但是，用户很有可能是想搜索相关的词组。用肉眼判断，文档 2 的匹配度更高，因为它同时包括要查找的两个词：</p><p>现在运行以下 bool 查询：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-dis-max/_search
<span class="token punctuation">{</span>
    <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;should&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>,
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805033531766.png" alt="image-20220805033531766" tabindex="0" loading="lazy"><figcaption>image-20220805033531766</figcaption></figure><p>为了理解导致这样的原因，需要看下如何计算评分的</p><ul><li><strong>should 条件的计算分数</strong></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-dis-max/_search
<span class="token punctuation">{</span>
    <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;bool&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;should&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>,
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要计算上述分数，首先要计算match的分数</p><blockquote><p>通过把Brown fox 拆词，分别计算每篇文档的分数</p></blockquote><ol><li>第一个match 中 <code>brown的分数</code></li></ol><p>doc 1 分数 = 0.6931471</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805033748897.png" alt="image-20220805033748897" tabindex="0" loading="lazy"><figcaption>image-20220805033748897</figcaption></figure><ol start="2"><li>title中没有fox，所以第一个match 中 <code>brown fox 的分数 = brown分数 + 0 = 0.6931471</code></li></ol><p>doc 1 分数 = 0.6931471 + 0 = 0.6931471</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805033933397.png" alt="image-20220805033933397" tabindex="0" loading="lazy"><figcaption>image-20220805033933397</figcaption></figure><ol start="3"><li>第二个 match 中 <code>brown分数</code></li></ol><p>doc 1 分数 = 0.21110919</p><p>doc 2 分数 = 0.160443</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034020096.png" alt="image-20220805034020096" tabindex="0" loading="lazy"><figcaption>image-20220805034020096</figcaption></figure><ol start="4"><li>第二个 match 中 <code>fox分数</code></li></ol><p>doc 1 分数 = 0</p><p>doc 2 分数 = 0.60996956</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034053756.png" alt="image-20220805034053756" tabindex="0" loading="lazy"><figcaption>image-20220805034053756</figcaption></figure><ol start="5"><li>所以第二个 match 中 <code>brown fox分数 = brown分数 + fox分数</code></li></ol><p>doc 1 分数 = 0.21110919 + 0 = 0.21110919</p><p>doc 2 分数 = 0.160443 + 0.60996956 = 0.77041256</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034224993.png" alt="image-20220805034224993" tabindex="0" loading="lazy"><figcaption>image-20220805034224993</figcaption></figure><ol start="6"><li>所以整个语句分数， <code>should分数 = 第一个match + 第二个match分数</code></li></ol><p>doc 1 分数 = 0.6931471 + 0.21110919 = 0.90425634</p><p>doc 2 分数 = 0 + 0.77041256 = 0.77041256</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034325939.png" alt="image-20220805034325939" tabindex="0" loading="lazy"><figcaption>image-20220805034325939</figcaption></figure><ul><li><strong>引入了dis_max</strong></li></ul><p>不使用 bool 查询，可以使用 dis_max 即分离 最大化查询（Disjunction Max Query） 。分离（Disjunction）的意思是 或（or） ，这与可以把结合（conjunction）理解成 与（and） 相对应。分离最大化查询（Disjunction Max Query）指的是： 将任何与任一查询匹配的文档作为结果返回，但只将最佳匹配的评分作为查询的评分结果返回 ：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-dis-max/_search
<span class="token punctuation">{</span>
    <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;dis_max&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;queries&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>,
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tie_breaker&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034447664.png" alt="image-20220805034447664" tabindex="0" loading="lazy"><figcaption>image-20220805034447664</figcaption></figure><p>0.77041256怎么来的呢？ 下文给你解释它如何计算出来的。</p><ul><li><strong>dis_max 条件的计算分数</strong></li></ul><p>分数 = 第一个匹配条件分数 + tie_breaker * 第二个匹配的条件的分数 ...</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /test-dsl-dis-max/_search
<span class="token punctuation">{</span>
    <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;dis_max&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;queries&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>,
                <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;body&quot;</span><span class="token builtin class-name">:</span>  <span class="token string">&quot;Brown fox&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>
            <span class="token punctuation">]</span>,
            <span class="token string">&quot;tie_breaker&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>doc 1 分数 = 0.6931471 + 0.21110919 * 0 = 0.6931471</p><p>doc 2 分数 = 0.77041256 = 0.77041256</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220805034624954.png" alt="image-20220805034624954" tabindex="0" loading="lazy"><figcaption>image-20220805034624954</figcaption></figure><p>这样你就能理解通过dis_max将doc 2 置前了， 当然这里如果缺省<code>tie_breaker</code>字段的话默认就是0，你还可以设置它的比例（在0到1之间）来控制排名。（显然值为1时和should查询是一致的）</p><h2 id="_5-function-score-函数查询" tabindex="-1"><a class="header-anchor" href="#_5-function-score-函数查询" aria-hidden="true">#</a> 5. function_score(函数查询）</h2><blockquote><p>简而言之就是用自定义function的方式来计算_score。</p></blockquote><p>可以ES有哪些自定义function呢？</p><ul><li><code>script_score</code> 使用自定义的脚本来完全控制分值计算逻辑。如果你需要以上预定义函数之外的功能，可以根据需要通过脚本进行实现。</li><li><code>weight</code> 对每份文档适用一个简单的提升，且该提升不会被归约：当weight为2时，结果为2 * _score。</li><li><code>random_score</code> 使用一致性随机分值计算来对每个用户采用不同的结果排序方式，对相同用户仍然使用相同的排序方式。</li><li><code>field_value_factor</code> 使用文档中某个字段的值来改变_score，比如将受欢迎程度或者投票数量考虑在内。</li><li><code>衰减函数(Decay Function)</code> - <code>linear</code>，<code>exp</code>，<code>gauss</code></li></ul><h3 id="_5-1-例子" tabindex="-1"><a class="header-anchor" href="#_5-1-例子" aria-hidden="true">#</a> 5.1 例子</h3><p>以最简单的random_score 为例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;function_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;match_all&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>,
      <span class="token string">&quot;boost&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;5&quot;</span>,
      <span class="token string">&quot;random_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>, 
      <span class="token string">&quot;boost_mode&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;multiply&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进一步的，它还可以使用上述function的组合(functions)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;function_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;match_all&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>,
      <span class="token string">&quot;boost&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;5&quot;</span>, 
      <span class="token string">&quot;functions&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>,
          <span class="token string">&quot;random_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>, 
          <span class="token string">&quot;weight&quot;</span><span class="token builtin class-name">:</span> <span class="token number">23</span>
        <span class="token punctuation">}</span>,
        <span class="token punctuation">{</span>
          <span class="token string">&quot;filter&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;cat&quot;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>,
          <span class="token string">&quot;weight&quot;</span><span class="token builtin class-name">:</span> <span class="token number">42</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>,
      <span class="token string">&quot;max_boost&quot;</span><span class="token builtin class-name">:</span> <span class="token number">42</span>,
      <span class="token string">&quot;score_mode&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;max&quot;</span>,
      <span class="token string">&quot;boost_mode&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;multiply&quot;</span>,
      <span class="token string">&quot;min_score&quot;</span><span class="token builtin class-name">:</span> <span class="token number">42</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>script_score 可以使用如下方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /_search
<span class="token punctuation">{</span>
  <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;function_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
      <span class="token string">&quot;query&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;match&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;elasticsearch&quot;</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token string">&quot;script_score&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;script&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;source&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Math.log(2 + doc[&#39;my-int&#39;].value)&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,107),r={href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.12/query-dsl-function-score-query.html",target:"_blank",rel:"noopener noreferrer"},d=n("blockquote",null,[n("p",null,"PS: 形成体系化认知以后，具体用的时候查询下即可。")],-1),k=n("h2",{id:"参考文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),s(" 参考文章")],-1),b={href:"https://pdai.tech/md/db/nosql-es/elasticsearch-x-dsl-com.html",target:"_blank",rel:"noopener noreferrer"},m=n("strong",null,"ES详解 - 查询：DSL查询之复合查询详解",-1);function v(g,q){const a=p("ExternalLinkIcon");return i(),l("div",null,[u,n("p",null,[s("更多相关内容，可以参考"),n("a",r,[s("官方文档"),t(a)])]),d,k,n("p",null,[n("a",b,[m,t(a)])])])}const _=e(c,[["render",v],["__file","elasticsearch-x-dsl.html.vue"]]);export{_ as default};
