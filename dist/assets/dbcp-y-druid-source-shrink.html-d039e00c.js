import{_ as a,W as e,X as t,Y as n,Z as p,$ as o,a0 as c,D as i}from"./framework-f64bc974.js";const l={},u=c(`<h1 id="druid源码学习-五-druiddatasource的shrink过程" tabindex="-1"><a class="header-anchor" href="#druid源码学习-五-druiddatasource的shrink过程" aria-hidden="true">#</a> Druid源码学习（五）-DruidDataSource的shrink过程</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>shrink方法是DestroyTask线程中回收连接的具体执行方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 回收连接线程
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DestroyTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token class-name">DestroyTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">shrink</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> keepAlive<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRemoveAbandoned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">removeAbandoned</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-shrink方法" tabindex="-1"><a class="header-anchor" href="#_2-shrink方法" aria-hidden="true">#</a> 2. shrink方法</h2><h3 id="_2-1-首先获得锁" tabindex="-1"><a class="header-anchor" href="#_2-1-首先获得锁" aria-hidden="true">#</a> 2.1 首先获得锁：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shrink</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> checkTime<span class="token punctuation">,</span> <span class="token keyword">boolean</span> keepAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//获得锁</span>
            lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-判断初始化状态是否完成" tabindex="-1"><a class="header-anchor" href="#_2-2-判断初始化状态是否完成" aria-hidden="true">#</a> 2.2 判断初始化状态是否完成</h3><p>要判断初始化状态是否完成，如果采用异步初始化，可能DestoryTask线程已经启动，但是连接池还没有初始化完成。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 要判断初始化状态是否完成，如果采用异步初始化，可能DestoryTask线程已经启动，但是连接池还没有初始化完成。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-对连接池中的连接进行遍历" tabindex="-1"><a class="header-anchor" href="#_2-3-对连接池中的连接进行遍历" aria-hidden="true">#</a> 2.3 对连接池中的连接进行遍历</h3><p>之后对连接池中的连接进行遍历，connections中，可连接的连接数记在poolingCount变量。 此时要记录一个checkCount，这个变量为 checkCount = poolingCount - minIdle;也就是checkCount为连接池中连接的数量减去最小空闲连接数设置minIdle。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 3. 对连接池中的连接进行遍历 ，connections中，可连接的连接数记在poolingCount变量。</span>
            <span class="token comment">//此时要记录一个checkCount，这个变量为 checkCount = poolingCount - minIdle;</span>
            <span class="token comment">// 也就是checkCount为连接池中连接的数量减去最小空闲连接数设置minIdle。</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> checkCount <span class="token operator">=</span> poolingCount <span class="token operator">-</span> minIdle<span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> currentTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> poolingCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-进入checktime逻辑" tabindex="-1"><a class="header-anchor" href="#_2-4-进入checktime逻辑" aria-hidden="true">#</a> 2.4 进入checkTime逻辑</h3><p>此后进入checkTime逻辑，checkTime是调用shrink传入的参数，通常DestroyTask的调用这个参数都为true。 此后check的参数有：</p><ul><li>判断物理连接是否超时：phyConnectTimeMillis &gt; phyTimeoutMillis。如果超时，则将当前连接标记到evictConnections数组并退出当前循环。</li><li>判断空闲时间是否超时： 如果空闲时间小于最小于配置的minEvictableIdleTimeMillis时间且同时小于配置的keepAliveBetweenTimeMillis(idleMillis &lt; minEvictableIdleTimeMillis &amp;&amp; idleMillis &lt; keepAliveBetweenTimeMillis) 则结束循环。 反之，当idleMillis大于minEvictableIdleTimeMillis或者大于maxEvictableIdleTimeMillis都被标记到evictConnections数组。</li><li>判断keepAlive是否超时：如果idleMillis &gt;= keepAliveBetweenTimeMillis，则标记到keepAliveConnections数组。</li></ul><p>如果checkTime为false,则将小于checkCount的全部连接都标记到evictConnections数组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 4. 此后进入checkTime逻辑，checkTime是调用shrink传入的参数，通常DestroyTask的调用这个参数都为true。</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>checkTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 4.1 判断物理连接是否超时：phyConnectTimeMillis &gt; phyTimeoutMillis。如果超时，则将当前连接标记到evictConnections数组并退出当前循环。</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>phyTimeoutMillis <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">long</span> phyConnectTimeMillis <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> connection<span class="token punctuation">.</span>connectTimeMillis<span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>phyConnectTimeMillis <span class="token operator">&gt;</span> phyTimeoutMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            evictConnections<span class="token punctuation">[</span>evictCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 4.2 判断空闲时间是否超时：</span>
                    <span class="token comment">//如果空闲时间小于最小于配置的minEvictableIdleTimeMillis时间且同时小于配置的keepAliveBetweenTimeMillis(idleMillis &lt; minEvictableIdleTimeMillis &amp;&amp; idleMillis &lt; keepAliveBetweenTimeMillis) 则结束循环。</span>
                    <span class="token comment">//反之，当idleMillis大于minEvictableIdleTimeMillis或者大于maxEvictableIdleTimeMillis都被标记到evictConnections数组。</span>
                    <span class="token keyword">long</span> idleMillis <span class="token operator">=</span> currentTimeMillis <span class="token operator">-</span> connection<span class="token punctuation">.</span>lastActiveTimeMillis<span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>idleMillis <span class="token operator">&lt;</span> minEvictableIdleTimeMillis
                            <span class="token operator">&amp;&amp;</span> idleMillis <span class="token operator">&lt;</span> keepAliveBetweenTimeMillis
                    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>idleMillis <span class="token operator">&gt;=</span> minEvictableIdleTimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkTime <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> checkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            evictConnections<span class="token punctuation">[</span>evictCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>idleMillis <span class="token operator">&gt;</span> maxEvictableIdleTimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            evictConnections<span class="token punctuation">[</span>evictCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>
                            <span class="token keyword">continue</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>

                    <span class="token comment">// 4.3 判断keepAlive是否超时：如果idleMillis &gt;= keepAliveBetweenTimeMillis，则标记到keepAliveConnections数组。</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>keepAlive <span class="token operator">&amp;&amp;</span> idleMillis <span class="token operator">&gt;=</span> keepAliveBetweenTimeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        keepAliveConnections<span class="token punctuation">[</span>keepAliveCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-checktime为false" tabindex="-1"><a class="header-anchor" href="#_2-5-checktime为false" aria-hidden="true">#</a> 2.5 checkTime为false</h3><p>如果checkTime为false,则将小于checkCount的全部连接都标记到evictConnections数组。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 5. 如果checkTime为false,则将小于checkCount的全部连接都标记到evictConnections数组。</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> checkCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        evictConnections<span class="token punctuation">[</span>evictCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> connection<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-removecount的处理" tabindex="-1"><a class="header-anchor" href="#_2-6-removecount的处理" aria-hidden="true">#</a> 2.6 removeCount的处理</h3><p>这之后进行removeCount的处理，removeCount = evictCount + keepAliveCount; 处理逻辑如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>removeCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将connections从removeCount到poolingCount的连接向前移动poolingCount - removeCount。</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>connections<span class="token punctuation">,</span> removeCount<span class="token punctuation">,</span> connections<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> poolingCount <span class="token operator">-</span> removeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//将poolingCount - removeCount后续部分都置为空。</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>connections<span class="token punctuation">,</span> poolingCount <span class="token operator">-</span> removeCount<span class="token punctuation">,</span> poolingCount<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poolingCount <span class="token operator">-=</span> removeCount<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个逻辑实质上是将connections中计算出来的前N项都移除。 之前一直不理解这个逻辑，实际上需要详细看一下for循环中的逻辑。for循环中，如果checkTime为false,则直接将前面checkCount个连接都移除。 反之，由于connections中，通过recycle方法，将放回的连接都放在connections数组的最后面。get的连接也是从connections的尾部获取，那么可以确保connections的连接，index小的连接最少被使用。 那么在这里确定了需要移除的连接数之后，直接就可以将connetions的前面checkCount个连接都移除。</p><h3 id="_2-7-解锁" tabindex="-1"><a class="header-anchor" href="#_2-7-解锁" aria-hidden="true">#</a> 2.7 解锁</h3><p>移除之后，可以解锁。之后对移除的连接进行处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-8-evict的连接处理" tabindex="-1"><a class="header-anchor" href="#_2-8-evict的连接处理" aria-hidden="true">#</a> 2.8 evict的连接处理</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>evictCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> evictCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DruidConnectionHolder</span> item <span class="token operator">=</span> evictConnections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//关闭连接</span>
        <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//更新计数器</span>
        destroyCountUpdater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//将evictConnections清空</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>evictConnections<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭连接并清空evictConnections。</p><h3 id="_2-9-keepalivecount连接处理" tabindex="-1"><a class="header-anchor" href="#_2-9-keepalivecount连接处理" aria-hidden="true">#</a> 2.9 keepAliveCount连接处理</h3><p>对于keepAliveCount连接，则需要分几种情况进行讨论：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 9. keepAliveCount连接处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keepAliveCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// keep order</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> keepAliveCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">DruidConnectionHolder</span> holer <span class="token operator">=</span> keepAliveConnections<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">Connection</span> connection <span class="token operator">=</span> holer<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                holer<span class="token punctuation">.</span><span class="token function">incrementKeepAliveCheckCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//校验连接是否还可用</span>
                <span class="token keyword">boolean</span> validate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">validateConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    validate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;keepAliveErr&quot;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token comment">// skip</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">boolean</span> discard <span class="token operator">=</span> <span class="token operator">!</span>validate<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    holer<span class="token punctuation">.</span>lastKeepTimeMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//如果可用，则直接put到connections中，放置到尾部。</span>
                    <span class="token keyword">boolean</span> putOk <span class="token operator">=</span> <span class="token function">put</span><span class="token punctuation">(</span>holer<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>putOk<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        discard <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">//如果不可用，则关闭连接</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>discard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// skip</span>
                    <span class="token punctuation">}</span>

                    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment">//加锁更新计数器</span>
                        discardCount<span class="token operator">++</span><span class="token punctuation">;</span>

                        <span class="token comment">//如果回收之后小于最小空闲连接</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeCount <span class="token operator">+</span> poolingCount <span class="token operator">&lt;=</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token comment">//通知可以创建新连接了</span>
                            <span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        <span class="token comment">//解锁</span>
                        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDataSourceStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addKeepAliveCheckCount</span><span class="token punctuation">(</span>keepAliveCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>keepAliveConnections<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于keepalive状态的连接，为了更好的复用该连接，则首先判断该连接是否可用，如果可用，则调用put方法，将该连接的状态更新之后，放置到连接池的尾部。 可见，shrink中，并非所有的连接都会关闭，对于keepalive状态的连接，需要判断是否可用。可用的连接还可再次复用。</p><h3 id="_2-10-keepalive状态-且连接池中的连接加上被使用的连接仍然小于minidle" tabindex="-1"><a class="header-anchor" href="#_2-10-keepalive状态-且连接池中的连接加上被使用的连接仍然小于minidle" aria-hidden="true">#</a> 2.10 keepAlive状态，且连接池中的连接加上被使用的连接仍然小于minIdle</h3><p>此时还有一种情况需要考虑，就是此时可用的连接仍然不够minIdle，那么连接池不满，需要继续创建连接。这个状态为needFill:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 10. keepAlive状态，且连接池中的连接加上被使用的连接仍然小于minIdle</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>needFill<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//加锁</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//如果minIdle 减去activeCount + poolingCount + createTaskCount 仍然不满，则通知创建线程创建连接</span>
                <span class="token keyword">int</span> fillCount <span class="token operator">=</span> minIdle <span class="token operator">-</span> <span class="token punctuation">(</span>activeCount <span class="token operator">+</span> poolingCount <span class="token operator">+</span> createTaskCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fillCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token comment">//解锁</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>onFatalError <span class="token operator">||</span> fatalErrorIncrement <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>needFill和onFatalError 都需要通知生产者继续创建连接。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,40),k={href:"https://blog.csdn.net/dhaibo1986/article/details/121312110?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"};function d(r,v){const s=i("ExternalLinkIcon");return e(),t("div",null,[u,n("p",null,[n("a",k,[p("Druid源码阅读5-DruidDataSource的shrink过程"),o(s)])])])}const b=a(l,[["render",d],["__file","dbcp-y-druid-source-shrink.html.vue"]]);export{b as default};
