import{_ as p,W as e,X as o,Y as n,Z as s,$ as t,a0 as c,D as u}from"./framework-f64bc974.js";const l={},i=n("h1",{id:"mall中sku的设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mall中sku的设计","aria-hidden":"true"},"#"),s(" mall中SKU的设计")],-1),k={href:"http://www.macrozheng.com/#/technology/product_sku",target:"_blank",rel:"noopener noreferrer"},r=c(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-1-商品的spu和sku" tabindex="-1"><a class="header-anchor" href="#_1-1-商品的spu和sku" aria-hidden="true">#</a> 1.1 商品的SPU和SKU</h3><ul><li>SPU（Standard Product Unit ）:指的是标准商品单位，商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个商品的特性；</li><li>SKU（Stock Keeping Unit）:库存量单位，是物理上不可分割的最小存货单元。</li></ul><p>举个例子：比如说现在有个手机商品叫小米8，小米8有不同的属性，比如有它有黑色和蓝色的，有32G和64G版本的。<strong>此时<code>小米8</code>就是一个SPU，而<code>小米8黑色64G</code>就是一个SKU</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220319204336926.png" alt="image-20220319204336926" tabindex="0" loading="lazy"><figcaption>image-20220319204336926</figcaption></figure><h2 id="_2-sku-的数据库设计" tabindex="-1"><a class="header-anchor" href="#_2-sku-的数据库设计" aria-hidden="true">#</a> 2. SKU 的数据库设计</h2><p>由于商品的销售属性是动态的，没法确定到底有多少个，此时我们可以改用JSON格式来存储，在<code>pms_sku_stock</code>表中添加了<code>sp_data</code>字段。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220319204927694.png" alt="image-20220319204927694" tabindex="0" loading="lazy"><figcaption>image-20220319204927694</figcaption></figure><p><code>sp_data</code>存储的就是一个JSON数组，比如颜色为黑色，容量为32G的手机存储信息如下。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;颜色&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;黑色&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;容量&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;32G&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>Copy to clipboardErrorCopied
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样修改以后，在原来的购物车表<code>oms_cart_item</code>和订单商品表<code>oms_order_item</code>中就都可以用JSON格式来存储销售属性了，使用的是<code>product_attr</code>字段。</p><h2 id="_3-sku-的代码层设计" tabindex="-1"><a class="header-anchor" href="#_3-sku-的代码层设计" aria-hidden="true">#</a> 3. Sku 的代码层设计</h2><h3 id="_3-1-商品关联sku的修改" tabindex="-1"><a class="header-anchor" href="#_3-1-商品关联sku的修改" aria-hidden="true">#</a> 3.1 商品关联SKU的修改</h3><p>首先我们需要和前端约定下，新增的商品SKU信息不传ID，要修改的商品SKU信息传ID，删除的直接不传SKU信息。然后我们可以根据传入的SKU信息来确定需要新增、修改、删除的SKU信息，这样就可以做到在更新商品SKU信息时，不改变原来商品SKU的ID了，具体流程如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 商品管理Service实现类
 * Created by macro on 2018/4/26.
 */</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PmsProductServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PmsProductService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleUpdateSkuStockList</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">PmsProductParam</span> productParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//当前的sku信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmsSkuStock</span><span class="token punctuation">&gt;</span></span> currSkuList <span class="token operator">=</span> productParam<span class="token punctuation">.</span><span class="token function">getSkuStockList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当前没有sku直接删除</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>currSkuList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">PmsSkuStockExample</span> skuStockExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsSkuStockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            skuStockExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andProductIdEqualTo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            skuStockMapper<span class="token punctuation">.</span><span class="token function">deleteByExample</span><span class="token punctuation">(</span>skuStockExample<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//获取初始sku信息</span>
        <span class="token class-name">PmsSkuStockExample</span> skuStockExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsSkuStockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        skuStockExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andProductIdEqualTo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmsSkuStock</span><span class="token punctuation">&gt;</span></span> oriStuList <span class="token operator">=</span> skuStockMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>skuStockExample<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取新增sku信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmsSkuStock</span><span class="token punctuation">&gt;</span></span> insertSkuList <span class="token operator">=</span> currSkuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取需要更新的sku信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmsSkuStock</span><span class="token punctuation">&gt;</span></span> updateSkuList <span class="token operator">=</span> currSkuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> updateSkuIds <span class="token operator">=</span> updateSkuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PmsSkuStock</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//获取需要删除的sku信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PmsSkuStock</span><span class="token punctuation">&gt;</span></span> removeSkuList <span class="token operator">=</span> oriStuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item<span class="token operator">-&gt;</span> <span class="token operator">!</span>updateSkuIds<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">handleSkuStockCode</span><span class="token punctuation">(</span>insertSkuList<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">handleSkuStockCode</span><span class="token punctuation">(</span>updateSkuList<span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//新增sku</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>insertSkuList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">relateAndInsertList</span><span class="token punctuation">(</span>skuStockDao<span class="token punctuation">,</span> insertSkuList<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//删除sku</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>removeSkuList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> removeSkuIds <span class="token operator">=</span> removeSkuList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PmsSkuStock</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">PmsSkuStockExample</span> removeExample <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PmsSkuStockExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            removeExample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andIdIn</span><span class="token punctuation">(</span>removeSkuIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
            skuStockMapper<span class="token punctuation">.</span><span class="token function">deleteByExample</span><span class="token punctuation">(</span>removeExample<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//修改sku</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>updateSkuList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PmsSkuStock</span> pmsSkuStock <span class="token operator">:</span> updateSkuList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                skuStockMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>pmsSkuStock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-相关问题" tabindex="-1"><a class="header-anchor" href="#_4-相关问题" aria-hidden="true">#</a> 4. 相关问题</h2><h3 id="_4-1-前端解析sku" tabindex="-1"><a class="header-anchor" href="#_4-1-前端解析sku" aria-hidden="true">#</a> 4.1 前端解析sku</h3><h4 id="_4-1-1-sku-设计背景" tabindex="-1"><a class="header-anchor" href="#_4-1-1-sku-设计背景" aria-hidden="true">#</a> 4.1.1 Sku 设计背景</h4><p>后端返回的数据结构是针对每条sku 的笛卡尔积，</p><p>例如颜色有3种，尺寸有5个。那么后端返回的就是15条数据。</p><p>数据类似如下</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220309231416451.png" alt="image-20220309231416451" tabindex="0" loading="lazy"><figcaption>image-20220309231416451</figcaption></figure><p>但我们前端不可能直接显示30条数据，我们希望按类别来选择。</p><p>例如：先选颜色，再选尺寸。确定唯一的sku。那么上面的数据结构就不符合我们的要求了</p><h4 id="_4-1-2-初始化sku流程" tabindex="-1"><a class="header-anchor" href="#_4-1-2-初始化sku流程" aria-hidden="true">#</a> 4.1.2 初始化SKU流程</h4><h5 id="_4-1-2-1-将spdata规格数据-按属性归类" tabindex="-1"><a class="header-anchor" href="#_4-1-2-1-将spdata规格数据-按属性归类" aria-hidden="true">#</a> 4.1.2.1 将spData规格数据，按属性归类</h5><p>将sp的数据，封装成Set。达到去重目的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>原始数据：
spData: &quot;[{&quot;key&quot;:&quot;颜色&quot;,&quot;value&quot;:&quot;绿色&quot;},{&quot;key&quot;:&quot;尺寸&quot;,&quot;value&quot;:&quot;X&quot;}]&quot;

按属性归类：
尺寸: Set(3) {&quot;XL&quot;, &quot;2XL&quot;, &quot;X&quot;} 
颜色: Set(2) {&quot;红色&quot;, &quot;绿色&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们需要前端做处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>			<span class="token comment">// 将sp的数据，封装成对象.如{颜色：[&#39;红色&#39;,&#39;绿色&#39;],尺寸：[&#39;X&#39;,&#39;XL&#39;]}</span>
				<span class="token keyword">let</span> specInfo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> skuStockList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">let</span> item <span class="token operator">=</span> skuStockList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">let</span> sp <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>spData<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token keyword">in</span> sp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						<span class="token keyword">let</span> skuKey <span class="token operator">=</span> sp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">;</span>
						<span class="token keyword">if</span> <span class="token punctuation">(</span>specInfo<span class="token punctuation">[</span>skuKey<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
							specInfo<span class="token punctuation">[</span>skuKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
						specInfo<span class="token punctuation">[</span>skuKey<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
						item<span class="token punctuation">[</span>skuKey<span class="token punctuation">]</span> <span class="token operator">=</span> sp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-2-2-将归类数据封装成json-对象" tabindex="-1"><a class="header-anchor" href="#_4-1-2-2-将归类数据封装成json-对象" aria-hidden="true">#</a> 4.1.2.2 将归类数据封装成JSON 对象</h5><p>因为我们选中状态，还需要设置属性。所以我们需要一个对象来封装、我们将将set 转为list</p><p>原始数据按属性归类：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>尺寸: Set(3) {&quot;XL&quot;, &quot;2XL&quot;, &quot;X&quot;} 
颜色: Set(2) {&quot;红色&quot;, &quot;绿色&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>转为list</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>尺寸: Array(3)
0: {value: &quot;XL&quot;, selected: true}
1: {value: &quot;2XL&quot;}
2: {value: &quot;X&quot;}
颜色: Array(2)
0: {value: &quot;红色&quot;, selected: true}
1: {value: &quot;绿色&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由原来的xl变成了{value: &quot;XL&quot;, selected: true}。selected 是为了方便设置选中情况</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> specInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">let</span> dataSet <span class="token operator">=</span> specInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">of</span> dataSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
							<span class="token literal-property property">value</span><span class="token operator">:</span> k
						<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					specInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-2-3-设置默认选中" tabindex="-1"><a class="header-anchor" href="#_4-1-2-3-设置默认选中" aria-hidden="true">#</a> 4.1.2.3 设置默认选中</h5><p>循环还是上一步的循环，只是为每条规格，设置了默认值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
checkSku<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 选中的规格Spec: {颜色：&#39;红色&#39;,尺码：&#39;x&#39;}</span>
				<span class="token keyword">let</span> checkSpec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> specInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					<span class="token keyword">let</span> dataSet <span class="token operator">=</span> specInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">of</span> dataSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
						list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
							<span class="token literal-property property">value</span><span class="token operator">:</span> k
						<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					specInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">;</span>
					list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>selected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					checkSpec<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-2-4-设置选中的库存信息" tabindex="-1"><a class="header-anchor" href="#_4-1-2-4-设置选中的库存信息" aria-hidden="true">#</a> 4.1.2.4 设置选中的库存信息</h5><p>我们刚一直在处理spData的数据，但我们spdata 要最终关联上库存信息</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">179</span>
lockStock<span class="token operator">:</span> <span class="token number">0</span>
lowStock<span class="token operator">:</span> <span class="token number">1</span>
price<span class="token operator">:</span> <span class="token number">11</span>
productId<span class="token operator">:</span> <span class="token number">37</span>
skuCode<span class="token operator">:</span> <span class="token string">&quot;sku1&quot;</span>
spData<span class="token operator">:</span> <span class="token string">&quot;[{&quot;</span>key<span class="token string">&quot;:&quot;</span>颜色<span class="token string">&quot;,&quot;</span>value<span class="token string">&quot;:&quot;</span>红色<span class="token string">&quot;},{&quot;</span>key<span class="token string">&quot;:&quot;</span>尺寸<span class="token string">&quot;,&quot;</span>value<span class="token string">&quot;:&quot;</span>XL<span class="token string">&quot;}]&quot;</span>
stock<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将sku库存列表遍历对比选中的库存信息</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 选择的sku item</span>
			<span class="token function">getCheckSukItem</span><span class="token punctuation">(</span><span class="token parameter">checkSpec</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>skuStockList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
					<span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>skuStockList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">let</span> isCheckItem <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> checkSpec<span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token keyword">let</span> v1 <span class="token operator">=</span>checkSpec<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
						<span class="token keyword">let</span> v2 <span class="token operator">=</span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>v1 <span class="token operator">!=</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span>
							isCheckItem <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
							<span class="token keyword">break</span><span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
					<span class="token keyword">if</span><span class="token punctuation">(</span>isCheckItem<span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token keyword">return</span> item<span class="token punctuation">;</span>
					<span class="token punctuation">}</span>
					
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220311222612306.png" alt="image-20220311222612306" tabindex="0" loading="lazy"><figcaption>image-20220311222612306</figcaption></figure><h4 id="_4-1-3-选中sku-流程" tabindex="-1"><a class="header-anchor" href="#_4-1-3-选中sku-流程" aria-hidden="true">#</a> 4.1.3. 选中SKU 流程</h4><h5 id="_4-1-3-1-选中状态设置" tabindex="-1"><a class="header-anchor" href="#_4-1-3-1-选中状态设置" aria-hidden="true">#</a> 4.1.3.1 选中状态设置</h5><p>针对选中的那个规则项列表做初始化选中状态，然后再设置选中项</p><p>例如：只初始化了颜色，设置成红色，而尺寸是不会改变的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
					<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token string">&#39;selected&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span><span class="token punctuation">)</span>

				<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;selected&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-3-2-遍历出所有选中规格" tabindex="-1"><a class="header-anchor" href="#_4-1-3-2-遍历出所有选中规格" aria-hidden="true">#</a> 4.1.3.2 遍历出所有选中规格</h5><p>因为规格可能存在多个，上面我们只能得到一个。我们希望遍历出所有选中的规格</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> checkSpec <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
				<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>specInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>
					<span class="token keyword">let</span> specList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>specInfo<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> specList<span class="token punctuation">)</span><span class="token punctuation">{</span>
						<span class="token keyword">let</span> spec <span class="token operator">=</span> specList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
						<span class="token keyword">if</span><span class="token punctuation">(</span>spec<span class="token punctuation">.</span>selected <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
							checkSpec<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> spec<span class="token punctuation">.</span>value
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span>
				<span class="token punctuation">}</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>checkSpec <span class="token operator">=</span> checkSpec<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-1-3-3-获取选中的库存信息" tabindex="-1"><a class="header-anchor" href="#_4-1-3-3-获取选中的库存信息" aria-hidden="true">#</a> 4.1.3.3 获取选中的库存信息</h5><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token keyword">let</span> specLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>specInfo<span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token keyword">let</span> checkSpecLength <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>checkSpec<span class="token punctuation">)</span><span class="token punctuation">.</span>length
<span class="token keyword">if</span><span class="token punctuation">(</span>specLength <span class="token operator">==</span> checkSpecLength<span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>checkSukItem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCheckSukItem</span><span class="token punctuation">(</span>checkSpec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-商品信息中的价格和sku价格" tabindex="-1"><a class="header-anchor" href="#_4-2-商品信息中的价格和sku价格" aria-hidden="true">#</a> 4.2 商品信息中的价格和sku价格</h3><p>我们计算商品价格时，基本上都是以sku价格为准，那么商品基本信息中的价格，我们可以理解为商品的最低价格，也就是多少多少元起。具体多少钱，看你选择的sku了</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,61),d={href:"http://www.macrozheng.com/#/technology/product_sku",target:"_blank",rel:"noopener noreferrer"};function v(m,b){const a=u("ExternalLinkIcon");return e(),o("div",null,[i,n("blockquote",null,[n("p",null,[s("该篇文章主要参考"),n("a",k,[s("mall官方文档"),t(a)]),s("，并结合自己的使用感受做的一些笔记")])]),r,n("p",null,[n("a",d,[s("mall官方文档"),t(a)])])])}const g=p(l,[["render",v],["__file","mall-sku.html.vue"]]);export{g as default};
