import{_ as r,W as o,X as n,Y as e,Z as i,$ as l,a0 as a,D as s}from"./framework-f64bc974.js";const h={},d=a('<h1 id="git工作流" tabindex="-1"><a class="header-anchor" href="#git工作流" aria-hidden="true">#</a> git工作流</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Git 有多种工作流方式，我们接下来就介绍几种常见的工作流，以便大家选择最适合自己的方式。</p><h2 id="_2-常见工作流" tabindex="-1"><a class="header-anchor" href="#_2-常见工作流" aria-hidden="true">#</a> 2. 常见工作流</h2><h3 id="_2-1-主干开发" tabindex="-1"><a class="header-anchor" href="#_2-1-主干开发" aria-hidden="true">#</a> 2.1 主干开发</h3><p>严格意义上说他并不算工作流，所有提交都在主干上</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211209213253441.png" alt="image-20211209213253441" tabindex="0" loading="lazy"><figcaption>image-20211209213253441</figcaption></figure><h4 id="_2-1-1-优势" tabindex="-1"><a class="header-anchor" href="#_2-1-1-优势" aria-hidden="true">#</a> 2.1.1 优势</h4><ul><li>方便，所有都提交到master</li><li>适合一些小组件/工具</li></ul><h4 id="_2-1-2-缺陷" tabindex="-1"><a class="header-anchor" href="#_2-1-2-缺陷" aria-hidden="true">#</a> 2.1.2 缺陷</h4><ul><li>缺乏有效管理</li></ul><h3 id="_2-2-git-flow" tabindex="-1"><a class="header-anchor" href="#_2-2-git-flow" aria-hidden="true">#</a> 2.2 Git Flow</h3><p><code>Git工作流</code> 是最广为人知的工作流。由<code>Vincent Driessen</code> 在2010年所发明，这种工作流建立在两个具有永久生命周期的分支基础之上：</p><ul><li>master分支 - 对应生产环境的线上代码。所有开发代码都会在某个时间点合并到master分支。</li><li>develop分支 - 对应的是预生产的代码。当功能分支开发完毕之后，会被合并到develop分支。</li></ul><p>与之并行的，是在开发周期之内，还会使用一些其他类型的分支以便支持开发流程：</p><ul><li>feature-* ( * 表示通配符，下同) 分支 — 功能分支用来开发下次发布包含的新功能。这些分支应当都是从develop分支派生出来，然后最终也应该合并回develop分支。</li><li>hotfix-* 分支 — 当master分支中含有不应出现的状况时，则有必要派生出hotfix分支对master分支进行紧急修复。这些分支应当派生自master 分支，并且最终应当同时合并回master 和develop 分支。</li><li>release-* 分支 — release 分支用于准备一次新的生产环境版本更新。创建release-*分支用来修复一些在测试环境未发现的小BUG，以及更新此版本的原信息。其应当派生自develop分支，并且最终同时合并回master 分支和 develop分支。</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211209213326278.png" alt="image-20211209213326278" tabindex="0" loading="lazy"><figcaption>image-20211209213326278</figcaption></figure><h4 id="_2-2-1-优势" tabindex="-1"><a class="header-anchor" href="#_2-2-1-优势" aria-hidden="true">#</a> 2.2.1 <strong>优势</strong></h4>',18),c=e("li",null,"在项目周期之内，该工作流保证任何时刻两个主要分支都是处于纯净状态的",-1),_=e("li",null,"由于遵循系统化的模式，因此分支命名容易理解",-1),u={href:"https://link.zhihu.com/?target=https%3A//github.com/nvie/gitflow",target:"_blank",rel:"noopener noreferrer"},g=e("li",null,"当项目中需要同时维护多个生产版本时，该工作流模式非常理想",-1),m=a('<h4 id="_2-2-2-缺陷" tabindex="-1"><a class="header-anchor" href="#_2-2-2-缺陷" aria-hidden="true">#</a> 2.2.2 <strong>缺陷</strong></h4><ul><li>Git 的历史记录将变得异常混乱，可读性很差</li><li>master / develop 分支的割裂使CI/CD流程变得更加困难</li><li>当项目维护单一生产环境版本时，该工作流则不适用</li></ul><h3 id="_2-3-github-flow" tabindex="-1"><a class="header-anchor" href="#_2-3-github-flow" aria-hidden="true">#</a> 2.3 <strong>GitHub Flow</strong></h3><p>GitHub 工作流是一个轻型的工作流，它是GitHub 在2011年 创建，其工作流遵循以下6个原则：</p>',4),p=e("li",null,"任何时刻的master分支代码都是可以用来部署的",-1),f=e("li",null,"任何新变更都需要从master派生出一个分支，并且为其起一个描述新变更内容的名字：比如 new-oauth2-scopes",-1),b=e("li",null,"在本地提交该新分支变更，并且应经常性的向服务器端该同名分支推送变更",-1),w={href:"https://link.zhihu.com/?target=http%3A//help.github.com/send-pull-requests/",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[i("只有在其他人review通过之后，新分支才允许合并到 "),e("code",null,"master"),i(" 分支")],-1),z=e("li",null,[i("一旦新分支被合并推送至"),e("code",null,"master"),i("分支，master分支应当立即进行部署")],-1),y=a('<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211209213349934.png" alt="image-20211209213349934" tabindex="0" loading="lazy"><figcaption>image-20211209213349934</figcaption></figure><h4 id="_2-3-1-优势" tabindex="-1"><a class="header-anchor" href="#_2-3-1-优势" aria-hidden="true">#</a> 2.3.1 <strong>优势</strong></h4><ul><li>该工作流对于CI/CD流程友好</li><li>是Git工作流的一种简版替换</li><li>当项目维护单一生产环境版本时，该工作流适用</li></ul><h4 id="_2-3-2-缺陷" tabindex="-1"><a class="header-anchor" href="#_2-3-2-缺陷" aria-hidden="true">#</a> 2.3.2 缺陷</h4>',4),G=e("li",null,"生产环境对应的代码极易处于不稳定状态",-1),k={href:"https://www.zhihu.com/search?q=%E5%8F%91%E5%B8%83%E8%AE%A1%E5%88%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D",target:"_blank",rel:"noopener noreferrer"},E=e("li",null,"该工作流并不涉及关于部署，环境，发布和问题等方面的解决方案",-1),v=e("li",null,"当项目维护多生产环境版本时，该工作流不适用",-1),A=e("h3",{id:"_2-4-gitlab-flow",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-4-gitlab-flow","aria-hidden":"true"},"#"),i(" 2.4 "),e("strong",null,"GitLab Flow")],-1),B={href:"https://link.zhihu.com/?target=https%3A//about.gitlab.com/2014/09/29/gitlab-flow/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Feature-driven_development",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"staging",-1),D=e("code",null,"production",-1),I=e("p",null,"GitLab工作流遵循以下11条原则：",-1),L=e("li",null,[i("使用功能分支进行开发，而不是直接在"),e("code",null,"master"),i("分支上提交代码 （如果你的开发主分支是 "),e("code",null,"master"),i("的话，下同）")],-1),q=e("li",null,[i("测试每一次commit，而不仅仅是对"),e("code",null,"master"),i("分支进行测试")],-1),H=e("li",null,"在所有commits上运行自动化测试（如果你的测试脚本运行时间超过5分钟，就让他们并行）",-1),V={href:"https://www.zhihu.com/search?q=%E5%90%88%E5%B9%B6%E4%BB%A3%E7%A0%81&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D",target:"_blank",rel:"noopener noreferrer"},j=a("<li>以分支名或者tag为准进行自动化的部署</li><li>tag由人来设定，而不是CI</li><li>发布版本应建立在tag上</li><li>已push的commits永远不要进行rebase</li><li>所有人从<code>master</code>派生新分支，最终合并回`master</li><li>修复bug时应该优先修复<code>master</code>分支的代码，修复之后再cherry-pick到线上分支</li><li>commit messages 要有意义</li>",7),N=a('<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211209213428242.png" alt="image-20211209213428242" tabindex="0" loading="lazy"><figcaption>image-20211209213428242</figcaption></figure><h4 id="_2-4-1-优势" tabindex="-1"><a class="header-anchor" href="#_2-4-1-优势" aria-hidden="true">#</a> 2.4.1 <strong>优势</strong></h4><ul><li>相对于前两种工作流，GitLab工作流定义了如何进行CI和CD流程的整合</li><li>提交历史会非常清爽，历史信息看上去会更具可读性</li><li>当项目维护单一生产环境版本时，该工作流适用</li></ul><h4 id="_2-4-2-缺陷" tabindex="-1"><a class="header-anchor" href="#_2-4-2-缺陷" aria-hidden="true">#</a> 2.4.2 <strong>缺陷</strong></h4><ul><li>比GitHub工作流更加复杂</li><li>当项目维护多生产环境版本时，将会变得和Git Flow一样复杂</li></ul><h3 id="_2-5-one-flow" tabindex="-1"><a class="header-anchor" href="#_2-5-one-flow" aria-hidden="true">#</a> 2.5 <strong>One Flow</strong></h3>',6),T={href:"https://link.zhihu.com/?target=http%3A//endoflineblog.com/gitflow-considered-harmful",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"develop",-1),S=e("h4",{id:"_2-5-1-优势",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-5-1-优势","aria-hidden":"true"},"#"),i(" 2.5.1 "),e("strong",null,"优势")],-1),X=e("ul",null,[e("li",null,"提交历史会非常清爽，历史信息看上去会更具可读性"),e("li",null,"灵活的团队协作机制"),e("li",null,"当项目维护单一生产环境版本时，该工作流适用")],-1),R=e("h4",{id:"_2-5-2-缺陷",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-5-2-缺陷","aria-hidden":"true"},"#"),i(" 2.5.2 "),e("strong",null,"缺陷")],-1),U=e("li",null,"自动化CI/CD能力的项目慎用",-1),W={href:"https://www.zhihu.com/search?q=%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A434078984%7D",target:"_blank",rel:"noopener noreferrer"},Y=e("li",null,"当项目维护多生产环境版本时，该工作流不适用",-1),Z=e("h2",{id:"参考文章",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),i(" 参考文章")],-1),$={href:"https://zhuanlan.zhihu.com/p/434078984",target:"_blank",rel:"noopener noreferrer"};function J(K,M){const t=s("ExternalLinkIcon");return o(),n("div",null,[d,e("ul",null,[c,_,e("li",null,[i("大多数Git工具都支持该工作流的"),e("a",u,[i("扩展工具"),l(t)])]),g]),m,e("ol",null,[p,f,b,e("li",null,[i("当你需要帮助、反馈，或认为新分支可以合并的时候，新建一个"),e("a",w,[i("pull request"),l(t)])]),x,z]),y,e("ul",null,[G,e("li",null,[i("对于依赖"),e("a",k,[i("发布计划"),l(t)]),i("的项目无法充分支持")]),E,v]),A,e("p",null,[i("GitLab工作流由"),e("a",B,[i("GitLab"),l(t)]),i("创建于2014年。这种工作流将"),e("a",C,[i("功能驱动的开发模式"),l(t)]),i("与问题跟踪结合在一起。与GitHub工作流最大的不同，是GitLab工作流新创建了与环境相关的分支（比如，"),F,i("分支和"),D,i("分支），适用于每次合并功能分支后不需马上部署至生产环境的项目（如SaaS软件，移动软件项目等）。")]),I,e("ol",null,[L,q,H,e("li",null,[i("在"),e("a",V,[i("合并代码"),l(t)]),i("之前进行code review，而不是在合并之后")]),j]),N,e("p",null,[i("One Flow 最初在"),e("a",T,[i("GitFlow considered harmful by Adam Ruka, 2015"),l(t)]),i("这篇文章中提出，作为Git Flow的另一种选择。使用One Flow需要满足的最重要的条件，是生产版本的每一次更新都基于前一生产版本，与Git Flow最大的区别是没有"),O,i("这一分支。")]),S,X,R,e("ul",null,[U,e("li",null,[i("功能分支不明确，不适用"),e("a",W,[i("持续集成"),l(t)])]),Y]),Z,e("p",null,[e("a",$,[i("四种常见的Git工作流"),l(t)])])])}const Q=r(h,[["render",J],["__file","git-x-gitflow.html.vue"]]);export{Q as default};
