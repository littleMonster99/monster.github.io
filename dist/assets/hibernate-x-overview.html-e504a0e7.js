import{_ as s,W as r,X as o,Y as e,Z as i,$ as n,a0 as t,D as l}from"./framework-f64bc974.js";const c={},h=t('<h1 id="hibernate概念与原理" tabindex="-1"><a class="header-anchor" href="#hibernate概念与原理" aria-hidden="true">#</a> Hibernate概念与原理</h1><h2 id="_1-hibernate的核心组件" tabindex="-1"><a class="header-anchor" href="#_1-hibernate的核心组件" aria-hidden="true">#</a> 1. Hibernate的核心组件</h2><ul><li>Configuration类：用来读取Hibernate配置文件，并生成SessionFactory对象。</li><li>SessionFactory接口：产生Session实例工厂。</li><li>Session接口：用来操作PO。它有get(),load(),save(),update()和delete()等方法用来对PO进行加载，保存，更新及删除等操作。它是Hibernate的核心接口。</li><li>Query接口：用来对PO进行查询操。它可以从Session的createQuery()方法生成。</li><li>Transaction接口：用来管理Hibernate事务，它主要方法有commit()和rollback()，可以从Session的beginTrancation()方法生成。</li></ul><h2 id="_2-persistent-object-持久化对象" tabindex="-1"><a class="header-anchor" href="#_2-persistent-object-持久化对象" aria-hidden="true">#</a> 2. Persistent Object（持久化对象）</h2><p>持久化对象可以是普通的Javabeans,惟一特殊的是它们与（仅一个）Session相关联。JavaBeans在Hibernate中存在三种状态：</p><ol><li><p>临时状态(transient)</p><p>当一个JavaBean对象在内存中孤立存在，不与数据库中的数据有任何关联关系时，那么这个JavaBeans对象就称为临时对象(TransientObject)。</p></li><li><p>持久化状态(persistent):</p><p>当一个JavaBean对象与一个Session相关联时，就变成持久化对象(PersistentObject)</p></li><li><p>脱管状态(detached):</p><p>在这个Session被关闭的同时，这个对象也会脱离持久化状态，就变成脱管状态(DetachedObject)，可以被应用程序的任何层自由使用，例如可以做与表示层打交道的数据舆对象(Data Transfer Object)。</p></li></ol><h2 id="_3-hibernate的运行过程" tabindex="-1"><a class="header-anchor" href="#_3-hibernate的运行过程" aria-hidden="true">#</a> 3. Hibernate的运行过程</h2><ol><li>应用程序先调用Configration类，该类读取Hibernate的配置文件及映射文件中的信息，并用这些信息生成一个SessionFactory对象。</li><li>然后从SessionFactory对象生成一个Session对象，并用Session对象生成Transaction对象;可通过Session对象的get(),load(),save(),update(),delete()和saveOrUpdate()等方法对PO进行加载，保存，更新，删除等操作;在查询的情况下，可通过Session对象生成一个Query对象，然后利用Query对象执行查询操作;如果没有异常，Transaction对象将 提交这些操作结果到数据库中。</li></ol><h4 id="_3-1-运行过程图" tabindex="-1"><a class="header-anchor" href="#_3-1-运行过程图" aria-hidden="true">#</a> 3.1 运行过程图</h4><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20201010142111373.png" alt="image-20201010142111373" tabindex="0" loading="lazy"><figcaption>image-20201010142111373</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20201010142134280.png" alt="image-20201010142134280" tabindex="0" loading="lazy"><figcaption>image-20201010142134280</figcaption></figure><h2 id="_4-hibernate工作原理总结" tabindex="-1"><a class="header-anchor" href="#_4-hibernate工作原理总结" aria-hidden="true">#</a> 4. hibernate工作原理总结</h2>',12),d={href:"http://baike.baidu.com/view/2117618.htm",target:"_blank",rel:"noopener noreferrer"},p=t("<li><p>由hibernate.cfg.xml中的&lt;mappingresource=&quot;com/xx/User.hbm.xml&quot;/&gt;读取解析映射信息。</p></li><li><p>通过config.buildSessionFactory();//得到sessionFactory。</p></li><li><p>sessionFactory.openSession();//得到session。</p></li><li><p>session.beginTransaction();//开启事务。</p></li><li><p>persistent operate;</p></li><li><p>session.getTransaction().commit();//提交事务</p></li><li><p>关闭session;</p></li><li><p>关闭sessionFactory;</p></li>",8),b=e("h2",{id:"参考文章",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),i(" 参考文章")],-1),g={href:"https://blog.csdn.net/lmb55/article/details/46536925",target:"_blank",rel:"noopener noreferrer"};function u(m,_){const a=l("ExternalLinkIcon");return r(),o("div",null,[h,e("ol",null,[e("li",null,[e("p",null,[i("通过Configuration().configure();读取并解析hibernate.cfg.xml"),e("a",d,[i("配置文件"),n(a)]),i("。")])]),p]),b,e("p",null,[e("a",g,[i("Hibernate基本原理及概念详解"),n(a)])])])}const x=s(c,[["render",u],["__file","hibernate-x-overview.html.vue"]]);export{x as default};
