import{_ as o,W as p,X as i,Y as n,Z as s,$ as e,a0 as t,D as c}from"./framework-f64bc974.js";const r={},l=t('<h1 id="elasticsearch入门" tabindex="-1"><a class="header-anchor" href="#elasticsearch入门" aria-hidden="true">#</a> Elasticsearch入门</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Elasticsearch 是一个分布式、可扩展、实时的搜索与数据分析引擎。 它能从项目一开始就赋予你的数据以搜索、分析和探索的能力，可用于实现全文搜索和实时数据统计。</p><p>它可以快速地储存、搜索和分析海量数据。维基百科、Stack Overflow、Github 都采用它。</p><h2 id="_2-安装" tabindex="-1"><a class="header-anchor" href="#_2-安装" aria-hidden="true">#</a> 2. 安装</h2><p><a href="microservice/log/elk/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86">安装参考</a>:</p>',6),u={href:"http://java.isture.com/microservice/log/elk/ELK%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86.html",target:"_blank",rel:"noopener noreferrer"},d=t(`<p>通过docker 安装ELK</p><h2 id="_3-基本概念" tabindex="-1"><a class="header-anchor" href="#_3-基本概念" aria-hidden="true">#</a> 3. 基本概念</h2><h3 id="_3-1-node-与-cluster" tabindex="-1"><a class="header-anchor" href="#_3-1-node-与-cluster" aria-hidden="true">#</a> 3.1 Node 与 Cluster</h3><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。</p><p>单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><h3 id="_3-2-index" tabindex="-1"><a class="header-anchor" href="#_3-2-index" aria-hidden="true">#</a> 3.2 Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引（Inverted Index）。查找数据的时候，直接查找该索引。</p><p>所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。它是单个数据库的同义词。每个 Index （即数据库）的名字必须是小写。</p><p>下面的命令可以查看当前节点的所有 Index。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> GET <span class="token string">&#39;http://localhost:9200/_cat/indices?v&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20201019140504439.png" alt="image-20201019140504439" tabindex="0" loading="lazy"><figcaption>image-20201019140504439</figcaption></figure><h3 id="_3-3-document" tabindex="-1"><a class="header-anchor" href="#_3-3-document" aria-hidden="true">#</a> 3.3 Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。</p><p>Document 使用 JSON 格式表示，下面是一个例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;工程师&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;desc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;数据库管理&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率。</p><h3 id="_3-4-type" tabindex="-1"><a class="header-anchor" href="#_3-4-type" aria-hidden="true">#</a> 3.4 Type</h3><p>Document 可以分组，比如<code>weather</code>这个 Index 里面，可以按城市分组（北京和上海），也可以按气候分组（晴天和雨天）。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document。</p>`,18),v=n("code",null,"id",-1),k={href:"https://www.elastic.co/guide/en/elasticsearch/guide/current/mapping.html",target:"_blank",rel:"noopener noreferrer"},q=n("code",null,"products",-1),b=n("code",null,"logs",-1),m=t(`<p>下面的命令可以列出每个 Index 所包含的 Type。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/_mapping?pretty=true&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_4-新建和删除-index" tabindex="-1"><a class="header-anchor" href="#_4-新建和删除-index" aria-hidden="true">#</a> 4. 新建和删除 Index</h2><p>新建 Index，可以直接向 Elastic 服务器发出 PUT 请求。下面的例子是新建一个名叫<code>weather</code>的 Index。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> PUT <span class="token string">&#39;localhost:9200/weather&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>服务器返回一个 JSON 对象，里面的<code>acknowledged</code>字段表示操作成功。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;acknowledged&quot;</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;shards_acknowledged&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们发出 DELETE 请求，删除这个 Index。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE <span class="token string">&#39;localhost:9200/weather&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_5-数据操作" tabindex="-1"><a class="header-anchor" href="#_5-数据操作" aria-hidden="true">#</a> 5. 数据操作</h2><h3 id="_5-1-新增记录" tabindex="-1"><a class="header-anchor" href="#_5-1-新增记录" aria-hidden="true">#</a> 5.1 新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录。比如，向<code>/accounts/person</code>发送请求，就可以新增一条人员记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span>  <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type: application/json&quot;</span> <span class="token parameter variable">-X</span> PUT <span class="token string">&#39;localhost:9200/accounts/person/1&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;user&quot;: &quot;张三&quot;,
  &quot;title&quot;: &quot;工程师&quot;,
  &quot;desc&quot;: &quot;数据库管理&quot;
}&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务器返回的 JSON 对象，会给出 Index、Type、Id、Version 等信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;accounts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_version&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;result&quot;</span><span class="token operator">:</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_shards&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string-property property">&quot;successful&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string-property property">&quot;failed&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;created&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你仔细看，会发现请求路径是<code>/accounts/person/1</code>，最后的<code>1</code>是该条记录的 Id。它不一定是数字，任意字符串（比如<code>abc</code>）都可以。</p><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">&#39;localhost:9200/accounts/person&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;user&quot;: &quot;李四&quot;,
  &quot;title&quot;: &quot;工程师&quot;,
  &quot;desc&quot;: &quot;系统管理&quot;
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，向<code>/accounts/person</code>发出一个 POST 请求，添加一个记录。这时，服务器返回的 JSON 对象里面，<code>_id</code>字段就是一个随机字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;accounts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;AV3qGfrC6jMbsbXb6k1p&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_version&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;result&quot;</span><span class="token operator">:</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_shards&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string-property property">&quot;successful&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string-property property">&quot;failed&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;created&quot;</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，如果没有先创建 Index（这个例子是<code>accounts</code>），直接执行上面的命令，Elastic 也不会报错，而是直接生成指定的 Index。</p><h3 id="_5-2-查看记录" tabindex="-1"><a class="header-anchor" href="#_5-2-查看记录" aria-hidden="true">#</a> 5.2 查看记录</h3><p>向<code>/Index/Type/Id</code>发出 GET 请求，就可以查看这条记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/1?pretty=true&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码请求查看<code>/accounts/person/1</code>这条记录，URL 的参数**<code>pretty=true</code>表示以易读的格式返回**。</p><p>返回的数据中，<code>found</code>字段表示查询成功，<code>_source</code>字段返回原始记录。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;accounts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;found&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_source&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;user&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;工程师&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;desc&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;数据库管理&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 Id 不正确，就查不到数据，<code>found</code>字段就是<code>false</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/weather/beijing/abc?pretty=true&#39;</span>

<span class="token punctuation">{</span>
  <span class="token string">&quot;_index&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;accounts&quot;</span>,
  <span class="token string">&quot;_type&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;person&quot;</span>,
  <span class="token string">&quot;_id&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;abc&quot;</span>,
  <span class="token string">&quot;found&quot;</span> <span class="token builtin class-name">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-删除记录" tabindex="-1"><a class="header-anchor" href="#_5-3-删除记录" aria-hidden="true">#</a> 5.3 删除记录</h3><p>删除记录就是发出 DELETE 请求。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> DELETE <span class="token string">&#39;localhost:9200/accounts/person/1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-4-更新记录" tabindex="-1"><a class="header-anchor" href="#_5-4-更新记录" aria-hidden="true">#</a> 5.4 更新记录</h3><p>更新记录就是使用 PUT 请求，重新发送一次数据。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token parameter variable">-X</span> PUT <span class="token string">&#39;localhost:9200/accounts/person/1&#39;</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
    &quot;user&quot; : &quot;张三&quot;,
    &quot;title&quot; : &quot;工程师&quot;,
    &quot;desc&quot; : &quot;数据库管理，软件开发&quot;
}&#39;</span> 

<span class="token punctuation">{</span>
  <span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;accounts&quot;</span>,
  <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;person&quot;</span>,
  <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;1&quot;</span>,
  <span class="token string">&quot;_version&quot;</span>:2,
  <span class="token string">&quot;result&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;updated&quot;</span>,
  <span class="token string">&quot;_shards&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;total&quot;</span>:2,<span class="token string">&quot;successful&quot;</span>:1,<span class="token string">&quot;failed&quot;</span>:0<span class="token punctuation">}</span>,
  <span class="token string">&quot;created&quot;</span>:false
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，我们将原始数据从&quot;数据库管理&quot;改成&quot;数据库管理，软件开发&quot;。 返回结果里面，有几个字段发生了变化。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;_version&quot;</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,
<span class="token string">&quot;result&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;updated&quot;</span>,
<span class="token string">&quot;created&quot;</span> <span class="token builtin class-name">:</span> <span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，记录的 Id 没变，但是版本（version）从<code>1</code>变成<code>2</code>，操作类型（result）从<code>created</code>变成<code>updated</code>，<code>created</code>字段变成<code>false</code>，因为这次不是新建记录。</p><h2 id="_6-数据查询" tabindex="-1"><a class="header-anchor" href="#_6-数据查询" aria-hidden="true">#</a> 6. 数据查询</h2><h3 id="_6-1-返回所有记录" tabindex="-1"><a class="header-anchor" href="#_6-1-返回所有记录" aria-hidden="true">#</a> 6.1 返回所有记录</h3><p>使用 GET 方法，直接请求<code>/Index/Type/_search</code>，就会返回所有记录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>

<span class="token punctuation">{</span>
  <span class="token string">&quot;took&quot;</span>:2,
  <span class="token string">&quot;timed_out&quot;</span>:false,
  <span class="token string">&quot;_shards&quot;</span>:<span class="token punctuation">{</span><span class="token string">&quot;total&quot;</span>:5,<span class="token string">&quot;successful&quot;</span>:5,<span class="token string">&quot;failed&quot;</span>:0<span class="token punctuation">}</span>,
  <span class="token string">&quot;hits&quot;</span>:<span class="token punctuation">{</span>
    <span class="token string">&quot;total&quot;</span>:2,
    <span class="token string">&quot;max_score&quot;</span>:1.0,
    <span class="token string">&quot;hits&quot;</span>:<span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;accounts&quot;</span>,
        <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;person&quot;</span>,
        <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;AV3qGfrC6jMbsbXb6k1p&quot;</span>,
        <span class="token string">&quot;_score&quot;</span>:1.0,
        <span class="token string">&quot;_source&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;user&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;李四&quot;</span>,
          <span class="token string">&quot;title&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;工程师&quot;</span>,
          <span class="token string">&quot;desc&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;系统管理&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>,
      <span class="token punctuation">{</span>
        <span class="token string">&quot;_index&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;accounts&quot;</span>,
        <span class="token string">&quot;_type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;person&quot;</span>,
        <span class="token string">&quot;_id&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;1&quot;</span>,
        <span class="token string">&quot;_score&quot;</span>:1.0,
        <span class="token string">&quot;_source&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
          <span class="token string">&quot;user&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;张三&quot;</span>,
          <span class="token string">&quot;title&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;工程师&quot;</span>,
          <span class="token string">&quot;desc&quot;</span> <span class="token builtin class-name">:</span> <span class="token string">&quot;数据库管理，软件开发&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，返回结果的 <code>took</code>字段表示该操作的耗时（单位为毫秒），<code>timed_out</code>字段表示是否超时，<code>hits</code>字段表示命中的记录，里面子字段的含义如下。</p><ul><li><code>total</code>：返回记录数，本例是2条。</li><li><code>max_score</code>：最高的匹配程度，本例是<code>1.0</code>。</li><li><code>hits</code>：返回的记录组成的数组。</li></ul><p>返回的记录中，每条记录都有一个<code>_score</code>字段，表示匹配的程序，默认是按照这个字段降序排列。</p><h3 id="_6-2-全文搜索" tabindex="-1"><a class="header-anchor" href="#_6-2-全文搜索" aria-hidden="true">#</a> 6.2 全文搜索</h3>`,46),g={href:"https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl.html",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>  <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;query&quot; : { &quot;match&quot; : { &quot;desc&quot; : &quot;软件&quot; }}
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),_={href:"https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-match-query.html",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"desc",-1),f=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;took&quot;</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;timed_out&quot;</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;_shards&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string-property property">&quot;successful&quot;</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string-property property">&quot;failed&quot;</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;hits&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;total&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;max_score&quot;</span><span class="token operator">:</span><span class="token number">0.28582606</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;hits&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token string-property property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;accounts&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;person&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;_score&quot;</span><span class="token operator">:</span><span class="token number">0.28582606</span><span class="token punctuation">,</span>
        <span class="token string-property property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&quot;user&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;title&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;工程师&quot;</span><span class="token punctuation">,</span>
          <span class="token string-property property">&quot;desc&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;数据库管理，软件开发&quot;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elastic 默认一次返回10条结果，可以通过<code>size</code>字段改变这个设置。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>  <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;query&quot; : { &quot;match&quot; : { &quot;desc&quot; : &quot;管理&quot; }},
  &quot;size&quot;: 1
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定，每次只返回一条结果。</p><p>还可以通过<code>from</code>字段，指定位移。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>  <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;query&quot; : { &quot;match&quot; : { &quot;desc&quot; : &quot;管理&quot; }},
  &quot;from&quot;: 1,
  &quot;size&quot;: 1
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定，从位置1开始（默认是从位置0开始），只返回一条结果。</p><h3 id="_6-3-逻辑运算" tabindex="-1"><a class="header-anchor" href="#_6-3-逻辑运算" aria-hidden="true">#</a> 6.3 逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是<code>or</code>关系。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>  <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;query&quot; : { &quot;match&quot; : { &quot;desc&quot; : &quot;软件 系统&quot; }}
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码搜索的是<code>软件 or 系统</code>。</p>`,11),x=n("code",null,"and",-1),E={href:"https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-bool-query.html",target:"_blank",rel:"noopener noreferrer"},I=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">curl</span> <span class="token string">&#39;localhost:9200/accounts/person/_search&#39;</span>  <span class="token parameter variable">-d</span> <span class="token string">&#39;
{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        { &quot;match&quot;: { &quot;desc&quot;: &quot;软件&quot; } },
        { &quot;match&quot;: { &quot;desc&quot;: &quot;系统&quot; } }
      ]
    }
  }
}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,2),T={href:"https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html",target:"_blank",rel:"noopener noreferrer"};function j(w,$){const a=c("ExternalLinkIcon");return p(),i("div",null,[l,n("p",null,[n("a",u,[s("http://java.isture.com/microservice/log/elk/ELK日志收集.html"),e(a)])]),d,n("p",null,[s("不同的 Type 应该有相似的结构（schema），举例来说，"),v,s("字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的"),n("a",k,[s("一个区别"),e(a)]),s("。性质完全不同的数据（比如"),q,s("和"),b,s("）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。")]),m,n("p",null,[s("Elastic 的查询非常特别，使用自己的"),n("a",g,[s("查询语法"),e(a)]),s("，要求 GET 请求带有数据体。")]),h,n("p",null,[s("上面代码使用 "),n("a",_,[s("Match 查询"),e(a)]),s("，指定的匹配条件是"),y,s('字段里面包含"软件"这个词。返回结果如下。')]),f,n("p",null,[s("如果要执行多个关键词的"),x,s("搜索，必须使用"),n("a",E,[s("布尔查询"),e(a)]),s("。")]),I,n("p",null,[n("a",T,[s("全文搜索引擎 Elasticsearch 入门教程"),e(a)])])])}const L=o(r,[["render",j],["__file","elasticsearch-started.html.vue"]]);export{L as default};
