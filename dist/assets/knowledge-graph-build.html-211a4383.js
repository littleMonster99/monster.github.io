import{_ as i,W as s,X as t,Y as a,Z as e,$ as o,a0 as g,D as l}from"./framework-f64bc974.js";const r={},p=g(`<h1 id="知识图谱-构建全流程" tabindex="-1"><a class="header-anchor" href="#知识图谱-构建全流程" aria-hidden="true">#</a> 知识图谱 - 构建全流程</h1><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111190352057.png" alt="image-20230111190352057" tabindex="0" loading="lazy"><figcaption>image-20230111190352057</figcaption></figure><h2 id="_1-知识图谱简介" tabindex="-1"><a class="header-anchor" href="#_1-知识图谱简介" aria-hidden="true">#</a> 1. 知识图谱简介</h2><p>知识图谱，是结构化的语义知识库，用于迅速描述物理世界中的概念及其相互关系，通过知识图谱能够将Web上的信息、数据以及链接关系聚集为知识，使信息资源更易于计算、理解以及评价，并能实现知识的快速响应和推理。</p><h3 id="_1-1-广泛应用于各领域" tabindex="-1"><a class="header-anchor" href="#_1-1-广泛应用于各领域" aria-hidden="true">#</a> 1.1 广泛应用于各领域</h3><p>当下知识图谱已在工业领域得到了广泛应用，如搜索领域的Google搜索、百度搜索，社交领域的领英经济图谱，企业信息领域的天眼查企业图谱，电商领域的淘宝商品图谱，O2O领域的美团知识大脑，医疗领域的丁香园知识图谱，以及工业制造业知识图谱等。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111191730113.png" alt="image-20230111191730113" tabindex="0" loading="lazy"><figcaption>image-20230111191730113</figcaption></figure><p>在知识图谱技术发展初期，很多企业和科研机构会采用自顶向下的方式构建基础知识库，如 Freebase。随着自动知识抽取与加工技术的不断成熟，当前的知识图谱大多采用自底向上的方式构建，如 Google 的 Knowledge Vault 和微软的 Satori 知识库。</p><h3 id="_1-2-构建技术分类" tabindex="-1"><a class="header-anchor" href="#_1-2-构建技术分类" aria-hidden="true">#</a> 1.2 构建技术分类</h3><p>知识图谱的构建技术主要有自顶向下和自底向上两种。</p><ul><li><strong>自顶向下构建</strong>：借助百科类网站等结构化数据源，从高质量数据中提取本体和模式信息，加入到知识库里。</li><li><strong>自底向上构建</strong>：借助一定的技术手段，从公开采集的数据中提取出资源模式，选择其中置信度较高的信息，加入到知识库中。</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111191900691.png" alt="image-20230111191900691" tabindex="0" loading="lazy"><figcaption>image-20230111191900691</figcaption></figure><h3 id="_1-3-实体-关系-实体-三元组" tabindex="-1"><a class="header-anchor" href="#_1-3-实体-关系-实体-三元组" aria-hidden="true">#</a> 1.3 “实体-关系-实体”三元组</h3><p>下图是典型的知识图谱样例示意图。可以看到，“图谱”中有很多节点，如果两个节点之间存在关系，他们就会被一条无向边连接在一起，这个节点我们称为<strong>实体（Entity）</strong>，节点之间的这条边，我们称为<strong>关系（Relationship）</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111192029477.png" alt="image-20230111192029477" tabindex="0" loading="lazy"><figcaption>image-20230111192029477</figcaption></figure><p>知识图谱的基本单位，就是“<strong>实体(Entity)-关系(Relationship)-实体(Entity)</strong>” 构成的三元组，这也是知识图谱的核心</p><h2 id="_2-数据类型和存储方式" tabindex="-1"><a class="header-anchor" href="#_2-数据类型和存储方式" aria-hidden="true">#</a> 2. 数据类型和存储方式</h2><p>知识图谱的原始数据类型一般来说有三类（也是互联网上的三类原始数据）：</p><ul><li><strong>结构化数据（Structed Data）</strong>，如：关系数据库、链接数据</li><li><strong>半结构化数据（Semi-Structured Data）</strong>，如：XML、JSON、百科</li><li><strong>非结构化数据（Unstructured Data）</strong>，如：图片、音频、视频</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111192243409.png" alt="image-20230111192243409" tabindex="0" loading="lazy"><figcaption>image-20230111192243409</figcaption></figure><p>典型的半结构化数据样例如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111192303618.png" alt="image-20230111192303618" tabindex="0" loading="lazy"><figcaption>image-20230111192303618</figcaption></figure><p><strong>如何存储上面这三类数据类型呢？</strong></p><blockquote><p>一般有两种选择：可以通过RDF（资源描述框架）这样的规范存储格式来进行存储，比较常用的有Jena等。</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RDF</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Description</span> <span class="token attr-name">about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.w3.org/RDF/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>HanXinzi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>homepage</span><span class="token punctuation">&gt;</span></span> https://www.showmeai.tech <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>homepage</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Description</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RDF</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>另一种方法是使用图数据库来进行存储，常用的有Neo4j等。</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111192405260.png" alt="image-20230111192405260" tabindex="0" loading="lazy"><figcaption>image-20230111192405260</figcaption></figure><p><strong>截止目前为止，看起来知识图谱主要是一堆三元组，那用关系数据库来存储可以吗？</strong></p><p>对，从技术上来说，用关系数据库来存储知识图谱（尤其是简单结构的知识图谱），是完全没问题的。但一旦知识图谱变复杂，用传统的「关系数据存储」，查询效率会显著低于「图数据库」。在一些涉及到2,3度的关联查询场景，图数据库能把查询效率提升几千倍甚至几百万倍。</p><p>而且基于图的存储在设计上会非常灵活，一般只需要局部的改动即可。当你的场景数据规模较大的时候，建议直接用图数据库来进行存储。</p><h2 id="_3-知识图谱的架构" tabindex="-1"><a class="header-anchor" href="#_3-知识图谱的架构" aria-hidden="true">#</a> 3. 知识图谱的架构</h2><p>知识图谱的架构主要可以被分为：</p><ul><li><strong>逻辑架构</strong></li><li><strong>技术架构</strong></li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111192707144.png" alt="image-20230111192707144" tabindex="0" loading="lazy"><figcaption>image-20230111192707144</figcaption></figure><h3 id="_3-1-逻辑架构" tabindex="-1"><a class="header-anchor" href="#_3-1-逻辑架构" aria-hidden="true">#</a> 3.1 逻辑架构</h3><p>在逻辑上，我们通常将知识图谱划分为两个层次：数据层和模式层。</p><ul><li><strong>模式层</strong>：在数据层之上，是知识图谱的核心，存储经过提炼的知识，通常通过本体库来管理这一层（本体库可以理解为面向对象里的“类”这样一个概念，本体库就储存着知识图谱的类）。</li><li><strong>数据层</strong>：存储真实的数据。</li></ul><blockquote><p><strong>可以看看这个例子</strong>： 模式层：实体-关系-实体，实体-属性-性值 数据层：吴京-妻子-谢楠，吴京-导演-战狼Ⅱ</p></blockquote><h3 id="_3-2-技术架构" tabindex="-1"><a class="header-anchor" href="#_3-2-技术架构" aria-hidden="true">#</a> 3.2 技术架构</h3><p>知识图谱的整体架构如图所示，其中虚线框内的部分为知识图谱的构建过程，同时也是知识图谱更新的过程。别紧张，让我们顺着这张图来理一下思路。</p><ul><li>首先，我们有一大堆的数据，这些数据可能是结构化的、非结构化的以及半结构化的；</li><li>然后，我们基于这些数据来构建知识图谱，这一步主要是通过一系列自动化或半自动化的技术手段，来从原始数据中提取出知识要素，即一堆实体关系，并将其存入我们的知识库的模式层和数据层。</li></ul><h2 id="四、构建技术" tabindex="-1"><a class="header-anchor" href="#四、构建技术" aria-hidden="true">#</a> 四、构建技术</h2><p>前面的内容说到了，知识图谱有自顶向下和自底向上两种构建方式，这里提到的构建技术主要是<strong>自底向上</strong>的构建技术。</p><p>如前所述，构建知识图谱是一个迭代更新的过程，根据知识获取的逻辑，每一轮迭代包含三个阶段：</p><ul><li><strong>信息抽取</strong>：从各种类型的数据源中提取出实体、属性以及实体间的相互关系，在此基础上形成本体化的知识表达。</li><li><strong>知识融合</strong>：在获得新知识之后，需要对其进行整合，以消除矛盾和歧义，比如某些实体可能有多种表达，某个特定称谓也许对应于多个不同的实体等。</li><li><strong>知识加工</strong>：对于经过融合的新知识，需要经过质量评估之后（部分需要人工参与甄别），才能将合格的部分加入到知识库中，以确保知识库的质量。</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111193823565.png" alt="image-20230111193823565" tabindex="0" loading="lazy"><figcaption>image-20230111193823565</figcaption></figure><p>下面我们依次来对每一个步骤进行介绍。</p><h3 id="_4-1-知识抽取" tabindex="-1"><a class="header-anchor" href="#_4-1-知识抽取" aria-hidden="true">#</a> 4.1 知识抽取</h3><p>知识抽取（infromation extraction）是知识图谱构建的第1步，其中的关键问题是：<strong>如何从异构数据源中自动抽取信息得到候选指示单元？</strong></p><p>信息抽取是一种自动化地从半结构化和无结构数据中抽取实体、关系以及实体属性等结构化信息的技术。涉及的关键技术包括：<strong>实体抽取</strong>、<strong>关系抽取</strong>和<strong>属性抽取</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111193936042.png" alt="image-20230111193936042" tabindex="0" loading="lazy"><figcaption>image-20230111193936042</figcaption></figure><h4 id="_1-实体抽取" tabindex="-1"><a class="header-anchor" href="#_1-实体抽取" aria-hidden="true">#</a> 1）实体抽取</h4><p><strong>实体抽取，也称为命名实体识别（named entity recognition，NER），是指从文本数据集中自动识别出命名实体</strong>。</p><blockquote><p>图中，通过实体抽取我们可以从其中抽取出四个实体：“非洲”、“中国海军”、“冷锋”、“战狼”。</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111194014925.png" alt="image-20230111194014925" tabindex="0" loading="lazy"><figcaption>image-20230111194014925</figcaption></figure><blockquote><p><strong>研究历史</strong>： ◉ 从面向单一领域进行实体抽取，逐步跨步到面向开放域（Open Domain）的实体抽取。</p></blockquote><h4 id="_2-关系抽取" tabindex="-1"><a class="header-anchor" href="#_2-关系抽取" aria-hidden="true">#</a> 2）关系抽取</h4><p>文本语料经过实体抽取之后，得到的是一系列离散的命名实体。<strong>为了得到语义信息，还需要从相关语料中提取出实体之间的关联关系，通过关系将实体联系起来，才能够形成网状的知识结构</strong>。这就是关系抽取需要做的事，如下图所示。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111195257618.png" alt="image-20230111195257618" tabindex="0" loading="lazy"><figcaption>image-20230111195257618</figcaption></figure><blockquote><p><strong>研究历史</strong>： ◉ 人工构造语法和语义规则（模式匹配）。 ◉ 统计机器学习方法。 ◉ 基于特征向量或核函数的有监督学习方法。 ◉ 研究重点转向半监督和无监督。 ◉ 开始研究面向开放域的信息抽取方法。 ◉ 将面向开放域的信息抽取方法和面向封闭领域的传统方法结合。</p></blockquote><h4 id="_3-属性抽取" tabindex="-1"><a class="header-anchor" href="#_3-属性抽取" aria-hidden="true">#</a> 3）属性抽取</h4><p>属性抽取的目标是从不同信息源中采集特定实体的属性信息，如针对某个公众人物，可以从网络公开信息中得到其昵称、生日、国籍、教育背景等信息。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111195515795.png" alt="image-20230111195515795" tabindex="0" loading="lazy"><figcaption>image-20230111195515795</figcaption></figure><blockquote><p>研究历史 <em>◉ 将实体的属性视作实体与属性值之间的一种名词性关系，将属性抽取任务转化为关系抽取任务。</em><em>◉ 基于规则和启发式算法，抽取结构化数据。</em><em>◉ 基于百科类网站的半结构化数据，通过自动抽取生成训练语料，用于训练实体属性标注模型，然后将其应用于对非结构化数据的实体属性抽取。</em><em>◉ 采用数据挖掘的方法直接从文本中挖掘实体属性和属性值之间的关系模式，据此实现对属性名和属性值在文本中的定位。</em></p></blockquote><h3 id="_4-2-知识融合" tabindex="-1"><a class="header-anchor" href="#_4-2-知识融合" aria-hidden="true">#</a> 4.2 知识融合</h3><p>通过信息抽取，我们就从原始的非结构化和半结构化数据中获取到了实体、关系以及实体的属性信息。如果我们将接下来的过程比喻成拼图的话，那么这些信息就是拼图碎片，散乱无章甚至还有从其他拼图里跑来的碎片、本身就是用来干扰我们拼图的错误碎片。</p><p>也就是说，拼图碎片（信息）之间的关系是扁平化的，缺乏层次性和逻辑性；拼图（知识）中还存在大量冗杂和错误的拼图碎片（信息）。那么如何解决这一问题，就是在知识融合这一步里我们需要做的了。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111195750108.png" alt="image-20230111195750108" tabindex="0" loading="lazy"><figcaption>image-20230111195750108</figcaption></figure><p><strong>知识融合包括2部分内容：实体链接、知识合并</strong>。</p><h4 id="_1-实体链接" tabindex="-1"><a class="header-anchor" href="#_1-实体链接" aria-hidden="true">#</a> 1）实体链接</h4><p><strong>实体链接（entity linking）是指对于从文本中抽取得到的实体对象，将其链接到知识库中对应的正确实体对象的操作</strong>。其基本思想是首先根据给定的实体指称项，从知识库中选出一组候选实体对象，然后通过相似度计算将指称项链接到正确的实体对象。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111195902160.png" alt="image-20230111195902160" tabindex="0" loading="lazy"><figcaption>image-20230111195902160</figcaption></figure><blockquote><p><strong>研究历史</strong>： ◉ 仅关注如何将从文本中抽取到的实体链接到知识库中，忽视了位于同一文档的实体间存在的语义联系； ◉ 开始关注利用实体的共现关系，同时将多个实体链接到知识库中。即集成实体链接（collective entity linking）。</p></blockquote><p><strong>实体链接的流程</strong>：</p><ul><li>从文本中通过实体抽取得到实体指称项。</li><li>进行<strong>实体消歧</strong>和<strong>共指消解</strong>，判断知识库中的同名实体与之是否代表不同的含义以及知识库中是否存在其他命名实体与之表示相同的含义。</li><li>在确认知识库中对应的正确实体对象之后，将该实体指称项链接到知识库中对应实体。</li></ul><blockquote><p>◉ <strong>实体消歧</strong>：是专门用于解决同名实体产生歧义问题的技术，通过实体消歧，就可以根据当前的语境，准确建立实体链接，实体消歧主要采用聚类法。其实也可以看做基于上下文的分类问题，类似于词性消歧和词义消歧。 ◉ <strong>共指消解</strong>：主要用于解决多个指称对应同一实体对象的问题。在一次会话中，多个指称可能指向的是同一实体对象。利用共指消解技术，可以将这些指称项关联（合并）到正确的实体对象，由于该问题在信息检索和自然语言处理等领域具有特殊的重要性，吸引了大量的研究努力。共指消解还有一些其他的名字，比如对象对齐、实体匹配和实体同义。</p></blockquote><h4 id="_2-知识融合" tabindex="-1"><a class="header-anchor" href="#_2-知识融合" aria-hidden="true">#</a> 2）知识融合</h4><p>在前面的实体链接中，我们已经将实体链接到知识库中对应的正确实体对象那里去了，但需要注意的是，实体链接链接的是我们从半结构化数据和非结构化数据那里通过信息抽取提取出来的数据。</p><p>那么除了半结构化数据和非结构化数据以外，我们还有个更方便的数据来源———<strong>结构化数据</strong>，如外部知识库和关系数据库。对于这部分结构化数据的处理，就是我们知识融合的内容啦。</p><p>一般来说知识融合主要分为两种：<strong>合并外部知识库</strong>，主要处理数据层和模式层的冲突；<strong>合并关系数据库</strong>，有RDB2RDF等方法。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111200135779.png" alt="image-20230111200135779" tabindex="0" loading="lazy"><figcaption>image-20230111200135779</figcaption></figure><h3 id="_4-3-知识加工" tabindex="-1"><a class="header-anchor" href="#_4-3-知识加工" aria-hidden="true">#</a> 4.3 知识加工</h3><p>经过刚才那一系列步骤，我们终于走到了知识加工这一步了！在前面，我们已经通过信息抽取，从原始语料中提取出了实体、关系与属性等知识要素，并且经过知识融合，消除实体指称项与实体对象之间的歧义，得到一系列基本的事实表达。</p><p>然而事实本身并不等于知识。要想最终获得结构化，网络化的知识体系，还需要经历知识加工的过程。<strong>知识加工主要包括3方面内容：本体抽取、知识推理和质量评估</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111200239514.png" alt="image-20230111200239514" tabindex="0" loading="lazy"><figcaption>image-20230111200239514</figcaption></figure><h4 id="_1-本体抽取" tabindex="-1"><a class="header-anchor" href="#_1-本体抽取" aria-hidden="true">#</a> 1）本体抽取</h4><p><strong>本体</strong>（ontology）是指工人的概念集合、概念框架，如“人”、“事”、“物”等。**本体可以采用人工编辑的方式手动构建（借助本体编辑软件），也可以以数据驱动的自动化方式构建本体。**因为人工方式工作量巨大，且很难找到符合要求的专家，因此当前主流的全局本体库产品，都是从一些面向特定领域的现有本体库出发，采用自动构建技术逐步扩展得到的。</p><p><strong>自动化本体构建过程包含三个阶段：</strong> 实体并列关系相似度计算 → 实体上下位关系抽取 → 本体的生成。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111202836803.png" alt="image-20230111202836803" tabindex="0" loading="lazy"><figcaption>image-20230111202836803</figcaption></figure><blockquote><p>如图所示，当知识图谱刚得到“战狼Ⅱ”、“流浪地球”、“北京文化”这三个实体的时候，可能会认为它们三个之间并没有什么差别。但当它去计算三个实体之间的相似度后，就会发现，“战狼Ⅱ”和“流浪地球”之间可能更相似，与“北京文化”差别更大一些。</p></blockquote><ul><li>第一步下来，<strong>知识图谱实际上还是没有一个上下层的概念</strong>。它还是不知道，“流浪地球”和“北京文化”不隶属于一个类型，无法比较。</li><li>因此第二步『<strong>实体上下位关系抽取</strong>』需要去完成这样的工作，从而生成第三步的本体。</li><li>当三步结束后，这个知识图谱可能就会明白，“战狼2和流浪地球，是电影这个实体下的细分实体。它们和北京文化这家公司并不是一类”。</li></ul><h4 id="_2-知识推理" tabindex="-1"><a class="header-anchor" href="#_2-知识推理" aria-hidden="true">#</a> 2）知识推理</h4><p>在我们完成了本体构建这一步之后，一个知识图谱的雏形便已经搭建好了。但可能在这个时候，知识图谱之间大多数关系都是残缺的，缺失值非常严重，那么这个时候，我们就可以使用知识推理技术，去完成进一步的知识发现。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111202938870.png" alt="image-20230111202938870" tabindex="0" loading="lazy"><figcaption>image-20230111202938870</figcaption></figure><p>当然知识推理的对象也并不局限于实体间的关系，也可以是实体的属性值，本体的概念层次关系等。</p><ul><li><strong>推理属性值</strong>：已知某实体的生日属性，可以通过推理得到该实体的年龄属性；</li><li><strong>推理概念</strong>：已知(老虎，科，猫科)和（猫科，目，食肉目）可以推出（老虎，目，食肉目）</li></ul><p>这一块的算法主要可以分为3大类：<strong>基于知识表达的关系推理技术；基于概率图模型的关系推理技术路线示意图；基于深度学习的关系推理技术路线示意图</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111203015901.png" alt="image-20230111203015901" tabindex="0" loading="lazy"><figcaption>image-20230111203015901</figcaption></figure><h4 id="_3-质量评估" tabindex="-1"><a class="header-anchor" href="#_3-质量评估" aria-hidden="true">#</a> 3）质量评估</h4><p>质量评估也是知识库构建技术的重要组成部分，这一部分存在的意义在于：可以对知识的可信度进行量化，通过舍弃置信度较低的知识来保障知识库的质量。</p><h3 id="_4-4-知识更新" tabindex="-1"><a class="header-anchor" href="#_4-4-知识更新" aria-hidden="true">#</a> 4.4 知识更新</h3><p>从逻辑上看，知识库的更新包括概念层的更新和数据层的更新。</p><ul><li><strong>概念层的更新</strong>：新增数据后获得了新的概念，需要自动将新的概念添加到知识库的概念层中。</li><li><strong>数据层的更新</strong>：主要是新增或更新实体、关系、属性值，对数据层进行更新需要考虑数据源的可靠性、数据的一致性（是否存在矛盾或冗杂等问题）等可靠数据源，并选择在各数据源中出现频率高的事实和属性加入知识库。</li></ul><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230111203057613.png" alt="image-20230111203057613" tabindex="0" loading="lazy"><figcaption>image-20230111203057613</figcaption></figure><p>知识图谱的内容更新有两种方式：</p><ul><li><strong>全面更新</strong>：指以更新后的全部数据为输入，从零开始构建知识图谱。这种方法比较简单，但资源消耗大，而且需要耗费大量人力资源进行系统维护；</li><li><strong>增量更新</strong>：以当前新增数据为输入，向现有知识图谱中添加新增知识。这种方式资源消耗小，但目前仍需要大量人工干预（定义规则等），因此实施起来十分困难。</li></ul><p>知识图谱的构建就此结束！</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,108),c={href:"https://www.showmeai.tech/article-detail/94",target:"_blank",rel:"noopener noreferrer"};function d(u,h){const n=l("ExternalLinkIcon");return s(),t("div",null,[p,a("p",null,[a("a",c,[e("大厂技术实现 | 详解知识图谱的构建全流程"),o(n)])])])}const b=i(r,[["render",d],["__file","knowledge-graph-build.html.vue"]]);export{b as default};
