import{_ as s,W as t,X as e,Y as n,Z as o,$ as p,a0 as c,D as i}from"./framework-f64bc974.js";const l={},u=c(`<h1 id="druid源码学习-四-druiddatasource的getconnection过程" tabindex="-1"><a class="header-anchor" href="#druid源码学习-四-druiddatasource的getconnection过程" aria-hidden="true">#</a> Druid源码学习（四）-DruidDataSource的getConnection过程</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><h3 id="_1-1-druiddatasource-实现-javax-sql-datasource" tabindex="-1"><a class="header-anchor" href="#_1-1-druiddatasource-实现-javax-sql-datasource" aria-hidden="true">#</a> 1.1 DruidDataSource 实现 javax.sql.DataSource</h3><p>DruidDataSource连接池实现了javaX.sql包中，DataSource接口的全部方法。getConnection也来自于javax.sql.DataSource接口。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522090249593.png" alt="image-20220522090249593" tabindex="0" loading="lazy"><figcaption>image-20220522090249593</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522090308435.png" alt="image-20220522090308435" tabindex="0" loading="lazy"><figcaption>image-20220522090308435</figcaption></figure><h3 id="_1-2-druidpooledconnection实现接口java-sql-connection。" tabindex="-1"><a class="header-anchor" href="#_1-2-druidpooledconnection实现接口java-sql-connection。" aria-hidden="true">#</a> 1.2 DruidPooledConnection实现接口java.sql.Connection。</h3><p>而DruidPooledConnection也实现了接口java.sql.Connection。 这样就能在各种场景中通过这个接口来获取数据库连接。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522090459058.png" alt="image-20220522090459058" tabindex="0" loading="lazy"><figcaption>image-20220522090459058</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522090744812.png" alt="image-20220522090744812" tabindex="0" loading="lazy"><figcaption>image-20220522090744812</figcaption></figure><p>这样就能在各种场景中通过这个接口来获取数据库连接。</p><h2 id="_2-fileter处理–责任链模式" tabindex="-1"><a class="header-anchor" href="#_2-fileter处理–责任链模式" aria-hidden="true">#</a> 2. fileter处理–责任链模式</h2><h3 id="_2-1-getconnection方法-调用责任链" tabindex="-1"><a class="header-anchor" href="#_2-1-getconnection方法-调用责任链" aria-hidden="true">#</a> 2.1 getConnection方法 调用责任链</h3><p>在执行getConnection方法的过程中，首先确认DataSource是否完成了初始化。由于 init方法采用了Double Check机制，如果初始化完成则不会再次执行，因此这里不会造成系统多次初始化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">DruidPooledConnection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxWaitMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token comment">//调用初始化，以避免在获取连接的时候DruidDataSource的初始化工作还没完成。</span>
    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//这里有两个分支，判断filters是否存在过滤器，如果存在则先执行过滤器中的内容，这采用责任链模式实现。</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//责任链执行过程</span>
        <span class="token class-name">FilterChainImpl</span> filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChainImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filterChain<span class="token punctuation">.</span><span class="token function">dataSource_connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//直接创建连接</span>
        <span class="token keyword">return</span> <span class="token function">getConnectionDirect</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个filter的处理过程是一个经典的责任链模式。</p><h3 id="_2-2-filterchainimpl-责任连之" tabindex="-1"><a class="header-anchor" href="#_2-2-filterchainimpl-责任连之" aria-hidden="true">#</a> 2.2 FilterChainImpl 责任连之</h3><h4 id="_2-2-1-datasourceproxy" tabindex="-1"><a class="header-anchor" href="#_2-2-1-datasourceproxy" aria-hidden="true">#</a> 2.2.1 DataSourceProxy</h4><p>new了一个FilterChainImpl对象，而这个对象的构造函数 this 。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522091641489.png" alt="image-20220522091641489" tabindex="0" loading="lazy"><figcaption>image-20220522091641489</figcaption></figure><p>查看了一下，DruidDataSource的父类DruidAbstractDataSource正好实现了DataSourceProxy接口，也就是说，DruidDataSource本身就是一个DataSourceProxy。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220522091502064.png" alt="image-20220522091502064" tabindex="0" loading="lazy"><figcaption>image-20220522091502064</figcaption></figure><p>这样做的好处是，FilterChainImpl本身不用维护任何存放filters的数组，这个数组可以直接复用DruidDataSource中的数据结构。</p><h4 id="_2-2-2-filterchainimpl-实现" tabindex="-1"><a class="header-anchor" href="#_2-2-2-filterchainimpl-实现" aria-hidden="true">#</a> 2.2.2 FilterChainImpl 实现</h4><p>在FilterChainImpl中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token keyword">public</span> <span class="token class-name">FilterChainImpl</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filterSize <span class="token operator">=</span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">FilterChainImpl</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSource<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>filterSize <span class="token operator">=</span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> dataSource<span class="token punctuation">.</span><span class="token function">getProxyFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">Filter</span> <span class="token function">nextFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在DruidAbstractDataSource中，这个filters的数据结构：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.alibaba.druid.pool.DruidAbstractDataSource#filters</span>
<span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span>  filters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样所有的filters都将存放到责任list中。</p><h4 id="_2-2-3-datasource-connect-方法" tabindex="-1"><a class="header-anchor" href="#_2-2-3-datasource-connect-方法" aria-hidden="true">#</a> 2.2.3 dataSource_connect 方法</h4><p>再查看 FilterChainImpl的dataSource_connect方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">DruidPooledConnection</span> <span class="token function">dataSource_connect</span><span class="token punctuation">(</span><span class="token class-name">DruidDataSource</span> dataSource<span class="token punctuation">,</span> <span class="token keyword">long</span> maxWaitMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">//判断当前filter的指针是否小于filterSize的大小，如果小于，则执行filter的dataSource_getConnection</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">&lt;</span> filterSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">DruidPooledConnection</span> conn <span class="token operator">=</span> <span class="token function">nextFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dataSource_getConnection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> dataSource<span class="token punctuation">,</span> maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> conn<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//反之 调用getConnectionDirect 创建数据库连接。</span>
        <span class="token keyword">return</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnectionDirect</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样看上去将调用filter的dataSource_getConnection方法。 但是这个地方实际上涉及比较巧妙，采用了一个父类FilterAdapter，所有的Filter都集成这个父类FilterAdapter,而父类本身又实现了Filter接口，本身是一个Filter. StartFilter等Filter的实现类，没有实现dataSource_getConnection方法。 因此这个方法实际上执行的逻辑就是FilterAdapter类的dataSource_getConnection方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">DruidPooledConnection</span> <span class="token function">dataSource_getConnection</span><span class="token punctuation">(</span><span class="token class-name">FilterChain</span> chain<span class="token punctuation">,</span> <span class="token class-name">DruidDataSource</span> dataSource<span class="token punctuation">,</span>
                                                      <span class="token keyword">long</span> maxWaitMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">dataSource_connect</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时调用dataSource_connect之后，又回到了FilterChainImpl的dataSource_connect方法中。 不过此时pos会增加，if判断中的逻辑不会执行。那么就会执行 dataSource.getConnectionDirect(maxWaitMillis);直接创建一个连接之后返回。 这就是getConnection过程中处理filter的责任链模式，这也是我们在编码的过程中值得借鉴的地方。 在getConnection中，无论是否存在filter,那么最终将通过getConnectionDirect来创建连接。getConnectionDirect才是连接被创建的最终方法。</p><h3 id="_2-3-getconnectiondirect" tabindex="-1"><a class="header-anchor" href="#_2-3-getconnectiondirect" aria-hidden="true">#</a> 2.3 getConnectionDirect</h3><p>getConnectionDirect方法也不是最终创建数据库连接的方法。 这个方法会通过一个for循环自旋，确保连接的创建。 在GetConnectionTimeoutException异常处理中，这个地方有一个重试次数notFullTimeoutRetryCount，每次重试的时间为maxWaitMillis。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.alibaba.druid.pool.DruidDataSource#getConnectionDirect</span>
<span class="token keyword">int</span> notFullTimeoutRetryCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">//自旋</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// handle notFullTimeoutRetry</span>
    <span class="token class-name">DruidPooledConnection</span> poolableConnection<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">//调用getConnectionInternal 获取连接</span>
        poolableConnection <span class="token operator">=</span> <span class="token function">getConnectionInternal</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GetConnectionTimeoutException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//超时异常处理，判断是否达到最大重试次数 且连接池是否已满</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>notFullTimeoutRetryCnt <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>notFullTimeoutRetryCount <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            notFullTimeoutRetryCnt<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token comment">//日志打印</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;get connection timeout retry : &quot;</span> <span class="token operator">+</span> notFullTimeoutRetryCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//后续代码略</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过自旋的方式确保获取到连接。之后对获取到的连接进行检测，主要的检测参数有：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>testOnBorrow</td><td>默认值通常为false,用在获取连接的时候执行validationQuery检测连接是否有效。这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>默认值通常为false,用在归还连接的时候执行validationQuery检测连接是否有效，这个配置会降低性能。</td></tr><tr><td>testWhileIdle</td><td>这个值通常建议为true,连接空闲时间大于timeBetweenEvictionRunsMillis指定的毫秒，就会执行参数validationQuery指定的SQL来检测连接是否有效。这个参数会定期执行。</td></tr><tr><td>validationQuery</td><td>用来检测连接是否有效的sql，如果validationQuery为空，那么testOnBorrow、testOnReturn、testWhileIdle这三个参数都不会起作用，配置参考：validationQuery=SELECT 1</td></tr></tbody></table><p>在getConnection中，将会发生的检测过程伪代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>testOnBorrow<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">//获取连接时检测</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>poolableConnection<span class="token punctuation">.</span>conn<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//检测连接是否关闭</span>
    <span class="token punctuation">}</span>
    
     <span class="token keyword">if</span> <span class="token punctuation">(</span>testWhileIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">//空闲检测 </span>
     <span class="token punctuation">}</span>

<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述检测过程都会调用testConnectionInternal(poolableConnection.holder, poolableConnection.conn);进行检测。</p><p>此外还有一个很重要的参数removeAbandoned。这个参数相关的配置参数有:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>removeAbandoned</td><td>如果连接泄露，是否需要回收泄露的连接，默认false；</td></tr><tr><td>logAbandoned</td><td>如果回收了泄露的连接，是否要打印一条log，默认false；</td></tr><tr><td>removeAbandonedTimeoutMillis</td><td>连接回收的超时时间，默认5分钟；</td></tr></tbody></table><p>参数removeAbandoned的作用在于，如果有线程从Druid中获取到了连接并没有及时归还，那么Druid就会定期检测该连接是否会处于运行状态，如果不处于运行状态，则被获取时间超过removeAbandonedTimeoutMillis就会强制回收该连接。 这个检测的过程是在回收线程中完成的，在getConnection的过程中，只是判断该参数是否被设置，然后加上对应的标识。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>removeAbandoned<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StackTraceElement</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stackTrace <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//设置 stackTrace</span>
    poolableConnection<span class="token punctuation">.</span>connectStackTrace <span class="token operator">=</span> stackTrace<span class="token punctuation">;</span>
    <span class="token comment">//设置setConnectedTimeNano</span>
    poolableConnection<span class="token punctuation">.</span><span class="token function">setConnectedTimeNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//打开traceEnable</span>
    poolableConnection<span class="token punctuation">.</span>traceEnable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    activeConnectionLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        activeConnections<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>poolableConnection<span class="token punctuation">,</span> <span class="token constant">PRESENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        activeConnectionLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后还需要对defaultAutoCommit参数进行处理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultAutoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    poolableConnection<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，一个getConnetion方法创建完毕。</p><h3 id="_2-4-getconnectioninternal" tabindex="-1"><a class="header-anchor" href="#_2-4-getconnectioninternal" aria-hidden="true">#</a> 2.4 getConnectionInternal</h3><p>getConnectionInternal方法中创建连接： 首先判断连接池状态 closed 和enable状态是否正确，如果不正确则抛出异常退出。</p><p>之后的逻辑:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
     * 获取内部连接
     * <span class="token keyword">@param</span> <span class="token parameter">maxWait</span>
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">DruidPooledConnection</span> <span class="token function">getConnectionInternal</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxWait<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 首先判断连接池状态 closed 和enable状态是否正确，如果不正确则抛出异常退出。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            connectErrorCountUpdater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceClosedException</span><span class="token punctuation">(</span><span class="token string">&quot;dataSource already closed at &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>closeTimeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            connectErrorCountUpdater<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>disableException <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> disableException<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceDisableException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后的逻辑:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span> createDirect <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>createDirect<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//直接创建连接的逻辑</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxWaitThreadCount <span class="token operator">&gt;</span> <span class="token number">0</span>
        <span class="token operator">&amp;&amp;</span> notEmptyWaitThreadCount <span class="token operator">&gt;=</span> maxWaitThreadCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断最大等待线程数如果大于0且notEmpty上的等待线程超过了这个值 那么抛出异常</span>
        
        <span class="token punctuation">}</span>

    <span class="token comment">//其他相关参数检测 抛出异常</span>
    
    <span class="token comment">//判断如果createScheduler存在，且executor.getQueue().size()大于0 那么将启用createDirect逻辑，退出本持循环</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>createScheduler <span class="token operator">!=</span> <span class="token keyword">null</span>
        <span class="token operator">&amp;&amp;</span> poolingCount <span class="token operator">==</span> <span class="token number">0</span>
        <span class="token operator">&amp;&amp;</span> activeCount <span class="token operator">&lt;</span> maxActive
        <span class="token operator">&amp;&amp;</span> creatingCountUpdater<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
        <span class="token operator">&amp;&amp;</span> createScheduler <span class="token keyword">instanceof</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ScheduledThreadPoolExecutor</span> executor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">)</span> createScheduler<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        createDirect <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
	
    <span class="token comment">//如果maxWait大于0，调用 pollLast(nanos)，反之则调用takeLast()</span>
    <span class="token comment">//获取连接的核心逻辑</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxWait <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        holder <span class="token operator">=</span> <span class="token function">pollLast</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        holder <span class="token operator">=</span> <span class="token function">takeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getConnectionInternal 方法内部存在一大堆参数检测功能，根据一系列参数判断，是否需要直接创建一个连接。 反之，则调用pollLast 或 takeLast 方法。这两个方法如果获取不到连接，将会wait,之后通知生产者线程创建连接。 这个地方有一个风险就是，如果仅仅采用单线程的方式创建连接，一旦生产者线程由于其他原因阻塞，那么getConnection将会产被长时间阻塞。</p><p>之后获得holder之后，通过holder产生连接。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>holder.incrementUseCount();
DruidPooledConnection poolalbeConnection = new DruidPooledConnection(holder);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-polllast-与-takelast" tabindex="-1"><a class="header-anchor" href="#_2-5-polllast-与-takelast" aria-hidden="true">#</a> 2.5 pollLast 与 takeLast</h3><h4 id="_2-5-1-polllast-如果maxwait大于0" tabindex="-1"><a class="header-anchor" href="#_2-5-1-polllast-如果maxwait大于0" aria-hidden="true">#</a> 2.5.1 pollLast(如果maxWait大于0)</h4><p>polllast的方法核心逻辑是自旋，判断是否有可用连接，然后发送empty消息，通知生产者线程可以创建连接。之后阻塞wait。只不过这个方法需要设置超时时间。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// com.alibaba.druid.pool.DruidDataSource#pollLast</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果没有可用的连接</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>poolingCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// send signal to CreateThread create connection</span>

           estimate <span class="token operator">=</span> notEmpty<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>estimate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// signal by</span>
           
         <span class="token punctuation">}</span>
         <span class="token comment">//之后获取最后一个连接</span>
           <span class="token class-name">DruidConnectionHolder</span> last <span class="token operator">=</span> connections<span class="token punctuation">[</span>poolingCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>       

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-5-2-takelast-如果maxwait等于0" tabindex="-1"><a class="header-anchor" href="#_2-5-2-takelast-如果maxwait等于0" aria-hidden="true">#</a> 2.5.2 takeLast(如果maxWait等于0)</h4><p>而takeLast方法与pollLast方法类似，只是等待的过程中，不增加超时时间，一直等到生产者的通知为止。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//com.alibaba.druid.pool.DruidDataSource#takeLast</span>

 <span class="token keyword">while</span> <span class="token punctuation">(</span>poolingCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
    <span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// send signal to CreateThread create connection</span>
     
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// signal by recycle or creator</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        notEmptyWaitThreadCount<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
 <span class="token punctuation">}</span>
<span class="token function">decrementPoolingCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//最后获取数组中的最后一个连接。</span>
<span class="token class-name">DruidConnectionHolder</span> last <span class="token operator">=</span> connections<span class="token punctuation">[</span>poolingCount<span class="token punctuation">]</span><span class="token punctuation">;</span>
connections<span class="token punctuation">[</span>poolingCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,67),r={href:"https://blog.csdn.net/dhaibo1986/article/details/121267489?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const a=i("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[o("Druid源码阅读4-DruidDataSource的getConnection过程"),p(a)])])])}const b=s(l,[["render",d],["__file","dbcp-y-druid-source-getconnection.html.vue"]]);export{b as default};
