import{_ as n,W as e,X as t,Y as s,$ as p,a0 as l,D as o}from"./framework-f64bc974.js";const r={},i=l(`<h1 id="mysql-性能优化" tabindex="-1"><a class="header-anchor" href="#mysql-性能优化" aria-hidden="true">#</a> MySQL - 性能优化</h1><h2 id="_1-使用-explain-进行分析" tabindex="-1"><a class="header-anchor" href="#_1-使用-explain-进行分析" aria-hidden="true">#</a> 1. 使用 Explain 进行分析</h2><p>Explain 用来分析 SELECT 查询语句，开发人员可以通过分析 Explain 结果来优化查询语句。</p><p>比较重要的字段有:</p><ul><li><p>select_type : 查询类型，有简单查询、联合查询、子查询等</p></li><li><p>key : 使用的索引</p></li><li><p>rows : 扫描的行数</p><p>rows扫描的行数，越小越好</p></li><li><p>type：使用索引的类型</p><p>通过type的值判断查询是否高效，判断此次是全表扫描还是索引扫描</p><ul><li>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</li></ul></li></ul><h2 id="_2-优化数据访问" tabindex="-1"><a class="header-anchor" href="#_2-优化数据访问" aria-hidden="true">#</a> 2. 优化数据访问</h2><h3 id="_2-1-减少请求的数据量" tabindex="-1"><a class="header-anchor" href="#_2-1-减少请求的数据量" aria-hidden="true">#</a> 2.1. 减少请求的数据量</h3><ul><li>只返回必要的列: 最好不要使用 SELECT * 语句。</li><li>只返回必要的行: 使用 LIMIT 语句来限制返回的数据。</li><li>缓存重复查询的数据: 使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li></ul><h3 id="_2-2-减少服务器端扫描的行数" tabindex="-1"><a class="header-anchor" href="#_2-2-减少服务器端扫描的行数" aria-hidden="true">#</a> 2.2. 减少服务器端扫描的行数</h3><p>最有效的方式是使用索引来覆盖查询。</p><h2 id="_3-重构查询方式" tabindex="-1"><a class="header-anchor" href="#_3-重构查询方式" aria-hidden="true">#</a> 3. 重构查询方式</h2><h3 id="_3-1-切分大查询" tabindex="-1"><a class="header-anchor" href="#_3-1-切分大查询" aria-hidden="true">#</a> 3.1. 切分大查询</h3><p>一个大查询如果一次性执行的话，可能一次锁住很多数据、占满整个事务日志、耗尽系统资源、阻塞很多小的但重要的查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>DELEFT <span class="token keyword">FROM</span> messages <span class="token keyword">WHERE</span> <span class="token keyword">create</span> <span class="token operator">&lt;</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">INTERVAL</span> <span class="token number">3</span> <span class="token keyword">MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>rows_affected <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">do</span> {
    rows_affected <span class="token operator">=</span> do_query<span class="token punctuation">(</span>
    <span class="token string">&quot;DELETE FROM messages WHERE create  &lt; DATE_SUB(NOW(), INTERVAL 3 MONTH) LIMIT 10000&quot;</span><span class="token punctuation">)</span>
} <span class="token keyword">while</span> rows_affected <span class="token operator">&gt;</span> <span class="token number">0</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-分解大连接查询" tabindex="-1"><a class="header-anchor" href="#_3-2-分解大连接查询" aria-hidden="true">#</a> 3.2 分解大连接查询</h3><h4 id="_3-2-1-大连接查询分解好处" tabindex="-1"><a class="header-anchor" href="#_3-2-1-大连接查询分解好处" aria-hidden="true">#</a> 3.2.1 大连接查询分解好处</h4><p>将一个大连接查询分解成对每一个表进行一次单表查询，然后将结果在应用程序中进行关联，这样做的好处有:</p><ul><li><strong>让缓存更高效</strong>。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li><li>分解成多个单表查询，这些<strong>单表查询的缓存结果更可能被其它查询使用到</strong>，从而减少冗余记录的查询。</li><li><strong>减少锁竞争</strong>；</li><li>在应用层进行连接，可以更容易对数据库进行拆分，从而<strong>更容易做到高性能和可伸缩</strong>。（分库分表做准备）</li><li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li></ul><h4 id="_3-2-2-示例" tabindex="-1"><a class="header-anchor" href="#_3-2-2-示例" aria-hidden="true">#</a> 3.2.2 示例</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tab
<span class="token keyword">JOIN</span> tag_post <span class="token keyword">ON</span> tag_post<span class="token punctuation">.</span>tag_id<span class="token operator">=</span>tag<span class="token punctuation">.</span>id
<span class="token keyword">JOIN</span> post <span class="token keyword">ON</span> tag_post<span class="token punctuation">.</span>post_id<span class="token operator">=</span>post<span class="token punctuation">.</span>id
<span class="token keyword">WHERE</span> tag<span class="token punctuation">.</span>tag<span class="token operator">=</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tag <span class="token keyword">WHERE</span> tag<span class="token operator">=</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> tag_post <span class="token keyword">WHERE</span> tag_id<span class="token operator">=</span><span class="token number">1234</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> post <span class="token keyword">WHERE</span> post<span class="token punctuation">.</span>id <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">567</span><span class="token punctuation">,</span><span class="token number">9098</span><span class="token punctuation">,</span><span class="token number">8904</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,23),c={href:"https://pdai.tech/md/db/sql-mysql/sql-mysql-performance.html",target:"_blank",rel:"noopener noreferrer"},d=s("strong",null,"MySQL - 性能优化",-1);function u(k,h){const a=o("ExternalLinkIcon");return e(),t("div",null,[i,s("p",null,[s("a",c,[d,p(a)])])])}const _=n(r,[["render",u],["__file","sql-mysql-performance.html.vue"]]);export{_ as default};
