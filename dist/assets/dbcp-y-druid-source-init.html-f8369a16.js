import{_ as a,W as t,X as e,Y as n,Z as p,$ as o,a0 as c,D as i}from"./framework-f64bc974.js";const l={},u=c(`<h1 id="druid源码学习2druiddatasource的init过程" tabindex="-1"><a class="header-anchor" href="#druid源码学习2druiddatasource的init过程" aria-hidden="true">#</a> Druid源码学习2DruidDataSource的init过程</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>DruidDataSource的使用都是创建DruidDataSource对象，set配置参数之后，调用init方法。</p><p>通过mock测试实例化DruidDataSource：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>DruidDataSource ds = new DruidDataSource();
ds.setUrl(&quot;jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&quot;);
ds.setUsername(&quot;test&quot;);
ds.setPassword(&quot;123456&quot;);
ds.setFilters(&quot;stat&quot;);
ds.init();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>init方法是使用 DruidDataSource的入口。</p><h2 id="_2-init-过程" tabindex="-1"><a class="header-anchor" href="#_2-init-过程" aria-hidden="true">#</a> 2. init 过程</h2><h3 id="_2-1-double-check" tabindex="-1"><a class="header-anchor" href="#_2-1-double-check" aria-hidden="true">#</a> 2.1 double check</h3><ol><li><p>判断inited状态，这样确保init方法在同一个DataSource对象中只会被执行一次。（后面有加锁）。</p></li><li><p>之后内部开启要给ReentrantLock。这个lock调用lockInterruptibly。 如果获取不到lock,则会将当前的线程休眠。</p></li><li><p>再次检测inited状态。如果为true,则返回。这里做了一个DoubleCheck。</p></li><li><p>定义initStackTrace ，为后续需要getInitStackTrace方法使用。</p></li><li><p>生成DruidDataSource的id。这是一个AtomicInteger，从1开始递增，每个DataSource都会加1。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token doc-comment comment">/**
     * init方法是使用 DruidDataSource的入口。
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">SQLException</span></span>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>

        <span class="token comment">// 1. 双层校验</span>
        <span class="token comment">// 1.1 判断inited状态，这样确保init方法在同一个DataSource对象中只会被执行一次。（后面有加锁）。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// bug fixed for dead lock, for issue #2980</span>
        <span class="token class-name">DruidDriver</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//1.2  之后内部开启要给ReentrantLock。这个lock调用lockInterruptibly。 如果获取不到lock,则会将当前的线程休眠</span>
        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">&quot;interrupt&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//1.3 再次检测inited状态。如果为true,则返回。这里做了一个DoubleCheck。</span>
        <span class="token keyword">boolean</span> init <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>inited<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 1.4 定义initStackTrace ，为后续需要getInitStackTrace方法使用。</span>
            initStackTrace <span class="token operator">=</span> <span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 1.5 生成DruidDataSource的id。这是一个AtomicInteger，从1开始递增，每个DataSource都会加1。</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token class-name">DruidDriver</span><span class="token punctuation">.</span><span class="token function">createDataSourceId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
         <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-初始化" tabindex="-1"><a class="header-anchor" href="#_2-2-初始化" aria-hidden="true">#</a> 2.2 初始化</h3><h4 id="_2-2-1-初始化1" tabindex="-1"><a class="header-anchor" href="#_2-2-1-初始化1" aria-hidden="true">#</a> 2.2.1 初始化1</h4><ol><li><p>初始化jdbcUrl。trim处理。</p></li><li><p>初始化的Filter处理，默认会增加要给StatFilter。</p></li><li><p>根据dbType,进行cacheServerConfiguration的特殊处理。部分数据库需要将这个参数设置为false。</p></li><li><p>对maxActive、minIdle、timeBetweenLogStatsMillis、maxEvictableIdleTimeMillis、keepAlive、keepAliveBetweenTimeMillis等参数进行校验。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 2. 初始化</span>
            <span class="token comment">// 2.1 初始化jdbcUrl。trim处理。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">initFromWrapDriverUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 2.2 初始化的Filter处理，默认会增加要给StatFilter。</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Filter</span> filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                filter<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 2.3 根据dbType,进行cacheServerConfiguration的特殊处理。部分数据库需要将这个参数设置为false。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName <span class="token operator">=</span> <span class="token class-name">JdbcUtils</span><span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">DbType</span> dbType <span class="token operator">=</span> <span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dbType <span class="token operator">==</span> <span class="token class-name">DbType</span><span class="token punctuation">.</span>mysql
                    <span class="token operator">||</span> dbType <span class="token operator">==</span> <span class="token class-name">DbType</span><span class="token punctuation">.</span>mariadb
                    <span class="token operator">||</span> dbType <span class="token operator">==</span> <span class="token class-name">DbType</span><span class="token punctuation">.</span>oceanbase
                    <span class="token operator">||</span> dbType <span class="token operator">==</span> <span class="token class-name">DbType</span><span class="token punctuation">.</span>ads<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">boolean</span> cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">&quot;cacheServerConfiguration&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;cacheServerConfiguration&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cacheServerConfigurationSet <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheServerConfigurationSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cacheServerConfiguration&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 2.4 对maxActive、minIdle、timeBetweenLogStatsMillis、maxEvictableIdleTimeMillis、keepAlive、keepAliveBetweenTimeMillis等参数进行校验。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxActive <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;illegal maxActive &quot;</span> <span class="token operator">+</span> maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxActive <span class="token operator">&lt;</span> minIdle<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;illegal maxActive &quot;</span> <span class="token operator">+</span> maxActive<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-初始化2" tabindex="-1"><a class="header-anchor" href="#_2-2-2-初始化2" aria-hidden="true">#</a> 2.2.2 初始化2</h4><ol start="5"><li>初始化SPI</li><li>解决驱动相关的配置</li><li>初始化校验</li><li>初始化异常存储</li><li>初始化validConnectionChecker 不同的数据库的对象不同</li><li>校验连接查询的sql</li><li>初始化holder的数组：</li><li>之后，dataSourceStat是否采用了Global。对dataSourceStat进行set。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2.5 初始化SPI</span>
<span class="token function">initFromSPIServiceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.6 解决驱动相关的配置</span>
<span class="token function">resolveDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.7 初始化校验</span>
<span class="token function">initCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.8 初始化异常存储</span>
<span class="token function">initExceptionSorter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.9 初始化validConnectionChecker 不同的数据库的对象不同</span>
<span class="token function">initValidConnectionChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 2.10 校验连接查询的sql</span>
<span class="token function">validationQueryCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.11 之后，dataSourceStat是否采用了Global。对dataSourceStat进行set。</span>
<span class="token comment">//</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isUseGlobalDataSourceStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dataSourceStat <span class="token operator">=</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">.</span><span class="token function">getGlobal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceStat <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataSourceStat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">(</span><span class="token string">&quot;Global&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Global&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">.</span><span class="token function">setGlobal</span><span class="token punctuation">(</span>dataSourceStat<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSourceStat<span class="token punctuation">.</span><span class="token function">getDbType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataSourceStat<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dataSourceStat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcDataSourceStat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcUrl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dbTypeName<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connectProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
dataSourceStat<span class="token punctuation">.</span><span class="token function">setResetStatEnable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resetStatEnable<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2.12 初始化holder的数组：</span>
connections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>
evictConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>
keepAliveConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">[</span>maxActive<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-创建连接" tabindex="-1"><a class="header-anchor" href="#_2-3-创建连接" aria-hidden="true">#</a> 2.3 创建连接</h3><ol><li>判断是否进行异步初始化： if (createScheduler != null &amp;&amp; asyncInit) 。</li><li>如果异步初始化，调用通过submitCreateTask进行。</li><li>如果poolingCount &lt; initialSize，则创建物理连接。 <ol><li>如果initialSize不配置为0，在初始化过程中，这个条件不会被触发，这样只有真正需要Connection的时候，才会去创建物理的连接。</li><li>如果指定了initialSize，则在初始化的过程中，初始化线程就创建了initialSize的连接的holder并放置到connections中。</li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">// 3. 创建连接</span>
            <span class="token comment">// 3.1 判断是否进行异步初始化</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>createScheduler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> asyncInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 3.2 如果异步初始化，调用通过submitCreateTask进行。</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> initialSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">submitCreateTask</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>asyncInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// init connections</span>
                <span class="token comment">// 3.3 如果poolingCount &lt; initialSize，则创建物理连接。</span>
                <span class="token comment">// 3.3.1 如果initialSize不配置为0，在初始化过程中，这个条件不会被触发，这样只有真正需要Connection的时候，才会去创建物理的连接。</span>
                <span class="token comment">//  3.3.2 如果指定了initialSize，则在初始化的过程中，初始化线程就创建了initialSize的连接的holder并放置到connections中。</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>poolingCount <span class="token operator">&lt;</span> initialSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token comment">//                        在同步初始化的条件下，初始化操作将通过init线程进行。而后续由于连接池使用过程中动态的收缩和扩展，则是由其他单独的线程来完成。</span>
<span class="token comment">//                        反之，如果需要进行异步初始化，则会调用submitCreateTask方法来异步进行。</span>
                        <span class="token class-name">PhysicalConnectionInfo</span> pyConnectInfo <span class="token operator">=</span> <span class="token function">createPhysicalConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">DruidConnectionHolder</span> holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> pyConnectInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        connections<span class="token punctuation">[</span>poolingCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> holder<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token punctuation">}</span>

               
            <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在同步初始化的条件下，初始化操作将通过init线程进行。而后续由于连接池使用过程中动态的收缩和扩展，则是由其他单独的线程来完成。</li><li>反之，如果需要进行异步初始化，则会调用submitCreateTask方法来异步进行。</li></ul><h3 id="_2-4-创建线程" tabindex="-1"><a class="header-anchor" href="#_2-4-创建线程" aria-hidden="true">#</a> 2.4 创建线程</h3><p>创建如下线程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 4. 创建线程</span>
<span class="token comment">// 4.1 创建日志线程  但是这个线程的条件timeBetweenLogStatsMillis大于0，如果这个参数没有配置，日志线程不会创建。</span>
<span class="token function">createAndLogThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.2 创建一个CreateConnectionThread对象，并启动。初始化变量createConnectionThread。</span>
<span class="token function">createAndStartCreatorThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 4.3 创建 DestroyTask对象。同时创建DestroyConnectionThread线程，并start,初始化destroyConnectionThread。</span>
<span class="token function">createAndStartDestroyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后，在initedLatch处等待线程任务全部完成。</p><p>initedLatch会在createAndStartCreatorThread与createAndStartDestroyThread都执行完之后，countdown结束。 这个地方是用来确保上述两个方法都执行完毕，再进行后续的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 4.4 在initedLatch处等待。</span>
<span class="token comment">// initedLatch会在createAndStartCreatorThread与createAndStartDestroyThread都执行完之后，countdown结束。</span>
<span class="token comment">//这个地方是用来确保上述两个方法都执行完毕，再进行后续的操作。</span>
initedLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>initedLatch会在createAndStartCreatorThread与createAndStartDestroyThread都执行完之后，countdown结束。 这个地方是用来确保上述两个方法都执行完毕，再进行后续的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// 4.5 之后 init 状态为true,并初始化initedTime时间为当前的Date时间。注册registerMbean。</span>
init <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

initedTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">registerMbean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后 init 状态为true,并初始化initedTime时间为当前的Date时间。注册registerMbean。 如果keepAlive为true,还需调用submitCreateTask方法，将连接填充到minIdle。确保空闲的连接可用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">// 4.6 如果keepAlive为true,还需调用submitCreateTask方法，将连接填充到minIdle。确保空闲的连接可用。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>keepAlive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// async fill to minIdle</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>createScheduler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minIdle<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
               <span class="token function">submitCreateTask</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">emptySignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-finally处理" tabindex="-1"><a class="header-anchor" href="#_2-5-finally处理" aria-hidden="true">#</a> 2.5 finally处理</h3><p>finally处理逻辑： 修改inited为true,并解锁。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token comment">// 5 finally处理</span>
            <span class="token comment">// 5.1 修改inited为true,并解锁。</span>
            inited <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 5.2 判断init和日志的INFO状态，打印一条init完成的日志。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>init <span class="token operator">&amp;&amp;</span> <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;{dataSource-&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    msg <span class="token operator">+=</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">;</span>
                    msg <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                msg <span class="token operator">+=</span> <span class="token string">&quot;} inited&quot;</span><span class="token punctuation">;</span>

                <span class="token constant">LOG</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断init和日志的INFO状态，打印一条init完成的日志。 格式如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">2022</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">18</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">14</span><span class="token operator">:</span><span class="token number">00.690</span> <span class="token punctuation">[</span>restartedMain<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">c<span class="token punctuation">.</span>a<span class="token punctuation">.</span>d<span class="token punctuation">.</span>p<span class="token punctuation">.</span></span>DruidDataSource</span> <span class="token operator">-</span> <span class="token punctuation">[</span>init<span class="token punctuation">,</span><span class="token number">998</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">{</span>dataSource<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> inited
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结" aria-hidden="true">#</a> 3. 总结</h2><p>init过程，对DruidDataSource进行了初始化操作，为了防止多线程并发场景下进行init操作，采用了Double Check的方式，配合ReentrentLock两次判断来实现。 对于真实连接的创建，如果需要同步创建，则init线程会逐个创建连接的holder,反之，如果需要异步创建，则提交到异步执行的线程池submitCreateTask。 详细流程如下图： <img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/56f612af420ddc34f1c0811a5a08f451.png" alt="56f612af420ddc34f1c0811a5a08f451" loading="lazy"></p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,39),r={href:"https://blog.csdn.net/dhaibo1986/article/details/121233998?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"};function d(k,v){const s=i("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",r,[p("Druid源码阅读2-DruidDataSource的init过程"),o(s)])])])}const b=a(l,[["render",d],["__file","dbcp-y-druid-source-init.html.vue"]]);export{b as default};
