import{_ as n,W as e,X as p,Y as s,$ as r,a0 as o,D as l}from"./framework-f64bc974.js";const t={},d=o(`<h1 id="sql语句优化" tabindex="-1"><a class="header-anchor" href="#sql语句优化" aria-hidden="true">#</a> SQL语句优化</h1><h2 id="_1-负向查询不能使用索引" tabindex="-1"><a class="header-anchor" href="#_1-负向查询不能使用索引" aria-hidden="true">#</a> 1. 负向查询不能使用索引</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应该修改为:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2-前导模糊查询不能使用索引" tabindex="-1"><a class="header-anchor" href="#_2-前导模糊查询不能使用索引" aria-hidden="true">#</a> 2. 前导模糊查询不能使用索引</h2><p>如:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;%zhangsan&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>非前导则可以:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;zhangsan%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议可以考虑使用 <code>Lucene</code> 等全文索引工具来代替频繁的模糊查询。</p><h2 id="_3-数据区分不明显的不建议创建索引" tabindex="-1"><a class="header-anchor" href="#_3-数据区分不明显的不建议创建索引" aria-hidden="true">#</a> 3. 数据区分不明显的不建议创建索引</h2><p>如 user 表中的性别字段，可以明显区分的才建议创建索引，如身份证等字段。</p><h2 id="_4-字段的默认值不要为-null" tabindex="-1"><a class="header-anchor" href="#_4-字段的默认值不要为-null" aria-hidden="true">#</a> 4. 字段的默认值不要为 null</h2><p>这样会带来和预期不一致的查询结果。</p><h2 id="_5-在字段上进行计算不能命中索引" tabindex="-1"><a class="header-anchor" href="#_5-在字段上进行计算不能命中索引" aria-hidden="true">#</a> 5. 在字段上进行计算不能命中索引</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> FROM_UNIXTIME<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token operator">&lt;</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>应该修改为:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> create_time <span class="token operator">&lt;</span> FROM_UNIXTIME<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-最左前缀问题" tabindex="-1"><a class="header-anchor" href="#_6-最左前缀问题" aria-hidden="true">#</a> 6. 最左前缀问题</h2><p>如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span> <span class="token operator">and</span> pwd <span class="token operator">=</span><span class="token string">&#39;axsedf1sd&#39;</span>

<span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> pwd <span class="token operator">=</span><span class="token string">&#39;axsedf1sd&#39;</span> <span class="token operator">and</span> username<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span>

<span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是使用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> username <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> pwd <span class="token operator">=</span><span class="token string">&#39;axsedf1sd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是不能命中索引的。</p><h2 id="_7-如果明确知道只有一条记录返回" tabindex="-1"><a class="header-anchor" href="#_7-如果明确知道只有一条记录返回" aria-hidden="true">#</a> 7. 如果明确知道只有一条记录返回</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span> <span class="token keyword">limit</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以提高效率，可以让数据库停止游标移动。</p><h2 id="_8-不要让数据库帮我们做强制类型转换" tabindex="-1"><a class="header-anchor" href="#_8-不要让数据库帮我们做强制类型转换" aria-hidden="true">#</a> 8. 不要让数据库帮我们做强制类型转换</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> telno<span class="token operator">=</span><span class="token number">18722222222</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样虽然可以查出数据，但是会导致全表扫描。</p><p>需要修改为</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> name <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> telno<span class="token operator">=</span><span class="token string">&#39;18722222222&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_9-如果需要进行-join-的字段两表的字段类型要相同" tabindex="-1"><a class="header-anchor" href="#_9-如果需要进行-join-的字段两表的字段类型要相同" aria-hidden="true">#</a> 9. 如果需要进行 join 的字段两表的字段类型要相同</h2><p>不然也不会命中索引。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,36),c={href:"https://pdai.tech/md/db/sql-lan/sql-lan-optimize.html",target:"_blank",rel:"noopener noreferrer"},i=s("strong",null,"SQL语言 - SQL语句优化",-1);function k(u,h){const a=l("ExternalLinkIcon");return e(),p("div",null,[d,s("p",null,[s("a",c,[i,r(a)])])])}const v=n(t,[["render",k],["__file","sql-x-optimization.html.vue"]]);export{v as default};
