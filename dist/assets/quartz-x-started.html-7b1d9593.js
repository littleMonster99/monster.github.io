import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,D as i}from"./framework-f64bc974.js";const l={},u=n("h1",{id:"定时任务-quartz定时器入门",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#定时任务-quartz定时器入门","aria-hidden":"true"},"#"),s(" 定时任务 - quartz定时器入门")],-1),r=n("h2",{id:"_0-cron表达式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-cron表达式","aria-hidden":"true"},"#"),s(" 0. Cron表达式")],-1),k={href:"http://cron.qqe2.com/",target:"_blank",rel:"noopener noreferrer"},d=p(`<h2 id="_1-qaurtz简介" tabindex="-1"><a class="header-anchor" href="#_1-qaurtz简介" aria-hidden="true">#</a> 1. Qaurtz简介</h2><p>Quartz是一个完全由java编写的任务调度框架。 那么什么是任务调度呢？很多时候你可能会收到某个需求，要求程序 “ 隔某个特定的时间段 在某个特定的时间 做某个特定的事情 ”，比如：</p><ul><li>每个月的9号自动还款蚂蚁花呗</li><li>每年12月1日0点发送生日祝福给你的朋友</li><li>在某些视频网站中，购买会员后，每月会给会员送一些优惠券。</li><li>定时生成报表、邮件</li><li>一些需要定时清理数据的任务</li><li>在保证最终一致性的场景中，往往利用定时任务调度进行一些对比工作</li></ul><p>这些都是定时任务。而<strong>Quartz就是可以方便你创建各种任务定时执行的一个框架</strong>，而且触发这些任务的时间点可以设计的非常复杂，几乎都能完美匹配你的要求。</p><h2 id="_2-核心概念" tabindex="-1"><a class="header-anchor" href="#_2-核心概念" aria-hidden="true">#</a> 2. 核心概念</h2><h3 id="_2-1-任务job" tabindex="-1"><a class="header-anchor" href="#_2-1-任务job" aria-hidden="true">#</a> 2.1 任务Job</h3><p>Qaurtz 提供的定时任务的接口，我们需要实现该接口做具体的操作。如定时发送邮件Job，重启机器Job</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027203631278.png" alt="image-20211027203631278" tabindex="0" loading="lazy"><figcaption>image-20211027203631278</figcaption></figure><h3 id="_2-2-触发器trigger" tabindex="-1"><a class="header-anchor" href="#_2-2-触发器trigger" aria-hidden="true">#</a> 2.2 触发器Trigger</h3><p>有了任务之后，还需要一个能够实现触发任务去执行的触发器，触发器Trigger最基本的功能是指定Job的执行时间，执行间隔，运行次数等。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027203739489.png" alt="image-20211027203739489" tabindex="0" loading="lazy"><figcaption>image-20211027203739489</figcaption></figure><h3 id="_2-3-调度器-schedule" tabindex="-1"><a class="header-anchor" href="#_2-3-调度器-schedule" aria-hidden="true">#</a> 2.3 调度器 Schedule</h3><p>有了Job和Trigger后，怎么样将两者结合起来呢？即怎样指定Trigger去执行指定的Job呢？这时需要一个Schedule，来负责这个功能的实现。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027203820564.png" alt="image-20211027203820564" tabindex="0" loading="lazy"><figcaption>image-20211027203820564</figcaption></figure><p>上面三个部分就是Quartz的基本组成部分：</p><ul><li>调度器：Scheduler</li><li>任务：JobDetail</li><li>触发器：Trigger，包括SimpleTrigger和CronTrigger</li></ul><h2 id="_3-主要api" tabindex="-1"><a class="header-anchor" href="#_3-主要api" aria-hidden="true">#</a> 3. 主要API</h2><ul><li>Scheduler - 与调度器交互的主要API。</li><li>Job - 需要被调度器调度的任务必须实现的接口。</li><li>JobDetail - 用于定义任务的实例。</li><li>Trigger - 用于定义调度器何时调度任务执行的组件。</li><li>JobBuilder - 用于定义或创建JobDetail的实例 。</li><li>TriggerBuilder - 用于定义或创建触发器实例。</li></ul><h2 id="_4-实例介绍" tabindex="-1"><a class="header-anchor" href="#_4-实例介绍" aria-hidden="true">#</a> 4. 实例介绍</h2><h3 id="_4-1-实现job接口" tabindex="-1"><a class="header-anchor" href="#_4-1-实现job接口" aria-hidden="true">#</a> 4.1 实现job接口</h3><p>实现Job接口，接口中的execute()，这里写你要定时执行的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;当前时间：&quot;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;: 定时器工作...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-创建schedule-执行任务" tabindex="-1"><a class="header-anchor" href="#_4-2-创建schedule-执行任务" aria-hidden="true">#</a> 4.2 创建Schedule，执行任务：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScheduler</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建调度器Scheduler</span>
        <span class="token class-name">SchedulerFactory</span> schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2、创建JobDetail实例，并与PrintWordsJob类绑定(Job执行内容)</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">MyJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3、构建Trigger实例,每隔1s执行一次</span>
        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;triggerGroup1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//立即生效</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//每隔1s执行一次</span>
                        <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直执行</span>

        <span class="token comment">//4、执行</span>
        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------scheduler start ! ------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//睡眠</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------scheduler shutdown ! ------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-运行测试" tabindex="-1"><a class="header-anchor" href="#_4-3-运行测试" aria-hidden="true">#</a> 4.3 运行测试</h3><p>运行程序，可以看到程序每隔1s会打印出内容，且在一分钟后结束：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027203158947.png" alt="image-20211027203158947" tabindex="0" loading="lazy"><figcaption>image-20211027203158947</figcaption></figure><h2 id="_5-job-详解" tabindex="-1"><a class="header-anchor" href="#_5-job-详解" aria-hidden="true">#</a> 5. Job 详解</h2><h3 id="_5-1-job" tabindex="-1"><a class="header-anchor" href="#_5-1-job" aria-hidden="true">#</a> 5.1 Job</h3><p>Job是Quartz中的一个接口，接口下只有execute方法，在这个方法中编写业务逻辑。 接口中的源码：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027204136389.png" alt="image-20211027204136389" tabindex="0" loading="lazy"><figcaption>image-20211027204136389</figcaption></figure><h3 id="_5-2-jobdetail" tabindex="-1"><a class="header-anchor" href="#_5-2-jobdetail" aria-hidden="true">#</a> 5.2 JobDetail</h3><p>JobDetail用来绑定Job，为Job实例提供许多属性：</p><ul><li><p>name</p></li><li><p>group</p></li><li><p>jobClass</p></li><li><p>jobDataMap</p></li></ul><p>JobDetail绑定指定的Job，每次Scheduler调度执行一个Job的时候，首先会拿到对应的Job，然后创建该Job实例，再去执行Job中的execute()的内容，任务执行结束后，关联的Job对象实例会被释放，且会被JVM GC清除。</p><h4 id="_5-2-1-为什么设计成jobdetail-job-不直接使用job" tabindex="-1"><a class="header-anchor" href="#_5-2-1-为什么设计成jobdetail-job-不直接使用job" aria-hidden="true">#</a> 5.2.1 为什么设计成JobDetail + Job，不直接使用Job</h4><p>JobDetail定义的是任务数据，而真正的执行逻辑是在Job中。 这是因为任务是有可能并发执行，如果Scheduler直接使用Job，就会存在对同一个Job实例并发访问的问题。而JobDetail &amp; Job 方式，Sheduler每次执行，都会根据JobDetail创建一个新的Job实例，这样就可以规避并发访问的问题。</p><h3 id="_5-3-jobexecutioncontext" tabindex="-1"><a class="header-anchor" href="#_5-3-jobexecutioncontext" aria-hidden="true">#</a> 5.3 JobExecutionContext</h3><p>JobExecutionContext中包含了Quartz运行时的环境以及Job本身的详细数据信息。 当Schedule调度执行一个Job的时候，就会将JobExecutionContext传递给该Job的execute()中，Job就可以通过JobExecutionContext对象获取信息。 主要信息有： <img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027204531035.png" alt="image-20211027204531035" loading="lazy"></p><h3 id="_5-4-jobdatamap" tabindex="-1"><a class="header-anchor" href="#_5-4-jobdatamap" aria-hidden="true">#</a> 5.4 JobDataMap</h3><p>JobDataMap实现了JDK的Map接口，可以以Key-Value的形式存储数据。 JobDetail、Trigger都可以使用JobDataMap来设置一些参数或信息， Job执行execute()方法的时候，JobExecutionContext可以获取到JobExecutionContext中的信息： 如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">PrintWordsJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;jobDetail1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这个Job用来测试的&quot;</span><span class="token punctuation">)</span>
                  <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;triggerGroup1&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这是jobDetail1的trigger&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//立即生效</span>
      <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//每隔1s执行一次</span>
      <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直执行</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Job执行的时候，可以获取到这些参数信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">{</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jobExecutionContext<span class="token punctuation">.</span><span class="token function">getJobDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;jobDetail1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jobExecutionContext<span class="token punctuation">.</span><span class="token function">getTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJobDataMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> printTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yy-MM-dd HH-mm-ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PrintWordsJob start at:&quot;</span> <span class="token operator">+</span> printTime <span class="token operator">+</span> <span class="token string">&quot;, prints: Hello Job-&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-trigger-详解" tabindex="-1"><a class="header-anchor" href="#_6-trigger-详解" aria-hidden="true">#</a> 6. Trigger 详解</h2><p>Trigger、SimpleTrigger、CronTrigger</p><h3 id="_6-1-trigger" tabindex="-1"><a class="header-anchor" href="#_6-1-trigger" aria-hidden="true">#</a> 6.1 Trigger</h3><p>Trigger是Quartz的触发器，会去通知Scheduler何时去执行对应Job。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>表示触发器首次被触发的时间<span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>表示触发器结束触发的时间<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-simpletrigger" tabindex="-1"><a class="header-anchor" href="#_6-2-simpletrigger" aria-hidden="true">#</a> 6.2 <strong>SimpleTrigger</strong></h3><p>SimpleTrigger可以实现在一个指定时间段内执行一次作业任务或一个时间段内多次执行作业任务。 下面的程序就实现了程序运行5s后开始执行Job，执行Job 5s后结束执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Date</span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
startDate<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 <span class="token class-name">Date</span> endDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 endDate<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;triggerGroup1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这是jobDetail1的trigger&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//立即生效</span>
                <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>startDate<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span>endDate<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//每隔1s执行一次</span>
                <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-crontrigger" tabindex="-1"><a class="header-anchor" href="#_6-3-crontrigger" aria-hidden="true">#</a> 6.3 CronTrigger</h3><p>CronTrigger功能非常强大，是基于日历的作业调度，而SimpleTrigger是精准指定间隔，所以相比SimpleTrigger，CroTrigger更加常用。CroTrigger是基于Cron表达式的，先了解下Cron表达式： 由7个子表达式组成字符串的，格式如下：</p><p>[秒] [分] [小时] [日] [月] [周] [年]</p><p>Cron表达式的语法比较复杂， 如：* 30 10 ? * 1/5 * 表示（从后往前看） [指定年份] 的[ 周一到周五][指定月][不指定日][上午10时][30分][指定秒]</p><p>又如：00 00 00 ？ * 10,11,12 1#5 2018 表示2018年10、11、12月的第一周的星期五这一天的0时0分0秒去执行任务。</p><p>下面是给的一个例子：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027205941975.png" alt="image-20211027205941975" tabindex="0" loading="lazy"><figcaption>image-20211027205941975</figcaption></figure>`,59),g={href:"http://cron.qqe2.com/",target:"_blank",rel:"noopener noreferrer"},m=p(`<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20211027210001186.png" alt="image-20211027210001186" tabindex="0" loading="lazy"><figcaption>image-20211027210001186</figcaption></figure><p>下面的代码就实现了每周一到周五上午10:30执行定时任务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScheduler2</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建调度器Scheduler</span>
        <span class="token class-name">SchedulerFactory</span> schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2、创建JobDetail实例，并与PrintWordsJob类绑定(Job执行内容)</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">PrintWordsJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;jobDetail1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这个Job用来测试的&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;job1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;group1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3、构建Trigger实例,每隔1s执行一次</span>
        <span class="token class-name">Date</span> startDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        startDate<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Date</span> endDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        endDate<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>startDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CronTrigger</span> cronTrigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;triggerGroup1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">usingJobData</span><span class="token punctuation">(</span><span class="token string">&quot;trigger1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这是jobDetail1的trigger&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//立即生效</span>
                <span class="token punctuation">.</span><span class="token function">startAt</span><span class="token punctuation">(</span>startDate<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">endAt</span><span class="token punctuation">(</span>endDate<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">&quot;* 30 10 ? * 1/5 2018&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4、执行</span>
        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------scheduler start ! ------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;--------scheduler shutdown ! ------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,4),b={href:"https://blog.csdn.net/noaman_wgs/article/details/80984873",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000015885177",target:"_blank",rel:"noopener noreferrer"};function h(f,J){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("p",null,[n("a",k,[s("在线生成Cron表达式的工具"),t(a)])]),d,n("p",null,[s("可通过在线生成Cron表达式的工具："),n("a",g,[s("http://cron.qqe2.com/"),t(a)]),s(" 来生成自己想要的表达式。")]),m,n("p",null,[n("a",b,[s("定时任务框架Quartz-(一)Quartz入门与Demo搭建"),t(a)])]),n("p",null,[n("a",v,[s("Quartz使用介紹"),t(a)])])])}const q=e(l,[["render",h],["__file","quartz-x-started.html.vue"]]);export{q as default};
