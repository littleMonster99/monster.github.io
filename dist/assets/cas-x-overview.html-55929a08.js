import{_ as t,W as r,X as c,Y as a,Z as e,$ as n,a0 as i,D as o}from"./framework-f64bc974.js";const l={},p=i('<h1 id="cas单点登录-服务搭建" tabindex="-1"><a class="header-anchor" href="#cas单点登录-服务搭建" aria-hidden="true">#</a> CAS单点登录 - 服务搭建</h1><h2 id="_1-什么是cas" tabindex="-1"><a class="header-anchor" href="#_1-什么是cas" aria-hidden="true">#</a> 1. 什么是CAS</h2><p>CAS是Central Authentication Service的缩写，中央认证服务，一种独立开放指令协议。CAS 是 耶鲁大学（Yale University）发起的一个开源项目，旨在为 Web 应用系统提供一种可靠的单点登录方法，CAS 在 2004 年 12 月正式成为 JA-SIG 的一个项目。</p><p>简单来说，就是开源的企业级单点登录（SSO）服务。</p><h2 id="_2-cas-server-搭建思路" tabindex="-1"><a class="header-anchor" href="#_2-cas-server-搭建思路" aria-hidden="true">#</a> 2. CAS Server 搭建思路</h2>',5),d={href:"https://github.com/apereo/cas-overlay-template",target:"_blank",rel:"noopener noreferrer"},g=a("p",null,[e("对于简单部署一个CAS 服务端，就可以直接下载 Maven 仓库中的War包进行部署，本文亦使用此方法部署 "),a("code",null,"5.3.16"),e(" 版本的CAS 服务端。如需定制开发，请使用官方模板仓库进行开发。")],-1),m=a("blockquote",null,[a("p",null,"CAS 服务端 5.x 使用 JDK 1.8，6.x 开始使用 JDK 11，由于公司项目在用1.8，就用 CAS 5.x 最新版本 5.3.16 了")],-1),h=a("h2",{id:"_3-方案1-官网war包部署",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-方案1-官网war包部署","aria-hidden":"true"},"#"),e(" 3. 方案1：官网war包部署")],-1),u=a("h3",{id:"_3-1-下载maven仓库war包",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_3-1-下载maven仓库war包","aria-hidden":"true"},"#"),e(" 3.1 下载Maven仓库War包")],-1),v={href:"https://repo1.maven.org/maven2/org/apereo/cas/cas-server-webapp-tomcat/5.3.16/",target:"_blank",rel:"noopener noreferrer"},b=i(`<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214222622428.png" alt="image-20230214222622428" tabindex="0" loading="lazy"><figcaption>image-20230214222622428</figcaption></figure><h3 id="_3-2-使用tomcat-部署" tabindex="-1"><a class="header-anchor" href="#_3-2-使用tomcat-部署" aria-hidden="true">#</a> 3.2 使用tomcat 部署</h3><blockquote><p>这里手动将war包改成zip、并手动解压后改名为cas了</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214222859311.png" alt="image-20230214222859311" tabindex="0" loading="lazy"><figcaption>image-20230214222859311</figcaption></figure><h3 id="_3-3-启动服务" tabindex="-1"><a class="header-anchor" href="#_3-3-启动服务" aria-hidden="true">#</a> 3.3 启动服务</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#启动tomcat
cd apache-tomcat-9.0.56/bin
./startup.sh
#查看日志
cd ..
tail -f logs/catalina.out

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223125899.png" alt="image-20230214223125899" tabindex="0" loading="lazy"><figcaption>image-20230214223125899</figcaption></figure><h3 id="_3-4-查看服务是否正常" tabindex="-1"><a class="header-anchor" href="#_3-4-查看服务是否正常" aria-hidden="true">#</a> 3.4 查看服务是否正常</h3><p>出现Ready后，Ctrl+C停止日志输出控制台，访问服务器IP:8080/cas，查看cas是否启动成功</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223316372.png" alt="image-20230214223316372" tabindex="0" loading="lazy"><figcaption>image-20230214223316372</figcaption></figure><p>默认用户名与密码在配置文件application.properties中(CAS 服务端是用SpringBoot实现的)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#打开配置文件</span>
<span class="token function">vim</span> /opt/apache-tomcat-9.0.56/webapps/cas/WEB-INF/classes/application.properties
<span class="token comment">#Shift + G 跳转到最后，能看到casuser是用户名，Mellon是密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入用户名与密码，登录</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223409995.png" alt="image-20230214223409995" tabindex="0" loading="lazy"><figcaption>image-20230214223409995</figcaption></figure><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223420862.png" alt="image-20230214223420862" tabindex="0" loading="lazy"><figcaption>image-20230214223420862</figcaption></figure><p>提示登录成功，到此一个最基础的CAS服务端搭建完成了，接下来将开启 http 协议支持，这是用来应用服务授权时使用的。</p><h2 id="_4-调整-cas-服务端配置" tabindex="-1"><a class="header-anchor" href="#_4-调整-cas-服务端配置" aria-hidden="true">#</a> 4. 调整 CAS 服务端配置</h2><p>默认CAS 服务端将 http 协议的客户端都认为是不合法的，需要修改配置文件 <code>HTTPSandIMAPS-10000001.json</code> 添加 http协议支持。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /opt/apache-tomcat-9.0.56/webapps/cas/WEB-INF/classes/services
<span class="token function">vim</span> HTTPSandIMAPS-10000001.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>添加绿框部分文字 <code>|http</code>，添加 http 协议支持。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223553143.png" alt="image-20230214223553143" tabindex="0" loading="lazy"><figcaption>image-20230214223553143</figcaption></figure><p>修改完成保存退出，还需要编辑 application.properties</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">vim</span> <span class="token value attr-value">/opt/apache-tomcat-9.0.56/webapps/cas/WEB-INF/classes/application.properties</span>
<span class="token comment">#在配置文件最后添加如下两行</span>
<span class="token key attr-name">cas.tgc.secure</span><span class="token punctuation">=</span><span class="token value attr-value">false #取消票根对应的Cookie的Secure配置，否则非https无法完成单点登录（但是能达到每个应用都需要登录的目的）</span>
<span class="token key attr-name">cas.serviceRegistry.initFromJson</span><span class="token punctuation">=</span><span class="token value attr-value">true #使用services目录下的json配置初始化serviceRegistry</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20230214223646403.png" alt="image-20230214223646403" tabindex="0" loading="lazy"><figcaption>image-20230214223646403</figcaption></figure><p>重启 tomcat 就可以使用应用服务进行单点登录测试了。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,26),f={href:"https://www.cnblogs.com/hellxz/p/15740935.html",target:"_blank",rel:"noopener noreferrer"};function _(z,x){const s=o("ExternalLinkIcon");return r(),c("div",null,[p,a("p",null,[e("CAS 官方提供了一种使用 Apereo CAS WAR Overlay Template 的方式（开发人员通过 克隆模板仓库"),a("a",d,[e("https://github.com/apereo/cas-overlay-template"),n(s)]),e(" ，修改Maven/Gradle配置引入官方发布War包依赖，构建时将变更的文件更新到新的War中）简化了开发人员二次开发复杂性，提高了开发效率。")]),g,m,h,u,a("p",null,[a("a",v,[e("https://repo1.maven.org/maven2/org/apereo/cas/cas-server-webapp-tomcat/5.3.16/"),n(s)])]),b,a("p",null,[a("a",f,[e("CAS学习笔记一：CAS 授权服务器简易搭建"),n(s)])])])}const k=t(l,[["render",_],["__file","cas-x-overview.html.vue"]]);export{k as default};
