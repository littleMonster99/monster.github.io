import{_ as a,W as e,X as t,Y as n,Z as o,$ as c,a0 as i,D as p}from"./framework-f64bc974.js";const l={},d=i(`<h1 id="优化-接口优化技巧" tabindex="-1"><a class="header-anchor" href="#优化-接口优化技巧" aria-hidden="true">#</a> 优化 - 接口优化技巧</h1><h2 id="_0-前言" tabindex="-1"><a class="header-anchor" href="#_0-前言" aria-hidden="true">#</a> 0. 前言</h2><p>之前工作中，遇到一个<code>504</code>超时问题。原因是因为接口耗时过长，超过<code>nginx</code>配置的<code>10</code>秒。然后 真枪实弹搞了一次接口性能优化，最后接口从<code>11.3s</code>降为<code>170ms</code>。本文将跟小伙伴们分享接口优化的<strong>一些通用</strong>方案。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203214622902.png" alt="image-20221203214622902" tabindex="0" loading="lazy"><figcaption>image-20221203214622902</figcaption></figure><h2 id="_1-批量思想-批量操作数据库" tabindex="-1"><a class="header-anchor" href="#_1-批量思想-批量操作数据库" aria-hidden="true">#</a> 1. 批量思想：批量操作数据库</h2><p><strong>优化前：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//for循环单笔入库</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">TransDetail</span> detail<span class="token operator">:</span>transDetailList<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">insert</span><span class="token punctuation">(</span>detail<span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化后：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">batchInsert</span><span class="token punctuation">(</span>transDetailList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>打个比喻：</strong></p><blockquote><p>打个比喻:假如你需要搬一万块砖到楼顶,你有一个电梯,电梯一次可以放适量的砖（最多放<code>500</code>）, 你可以选择一次运送一块砖,也可以一次运送<code>500</code>,你觉得哪种方式更方便，时间消耗更少?</p></blockquote><h2 id="_2-异步思想-耗时操作-考虑放到异步执行" tabindex="-1"><a class="header-anchor" href="#_2-异步思想-耗时操作-考虑放到异步执行" aria-hidden="true">#</a> 2. 异步思想：耗时操作，考虑放到异步执行</h2><p>耗时操作，考虑用<strong>异步处理</strong>，这样可以降低接口耗时。</p><p>假设一个转账接口，匹配联行号，是同步执行的，<strong>但是它的操作耗时有点长</strong>，优化前的流程：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203214914931.png" alt="image-20221203214914931" tabindex="0" loading="lazy"><figcaption>image-20221203214914931</figcaption></figure><p>为了降低接口耗时，更快返回，你可以把<strong>匹配联行号</strong>移到<strong>异步处理</strong>，优化后：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203214939868.png" alt="image-20221203214939868" tabindex="0" loading="lazy"><figcaption>image-20221203214939868</figcaption></figure><ul><li>除了转账这个例子，日常工作中还有很多这种例子。比如：<strong>用户注册成功后，短信邮件通知，也是可以异步处理的</strong>~</li><li>至于异步的实现方式，<strong>你可以用线程池，也可以用消息队列实现</strong>。</li></ul><h2 id="_3-空间换时间思想-恰当使用缓存。" tabindex="-1"><a class="header-anchor" href="#_3-空间换时间思想-恰当使用缓存。" aria-hidden="true">#</a> 3. 空间换时间思想：恰当使用缓存。</h2><p>在适当的业务场景，恰当地使用缓存，是可以大大提高接口性能的。缓存其实就是一种<strong>空间换时间的思想</strong>，就是你把要查的数据，提前放好到缓存里面，需要时，<strong>直接查缓存，而避免去查数据库或者计算的过程</strong>。</p><p>这里的缓存包括：<code>Redis</code>缓存，<code>JVM</code>本地缓存，<code>memcached</code>，或者<code>Map</code>等等。我举个我工作中，一次使用缓存优化的设计吧，比较简单，但是思路很有借鉴的意义。</p><blockquote><p>那是一次转账接口的优化，<strong>老代码</strong>，每次转账，都会根据客户账号，查询数据库，计算匹配联行号。</p></blockquote><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203215330857.png" alt="image-20221203215330857" tabindex="0" loading="lazy"><figcaption>image-20221203215330857</figcaption></figure><p>因为每次<strong>都查数据库，都计算匹配，比较耗时</strong>，所以<strong>使用缓存</strong>，优化后流程如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203215424368.png" alt="image-20221203215424368" tabindex="0" loading="lazy"><figcaption>image-20221203215424368</figcaption></figure><h2 id="_4-预取思想-提前初始化到缓存" tabindex="-1"><a class="header-anchor" href="#_4-预取思想-提前初始化到缓存" aria-hidden="true">#</a> 4. 预取思想：提前初始化到缓存</h2><p>预取思想很容易理解，就是<strong>提前把要计算查询的数据，初始化到缓存</strong>。如果你在未来某个时间需要用到某个经过复杂计算的数据，<strong>才实时去计算的话，可能耗时比较大</strong>。这时候，我们可以采取预取思想，<strong>提前把将来可能需要的数据计算好，放到缓存中</strong>，等需要的时候，去缓存取就行。这将大幅度提高接口性能。</p><p>我记得以前在第一个公司做视频直播的时候，看到我们的直播列表就是用到<strong>这种优化方案</strong>。就是启动个任务，<strong>提前把直播用户、积分等相关信息，初始化到缓存</strong>。</p><h2 id="_5-池化思想-预分配与循环使用" tabindex="-1"><a class="header-anchor" href="#_5-池化思想-预分配与循环使用" aria-hidden="true">#</a> 5. 池化思想：预分配与循环使用</h2><p>大家应该都记得，<strong>我们为什么需要使用线程池</strong>？</p><blockquote><p>线程池可以帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。</p></blockquote><p><strong>如果你每次需要用到线程，都去创建，就会有增加一定的耗时，而线程池可以重复利用线程，避免不必要的耗时。</strong> 池化技术不仅仅指线程池，很多场景都有池化思想的体现，它的本质就是<strong>预分配与循环使用</strong>。</p><p>比如<code>TCP</code>三次握手，大家都很熟悉吧，它为了减少性能损耗，引入了<code>Keep-Alive长连接</code>，避免频繁的创建和销毁连接。当然，类似的例子还有很多，如数据库连接池、<code>HttpClient</code>连接池。</p><p>我们写代码的过程中，<strong>学会池化思想</strong>，最直接相关的就是使用线程池而不是去<code>new</code>一个线程。</p><h2 id="_6-事件回调思想-拒绝阻塞等待。" tabindex="-1"><a class="header-anchor" href="#_6-事件回调思想-拒绝阻塞等待。" aria-hidden="true">#</a> 6. 事件回调思想：拒绝阻塞等待。</h2><p>如果你调用一个系统<code>B</code>的接口，但是它处理业务逻辑，耗时需要<code>10s</code>甚至更多。然后你是一直<strong>阻塞等待，直到系统B的下游接口返回</strong>，再继续你的下一步操作吗？这样<strong>显然不合理</strong>。</p><p>我们参考<strong>IO多路复用模型</strong>。即我们不用阻塞等待系统<code>B</code>的接口，而是先去做别的操作。等系统<code>B</code>的接口处理完，通过<strong>事件回调</strong>通知，我们接口收到通知再进行对应的业务操作即可。</p><h2 id="_7-远程调用由串行改为并行" tabindex="-1"><a class="header-anchor" href="#_7-远程调用由串行改为并行" aria-hidden="true">#</a> 7. 远程调用由串行改为并行</h2><p>假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。如果是串行一个一个查，比如查用户信息<code>200ms</code>，查banner信息<code>100ms</code>、查弹窗信息<code>50ms</code>，那一共就耗时<code>350ms</code>了，如果还查其他信息，那耗时就更大了。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203215917219.png" alt="image-20221203215917219" tabindex="0" loading="lazy"><figcaption>image-20221203215917219</figcaption></figure><p>其实我们可以改为并行调用，即查用户信息、查banner信息、查弹窗信息，可以同时<strong>并行发起</strong>。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203215942817.png" alt="image-20221203215942817" tabindex="0" loading="lazy"><figcaption>image-20221203215942817</figcaption></figure><h2 id="_8-锁粒度避免过粗" tabindex="-1"><a class="header-anchor" href="#_8-锁粒度避免过粗" aria-hidden="true">#</a> 8. 锁粒度避免过粗</h2><p>在高并发场景，为了防止<strong>超卖等情况</strong>，我们经常需要<strong>加锁来保护共享资源</strong>。但是，如果加锁的粒度过粗，是很影响接口性能的。</p><p>什么是加锁粒度呢？</p><blockquote><p>其实就是就是你要锁住的范围是多大。<strong>比如你在家上卫生间，你只要锁住卫生间就可以了吧</strong>，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。</p></blockquote><p>不管你是<code>synchronized</code>加锁还是<code>redis</code>分布式锁，只需要在共享临界资源加锁即可，不涉及共享资源的，就不必要加锁。<strong>这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。</strong></p><p>比如，在业务代码中，有一个<code>ArrayList</code>因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的<code>slowNotShare</code>方法）不涉及线程安全问题。<strong>反例加锁，就是一锅端，全锁住</strong>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//不涉及共享资源的慢方法</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//错误的加锁方法</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">wrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//加锁粒度太粗了，slowNotShare其实不涉及共享资源</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;cosume time:{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>正例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> beginTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">slowNotShare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以不加锁</span>
        <span class="token comment">//只对List这部分加锁</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;cosume time:{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> beginTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-切换存储方式-文件中转暂存数据" tabindex="-1"><a class="header-anchor" href="#_9-切换存储方式-文件中转暂存数据" aria-hidden="true">#</a> 9. 切换存储方式：文件中转暂存数据</h2><p>如果数据太大，落地数据库实在是慢的话，<strong>就可以考虑先用文件的方式暂存</strong>。先保存文件，再异步<strong>下载文件，慢慢保存到数据库</strong>。</p><p>这里可能会有点抽象，给大家分享一个，我之前的一个<strong>真实的优化案例</strong>吧。</p><blockquote><p>之前开发了一个转账接口。如果是并发开启，10个并发度，每个批次<code>1000</code>笔转账明细数据，数据库插入会特别耗时，<strong>大概6秒左右</strong>；这个跟我们公司的数据库同步机制有关，并发情况下，因为优先保证同步，所以并行的插入变成串行啦，就很耗时。</p></blockquote><p><strong>优化前</strong>，<code>1000</code>笔明细转账数据，先落地<code>DB</code>数据库，返回处理中给用户，再异步转账。如图：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203224843846.png" alt="image-20221203224843846" tabindex="0" loading="lazy"><figcaption>image-20221203224843846</figcaption></figure><p>记得当时压测的时候，高并发情况，这<code>1000</code>笔明细入库，耗时都比较大。所以我转换了一下思路，<strong>把批量的明细转账记录保存的文件服务器，然后记录一笔转账总记录到数据库即可</strong>。接着异步再把明细下载下来，进行转账和明细入库。最后优化后，性能提升了<strong>十几倍</strong>。</p><p><strong>优化后</strong>，流程图如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203230306806.png" alt="image-20221203230306806" tabindex="0" loading="lazy"><figcaption>image-20221203230306806</figcaption></figure><p>如果你的接口耗时瓶颈就<strong>在数据库插入操作这里</strong>，用来批量操作等，还是效果还不理想，就可以考虑用文件或者<code>MQ</code>等暂存。有时候批量数据放到文件，会比插入数据库效率更高。</p><h2 id="_10-索引" tabindex="-1"><a class="header-anchor" href="#_10-索引" aria-hidden="true">#</a> 10. 索引</h2><p>提到接口优化，很多小伙伴都会想到<strong>添加索引</strong>。没错，<strong>添加索引是成本最小的优化</strong>，而且一般优化效果都很不错。</p><p>索引优化这块的话，一般从这几个维度去思考：</p><ul><li>你的SQL加索引了没？</li><li>你的索引是否真的生效？</li><li>你的索引建立是否合理？</li></ul><h3 id="_10-1-sql没加索引" tabindex="-1"><a class="header-anchor" href="#_10-1-sql没加索引" aria-hidden="true">#</a> 10.1 SQL没加索引</h3><p>我们开发的时候，容易疏忽而忘记给SQL添加索引。所以我们在写完<code>SQL</code>的时候，就顺手查看一下 <code>explain</code>执行计划。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>explain select * from user_info where userId like &#39;%123&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你也可以通过命令<code>show create table</code>，整张表的索引情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>show create table user_info;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果某个表忘记添加某个索引，可以通过<code>alter table add index</code>命令添加索引</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alter table user_info add index idx_name (name);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般就是：<code>SQL</code>的<code>where</code>条件的字段，或者是<code>order by 、group by</code>后面的字段需需要添加索引。</p><h3 id="_10-2-索引不生效" tabindex="-1"><a class="header-anchor" href="#_10-2-索引不生效" aria-hidden="true">#</a> 10.2 索引不生效</h3><p>有时候，即使你添加了索引，但是索引会失效的。<strong>田螺哥整理了索引失效的常见原因</strong>：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203230520898.png" alt="image-20221203230520898" tabindex="0" loading="lazy"><figcaption>image-20221203230520898</figcaption></figure><h3 id="_10-3-索引设计不合理" tabindex="-1"><a class="header-anchor" href="#_10-3-索引设计不合理" aria-hidden="true">#</a> 10.3 索引设计不合理</h3><p>我们的索引不是越多越好，需要合理设计。比如：</p><ul><li>删除冗余和重复索引。</li><li>索引一般不能超过<code>5</code>个</li><li>索引不适合建在有大量重复数据的字段上、如性别字段</li><li>适当使用覆盖索引</li><li>如果需要使用<code>force index</code>强制走某个索引，那就需要思考你的索引设计是否真的合理了</li></ul><h2 id="_11-优化sql" tabindex="-1"><a class="header-anchor" href="#_11-优化sql" aria-hidden="true">#</a> 11. 优化SQL</h2><p>处了索引优化，其实SQL还有很多其他有优化的空间。比如这些：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203230629979.png" alt="image-20221203230629979" tabindex="0" loading="lazy"><figcaption>image-20221203230629979</figcaption></figure><h2 id="_12-避免大事务问题" tabindex="-1"><a class="header-anchor" href="#_12-避免大事务问题" aria-hidden="true">#</a> 12.避免大事务问题</h2><p>为了保证数据库数据的一致性，在涉及到多个<strong>数据库修改</strong>操作时，我们经常需要用到事务。而使用<code>spring</code>声明式事务，又非常简单，只需要用一个注解就行<code>@Transactional</code>，如下面的例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//保存用户信息</span>
    userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    passCertDao<span class="token punctuation">.</span><span class="token function">updateFlag</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这块代码主要逻辑就是创建个用户，然后更新一个通行证<code>pass</code>的标记。如果现在新增一个需求，创建完用户，调用远程接口发送一个<code>email</code>消息通知，很多小伙伴会这么写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">createUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//保存用户信息</span>
    userDao<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    passCertDao<span class="token punctuation">.</span><span class="token function">updateFlag</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getPassId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sendEmailRpc</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样实现可能会有坑，事务中嵌套<code>RPC</code>远程调用，即事务嵌套了一些非<code>DB</code>操作。如果这些非<code>DB</code>操作耗时比较大的话，可能会出现<strong>大事务问题</strong>。</p><blockquote><p>所谓大事务问题就是，就是<strong>运行时间长的事务</strong>。由于事务一致不提交，就会导致数据库连接被占用，即并发场景下，数据库连接池被占满，影响到别的请求访问数据库，<strong>影响别的接口性能</strong>。</p></blockquote><p>大事务引发的问题主要有：<strong>接口超时、死锁、主从延迟</strong>等等。因此，为了优化接口，我们要规避大事务问题。我们可以通过这些方案来规避大事务：</p><ul><li>RPC远程调用不要放到事务里面</li><li>一些查询相关的操作，尽量放到事务之外</li><li>事务中避免处理太多数据</li></ul><h2 id="_13-深分页问题" tabindex="-1"><a class="header-anchor" href="#_13-深分页问题" aria-hidden="true">#</a> 13. 深分页问题</h2><p>在以前公司分析过几个接口耗时长的问题，最终结论都是因为<strong>深分页问题</strong>。</p><p>深分页问题，为什么会慢？我们看下这个SQL</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select id,name,balance from account where create_time&gt; &#39;2020-09-19&#39; limit 100000,10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>limit 100000,10</code>意味着会扫描<code>100010</code>行，丢弃掉前<code>100000</code>行，最后返回<code>10</code>行。即使<code>create_time</code>，也会回表很多次。</p><p>我们可以通过<strong>标签记录法和延迟关联法</strong>来优化深分页问题。</p><h3 id="_13-1-标签记录法" tabindex="-1"><a class="header-anchor" href="#_13-1-标签记录法" aria-hidden="true">#</a> 13.1 标签记录法</h3><blockquote><p>就是标记一下上次查询到哪一条了，下次再来查的时候，从该条开始往下扫描。就好像看书一样，上次看到哪里了，你就折叠一下或者夹个书签，下次来看的时候，直接就翻到啦。</p></blockquote><p>假设上一次记录到<code>100000</code>，则SQL可以修改为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>select  id,name,balance FROM account where id &gt; 100000 limit 10;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样的话，后面无论翻多少页，性能都会不错的，因为命中了<code>id</code>主键索引。但是这种方式有局限性：<strong>需要一种类似连续自增的字段。</strong></p><h3 id="_13-2-延迟关联法" tabindex="-1"><a class="header-anchor" href="#_13-2-延迟关联法" aria-hidden="true">#</a> 13.2 延迟关联法</h3><p>延迟关联法，就是把条件转移到主键索引树，然后减少回表。优化后的SQL如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>  acct1<span class="token punctuation">.</span>id<span class="token punctuation">,</span>acct1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>acct1<span class="token punctuation">.</span>balance <span class="token keyword">FROM</span> account acct1 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> a<span class="token punctuation">.</span>id <span class="token keyword">FROM</span> account a <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>create_time <span class="token operator">&gt;</span> <span class="token string">&#39;2020-09-19&#39;</span> <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> acct2 <span class="token keyword">on</span> acct1<span class="token punctuation">.</span>id<span class="token operator">=</span> acct2<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>优化思路就是</strong>，先通过<code>idx_create_time</code>二级索引树查询到满足条件的主键ID，再与原表通过主键ID内连接，这样后面直接走了主键索引了，同时也减少了回表。</p><h2 id="_14-优化程序结构" tabindex="-1"><a class="header-anchor" href="#_14-优化程序结构" aria-hidden="true">#</a> 14. 优化程序结构</h2><p>优化程序逻辑、程序代码，是可以节省耗时的。比如，<strong>你的程序创建多不必要的对象、或者程序逻辑混乱，多次重复查数据库、又或者你的实现逻辑算法不是最高效的</strong>，等等。</p><p>我举个简单的例子：<strong>复杂的逻辑条件，有时候调整一下顺序，就能让你的程序更加高效。</strong></p><blockquote><p>假设业务需求是这样：如果用户是会员，第一次登陆时，需要发一条感谢短信。如果没有经过思考，代码直接这样写了</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if(isUserVip &amp;&amp; isFirstLogin){
    sendSmsMsg();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设有<code>5</code>个请求过来，<code>isUserVip</code>判断通过的有<code>3</code>个请求，<code>isFirstLogin</code>通过的只有<code>1</code>个请求。那么以上代码，<code>isUserVip</code>执行的次数为<code>5</code>次，<code>isFirstLogin</code>执行的次数也是<code>3</code>次，如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203232219819.png" alt="image-20221203232219819" tabindex="0" loading="lazy"><figcaption>image-20221203232219819</figcaption></figure><p>如果调整一下<code>isUserVip</code>和<code>isFirstLogin</code>的顺序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>if(isFirstLogin &amp;&amp; isUserVip ){
    sendMsg();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>isFirstLogin</code>执行的次数是<code>5</code>次，<code>isUserVip</code>执行的次数是<code>1</code>次：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20221203232239523.png" alt="image-20221203232239523" tabindex="0" loading="lazy"><figcaption>image-20221203232239523</figcaption></figure><h2 id="_15-压缩传输内容" tabindex="-1"><a class="header-anchor" href="#_15-压缩传输内容" aria-hidden="true">#</a> 15. 压缩传输内容</h2><p>压缩传输内容，传输报文变得更小，因此传输会更快啦。<code>10M</code>带宽，传输<code>10k</code>的报文，一般比传输<code>1M</code>的会快呀。</p><blockquote><p>打个比喻，一匹千里马，它驮着100斤的货跑得快，还是驮着10斤的货物跑得快呢？</p></blockquote><p>再举个视频网站的例子：</p><blockquote><p>如果不对视频做任何压缩编码，因为带宽又是有限的。<strong>巨大的数据量在网络传输的耗时会比编码压缩后，慢好多倍</strong>。</p></blockquote><h2 id="_16-海量数据处理-考虑nosql" tabindex="-1"><a class="header-anchor" href="#_16-海量数据处理-考虑nosql" aria-hidden="true">#</a> 16. 海量数据处理，考虑NoSQL</h2><p>之前看过几个慢<code>SQL</code>，都是跟深分页问题有关的。<strong>发现用来标签记录法和延迟关联法，效果不是很明显</strong>，原因是要统计和模糊搜索，并且统计的数据是真的大。最后跟组长对齐方案，就把数据同步到<code>Elasticsearch</code>，然后这些模糊搜索需求，都走<code>Elasticsearch</code>去查询了。</p><p>我想表达的就是，如果数据量过大，一定要用关系型数据库存储的话，就可以分库分表。但是有时候，我们也可以使用<code>NoSQL，如Elasticsearch、Hbase</code>等。</p><h2 id="_17-线程池设计要合理" tabindex="-1"><a class="header-anchor" href="#_17-线程池设计要合理" aria-hidden="true">#</a> 17. 线程池设计要合理</h2><p>我们使用线程池，就是让<strong>任务并行处理，更高效地完成任务</strong>。但是有时候，如果线程池设计不合理，接口执行效率则不太理想。</p><p>一般我们需要关注线程池的这几个参数：<strong>核心线程、最大线程数量、阻塞队列</strong>。</p><ul><li>如果核心线程过小，则达不到很好的并行效果。</li><li>如果阻塞队列不合理，不仅仅是阻塞的问题，甚至可能会<code>OOM</code></li><li>如果线程池不区分业务隔离，<strong>有可能核心业务被边缘业务拖垮</strong>。</li></ul><h2 id="_18-机器问题-fullgc、线程打满、太多io资源没关闭等等-。" tabindex="-1"><a class="header-anchor" href="#_18-机器问题-fullgc、线程打满、太多io资源没关闭等等-。" aria-hidden="true">#</a> 18.机器问题 （fullGC、线程打满、太多IO资源没关闭等等）。</h2><p>有时候，我们的接口慢，就是机器处理问题。主要有<code>fullGC</code>、线程打满、太多IO资源没关闭等等。</p><ul><li>之前排查过一个<code>fullGC</code>问题：运营小姐姐导出<code>60多万</code>的<code>excel</code>的时候，说<strong>卡死</strong>了，接着我们就收到监控告警。后面排查得出，我们老代码是<code>Apache POI</code>生成的<code>excel</code>，导出<code>excel</code>数据量很大时，当时JVM内存吃紧会直接<code>Full GC</code>了。</li><li>如果线程打满了，也会导致接口都在等待了。所以。如果是高并发场景，<strong>我们需要接入限流，把多余的请求拒绝掉</strong>。</li><li>如果<strong>IO资源没关闭，也会导致耗时增加</strong>。这个大家可以看下，平时你的电脑一直打开很多很多文件，是不是会觉得很卡。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,133),u={href:"https://mp.weixin.qq.com/s/ARMelvGnqxeWs8wCeV2r7A",target:"_blank",rel:"noopener noreferrer"};function r(g,k){const s=p("ExternalLinkIcon");return e(),t("div",null,[d,n("p",null,[n("a",u,[o("从11s到170ms！看看人家的接口优化技巧，那叫一个优雅！"),c(s)])])])}const b=a(l,[["render",r],["__file","optimization-x-interface-optimization.html.vue"]]);export{b as default};
