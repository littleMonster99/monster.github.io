import{_ as n,W as s,X as a,a0 as t}from"./framework-f64bc974.js";const p={},e=t(`<h1 id="list的contains导致cpu100" tabindex="-1"><a class="header-anchor" href="#list的contains导致cpu100" aria-hidden="true">#</a> List的contains导致cpu100%</h1><h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>在开发过程中用到了List，随着业务需求的变化，需要去重。当时直接就在代码中判断是否包含 <code>list.contains(&quot;a&quot;)</code> ，包含则不添加</p><p>代码大体如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 获取所有用户</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> allIdnos <span class="token operator">=</span> <span class="token function">getAllIdnos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 匹配的列表</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> idno<span class="token operator">:</span>allIdnos<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// ...省略。isMatch </span>
            <span class="token comment">// 匹配列表不包含用户id，才添加进匹配列表中</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>matchList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                matchList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idno<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
        <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这代码在本地是没有任何问题的，当部署到生成环境时CPU100%了。</p><h2 id="_2-问题解析" tabindex="-1"><a class="header-anchor" href="#_2-问题解析" aria-hidden="true">#</a> 2. 问题解析</h2><p>由于getAllIdnos() 获取到的用户数据量过于庞大，大概80w左右的数据。当这80w每添加一个都要做一便contains 操作的时候，其实他相当于做了一次遍历。时间复杂度是O（n）。那么要查找80w个数据是否包含的话，就需要80w*80w次操作。最终导致CPU100%</p><h2 id="_3-改进" tabindex="-1"><a class="header-anchor" href="#_3-改进" aria-hidden="true">#</a> 3. 改进</h2><p>改用set,set查找某一个元素的复杂度为O（1），此问题顺利解决</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">// 获取所有用户</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> allIdnos <span class="token operator">=</span> <span class="token function">getAllIdnos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 匹配的列表</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> matchSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> idno<span class="token operator">:</span>allIdnos<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>matchSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>idno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                matchSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>idno<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h2><p>写代码的时候要选择合适的数据结构，考虑算法复杂度。在数据量大的时候就差别非常明显了</p><ul><li><p>ArrayList本质就是通过数组实现的，查找一个元素是否包含要用到遍历，时间复杂度是O（n）</p></li><li><p>HashSetHashSet的查找是通过HashMap的KeySet来实现的，判断是否包含某个元素的实现，时间复杂度是O（1）</p></li></ul>`,14),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","list-contains-cpu100.html.vue"]]);export{d as default};
