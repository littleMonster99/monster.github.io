import{_ as e,W as p,X as o,Y as n,Z as s,$ as t,a0 as c,D as l}from"./framework-f64bc974.js";const i={},u=c(`<h1 id="rabbitmq进阶-过期时间ttl" tabindex="-1"><a class="header-anchor" href="#rabbitmq进阶-过期时间ttl" aria-hidden="true">#</a> RabbitMQ进阶 - 过期时间TTL</h1><p>Time to Live 简称 TTL，即过期时间。RabbitMQ 可以对 <strong>消息</strong> 和 <strong>队列</strong> 设置 TTL。</p><h2 id="_1-设置消息的-ttl" tabindex="-1"><a class="header-anchor" href="#_1-设置消息的-ttl" aria-hidden="true">#</a> 1. 设置消息的 TTL</h2><ul><li>通过队列设置：队列中的消息都有相同的过期时间</li><li>对消息本身设置：每条消息的 TTL 可以不同</li></ul><p>如果两种一起设置，则以最小的 TTL 生效。</p><p>消息在队列中生存时间一旦超过 TTL，就会变成「死信（Dead Message）」，消费者将无法收到该消息。（具体细节后续章节讲解）</p><h3 id="_1-1-在队列上设置" tabindex="-1"><a class="header-anchor" href="#_1-1-在队列上设置" aria-hidden="true">#</a> 1.1 在队列上设置</h3><p>定义队列时，通过参数 <code>x-message-ttl</code> 设置，单位是 <strong>毫秒</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>TTL 值得几种情况：</p><ul><li>值为 0 ：表示，除非此时可以直接将消息投递到消费者，否则该消息被立即丢弃</li><li>大于 0：将在该时间内过期，</li></ul><h3 id="_1-2-在消息设置" tabindex="-1"><a class="header-anchor" href="#_1-2-在消息设置" aria-hidden="true">#</a> 1.2 在消息设置</h3><p>通过 BasicProperties 来设置 expiration 属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
builder<span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 持久化消息</span>
builder<span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">&quot;60000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//设置消息的 ttl</span>
channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span>
                     <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                     <span class="token boolean">true</span><span class="token punctuation">,</span>
                     builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                     <span class="token string">&quot;mandatory test&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此种方式当超过 TTL 时，并不会立即从队列中抹去，而是在投递消费者时判定的。而在队列上一旦过期，则立即从队列中抹去。</p><p>这是因为内部实现的原因导致的：</p><ul><li>队列中已过期的消息肯定在队列头部，只要定期从队头开始扫描是否有过期的消息即可</li><li>在消息中设置的过期，需要扫描整个队列。</li></ul><blockquote><p>因为第一种方法里，队列中已过期的消息肯定在队列头部，RabbitMQ只要定期从队头开始扫描是否有过期消息即可，而第二种方法里，每条消息的过期时间不同，如果要删除所有过期消息，势必要扫描整个队列，所以不如等到此消息即将被消费时再判定是否过期，如果过期，再进行删除。</p></blockquote><h2 id="_2-设置队列的-ttl" tabindex="-1"><a class="header-anchor" href="#_2-设置队列的-ttl" aria-hidden="true">#</a> 2. 设置队列的 TTL</h2><blockquote><p>注意这是队列TTL，上面两个都是消息TTL,只是1.1 的是在队列中设置消息ttl</p></blockquote><p>定义队列时间，通过参数 <code>x-expires</code> 参数，单位为毫秒</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 该参数必须大于 0，要么就不设置</span>
arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-expires&quot;</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token constant">EXCHANGE_NAME</span><span class="token punctuation">,</span> <span class="token constant">ROUTING_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>队列的 TTL 其实就是在声明：当队列空闲多久时，被自动删除。</p><p><strong>空闲多久指的是</strong>：队列上没有任何消费者、也没有被重新声明、并且在过期时间内也未调用过 Basic.Get 命令</p><p>适合使用的场景：可以应用在类似 RPC 方式的回复队列，在 RPC 中，许多队列会被创建出来，但是未被使用。</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,26),r={href:"https://zq99299.github.io/mq-tutorial/rabbitmq-ac/04/02.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://hiddenpps.blog.csdn.net/article/details/54916011",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/6844904002996404231",target:"_blank",rel:"noopener noreferrer"};function b(m,h){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("过期时间 TTL"),t(a)])]),n("p",null,[n("a",k,[s("RabbitMQ之TTL（Time-To-Live 过期时间）"),t(a)])]),n("p",null,[n("a",d,[s("RabbitMQ高级特性-TTL队列/消息"),t(a)])])])}const g=e(i,[["render",b],["__file","rabbitmq-x-ttl.html.vue"]]);export{g as default};
