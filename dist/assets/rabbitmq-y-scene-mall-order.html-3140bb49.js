const e=JSON.parse('{"key":"v-0e902cd7","path":"/deploy/mq-rabbitmq/rabbitmq-y-scene-mall-order.html","title":"RabbitMQ实战 - 延迟消息-商城下单，超时取消订单","lang":"zh-CN","frontmatter":{"order":520,"category":["RabbitMQ","MQ"],"description":"1. 业务场景 用于解决用户下单以后，订单超时如何取消订单的问题。 为什么需要使用延迟队列？适用于什么场景？ 订单下单之后30分钟后，如果用户没有付钱，则系统自动取消订单。 这样类似的需求是我们经常会遇见的问题。最常用的方法是定期轮训数据库，设置状态。在数据量小的时候并没有什么大的问题，但是数据量一大轮训数据库的方式就会变得特别耗资源。当面对千万级、上...","head":[["meta",{"property":"og:url","content":"http://www.mr-monster.site/deploy/mq-rabbitmq/rabbitmq-y-scene-mall-order.html"}],["meta",{"property":"og:site_name","content":"Java学习笔记"}],["meta",{"property":"og:title","content":"RabbitMQ实战 - 延迟消息-商城下单，超时取消订单"}],["meta",{"property":"og:description","content":"1. 业务场景 用于解决用户下单以后，订单超时如何取消订单的问题。 为什么需要使用延迟队列？适用于什么场景？ 订单下单之后30分钟后，如果用户没有付钱，则系统自动取消订单。 这样类似的需求是我们经常会遇见的问题。最常用的方法是定期轮训数据库，设置状态。在数据量小的时候并没有什么大的问题，但是数据量一大轮训数据库的方式就会变得特别耗资源。当面对千万级、上..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-30T07:30:48.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-30T07:30:48.000Z"}]]},"headers":[{"level":2,"title":"1. 业务场景","slug":"_1-业务场景","link":"#_1-业务场景","children":[]},{"level":2,"title":"2. 整合RabbitMQ实现延迟消息(上)","slug":"_2-整合rabbitmq实现延迟消息-上","link":"#_2-整合rabbitmq实现延迟消息-上","children":[{"level":3,"title":"2.1 在pom.xml中添加相关依赖","slug":"_2-1-在pom-xml中添加相关依赖","link":"#_2-1-在pom-xml中添加相关依赖","children":[]},{"level":3,"title":"2.2 修改SpringBoot配置文件","slug":"_2-2-修改springboot配置文件","link":"#_2-2-修改springboot配置文件","children":[]},{"level":3,"title":"2.3 添加消息队列的枚举配置类QueueEnum","slug":"_2-3-添加消息队列的枚举配置类queueenum","link":"#_2-3-添加消息队列的枚举配置类queueenum","children":[]},{"level":3,"title":"2.4 添加RabbitMQ的配置","slug":"_2-4-添加rabbitmq的配置","link":"#_2-4-添加rabbitmq的配置","children":[]},{"level":3,"title":"2.5 在RabbitMQ管理页面可以看到以下交换机和队列","slug":"_2-5-在rabbitmq管理页面可以看到以下交换机和队列","link":"#_2-5-在rabbitmq管理页面可以看到以下交换机和队列","children":[]}]},{"level":2,"title":"3. 整合RabbitMQ实现延迟消息(下)","slug":"_3-整合rabbitmq实现延迟消息-下","link":"#_3-整合rabbitmq实现延迟消息-下","children":[{"level":3,"title":"3.1 添加延迟消息的发送者CancelOrderSender","slug":"_3-1-添加延迟消息的发送者cancelordersender","link":"#_3-1-添加延迟消息的发送者cancelordersender","children":[]},{"level":3,"title":"3.2 添加取消订单消息的接收者CancelOrderReceiver","slug":"_3-2-添加取消订单消息的接收者cancelorderreceiver","link":"#_3-2-添加取消订单消息的接收者cancelorderreceiver","children":[]},{"level":3,"title":"3.3 添加OmsPortalOrderService接口","slug":"_3-3-添加omsportalorderservice接口","link":"#_3-3-添加omsportalorderservice接口","children":[]},{"level":3,"title":"3.4 添加OmsPortalOrderService的实现类OmsPortalOrderServiceImpl","slug":"_3-4-添加omsportalorderservice的实现类omsportalorderserviceimpl","link":"#_3-4-添加omsportalorderservice的实现类omsportalorderserviceimpl","children":[]},{"level":3,"title":"3.5 添加OmsPortalOrderController","slug":"_3-5-添加omsportalordercontroller","link":"#_3-5-添加omsportalordercontroller","children":[]}]},{"level":2,"title":"4. 下单测试","slug":"_4-下单测试","link":"#_4-下单测试","children":[]}],"git":{"createdTime":1680161448000,"updatedTime":1680161448000,"contributors":[{"name":"fanweihua","email":"littlemonster163@163.com","commits":1}]},"readingTime":{"minutes":5.35,"words":1604},"filePathRelative":"deploy/mq-rabbitmq/rabbitmq-y-scene-mall-order.md","localizedDate":"2023年3月30日","autoDesc":true}');export{e as data};
