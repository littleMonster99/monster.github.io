import{_ as s,W as e,X as t,Y as a,Z as i,$ as r,a0 as l,D as c}from"./framework-f64bc974.js";const d={},p=l(`<h1 id="rabbitmq管理-应用与集群管理" tabindex="-1"><a class="header-anchor" href="#rabbitmq管理-应用与集群管理" aria-hidden="true">#</a> RabbitMQ管理 - 应用与集群管理</h1><p>本章主要介绍应用与集群相关的一些操作管理命令，包括关闭、重置、开启服务，还有建立集群的一些信息。有关集群搭建请参考后续的「RabbitMQ 运维」章节</p><h2 id="_1-应用管理" tabindex="-1"><a class="header-anchor" href="#_1-应用管理" aria-hidden="true">#</a> 1. 应用管理</h2><h3 id="_1-1-停止运行-stop" tabindex="-1"><a class="header-anchor" href="#_1-1-停止运行-stop" aria-hidden="true">#</a> 1.1 停止运行 stop</h3><p>用于停止运行 RabbitMQ 和 Erlang 虚拟机。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop <span class="token punctuation">[</span>pid_file<span class="token punctuation">]</span>

参数：
	pid_file：通过 rabbitmq-server 命令启动 RabbitMQ 服务创建的。默认情况存放与 rabbitmq安装目录/var/lib/rabbitmq/mnesia 目录下；可以通过 RABBITMQ_PID_FILE 环境变量来改变存放路径。
			  注意：通过 rabbitmq-server <span class="token parameter variable">--detach</span> 这个后缀命令启动不会生成 pid_file 文件

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 注意啊，我们通过 rabbitmq-server -detached 后台运行启动的</span>
<span class="token comment"># 可以通过它来停止，而且写一个错误的路径也可以停止运行</span>
<span class="token comment"># 通过下面讲解的 shutdown 命令，可以看到这个 pid 或许不是真正的 pid 文件</span>
<span class="token comment"># 因为在启动的时候打印了 Warning: PID file not written; -detached was passed.</span>
<span class="token punctuation">[</span>root@study mnesia<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl stop /opt/rabbitmq/var/lib/rabbitmq/mnesia/rabbit@study.pid</span>
Stopping and halting <span class="token function">node</span> rabbit@study
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-停止运行-shutdown" tabindex="-1"><a class="header-anchor" href="#_1-2-停止运行-shutdown" aria-hidden="true">#</a> 1.2 停止运行 shutdown</h3><p>用于停止运行 RabbitMQ 和 Erlang 虚拟机。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行该指令会阻塞知道 Erlang 虚拟机进程退出。如果 RabbitMQ 没有成功关闭，则会返回一个非零值。</p><p>与 stop 不同的是，不需要指定 pid_file，而且可以阻塞等待指定进程的关闭</p><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study mnesia<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl shutdown</span>
Shutting down RabbitMQ <span class="token function">node</span> rabbit@study running at PID <span class="token number">19531</span>
Waiting <span class="token keyword">for</span> PID <span class="token number">19531</span> to terminate
RabbitMQ <span class="token function">node</span> rabbit@study running at PID <span class="token number">19531</span> successfully shut down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-停止-rabbitmq-服务应用-stop-app" tabindex="-1"><a class="header-anchor" href="#_1-3-停止-rabbitmq-服务应用-stop-app" aria-hidden="true">#</a> 1.3 停止 RabbitMQ 服务应用：stop_app</h3><p>停止 RabbitMQ 服务应用，但是 Erlang 虚拟机还是处于运行状态。此命令的执行优先于其他管理操作（这些管理操作需要先停止 RabbitMQ 应用），比如 rabbitmqct reset</p><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study mnesia<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl stop_app</span>
Stopping rabbit application on <span class="token function">node</span> rabbit@study
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-启动-rabbitmq-服务应用-start-app" tabindex="-1"><a class="header-anchor" href="#_1-4-启动-rabbitmq-服务应用-start-app" aria-hidden="true">#</a> 1.4 启动 RabbitMQ 服务应用：start_app</h3><p>该命令的典型应用场景是：在执行了其他的管理操作之后，重新启动之前停止的 RabbitMQ 应用，比如 rabbitmqct reset</p><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study mnesia<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl start_app</span>
Starting <span class="token function">node</span> rabbit@study
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-等待-rabbitmq-应用的启动-wait" tabindex="-1"><a class="header-anchor" href="#_1-5-等待-rabbitmq-应用的启动-wait" aria-hidden="true">#</a> 1.5 等待 RabbitMQ 应用的启动：wait</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl <span class="token function">wait</span> <span class="token punctuation">[</span>pid_file<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待 RabbitMQ 应用的启动。它会 <strong>等到 pid_file 的创建</strong>，然后 <strong>等待 pid_file 中所代表的进程启动</strong>。当指定的进程没有启动 RabbitMQ 应用而关闭时将返回失败。</p><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study mnesia<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl wait /opt/rabbitmq/var/lib/rabbitmq/mnesia/rabbit@study.pid</span>
Waiting <span class="token keyword">for</span> rabbit@study
pid is <span class="token number">18130</span>
Error: process_not_running
<span class="token comment"># 前面讲到启动时，有一个警告 Warning: PID file not written; </span>
<span class="token comment"># 在这里也能证明出来，的确没有写入。这个 18130 可能是最开始笔者不小心直接执行了 rabbitmq-server 创建的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-重置-rabbitmq-节点-reset" tabindex="-1"><a class="header-anchor" href="#_1-6-重置-rabbitmq-节点-reset" aria-hidden="true">#</a> 1.6 重置 RabbitMQ 节点：reset</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 RabbitMQ 节点重置还原到最初状态。包括从 <strong>原来所在的集群中删除此节点</strong>，从管理数据库中删除所有的配置数据，如已配置的用户、vhost 等。以及删除所有的持久化消息。</p><p><strong>执行该命令前必须停止 RabbitMQ 应用</strong>，比如先执行 <code>rabbitmqctl stop_app</code></p><p>这里笔者就不尝试实践了，只有一个节点</p><h3 id="_1-7-强制重置-rabbitmq-节点-force-reset" tabindex="-1"><a class="header-anchor" href="#_1-7-强制重置-rabbitmq-节点-force-reset" aria-hidden="true">#</a> 1.7 强制重置 RabbitMQ 节点：force_reset</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl force_reset    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与 reset 类似，不过它无论当前管理数据库的状态和集群配置是什么，都会无条件的重置节点。<strong>只能在数据库或集群配置已损坏的情况下使用</strong>。</p><h3 id="_1-8-配置轮换日志文件-rotate-logs" tabindex="-1"><a class="header-anchor" href="#_1-8-配置轮换日志文件-rotate-logs" aria-hidden="true">#</a> 1.8 配置轮换日志文件：rotate_logs</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl rotate_logs <span class="token punctuation">{</span>suffix<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>配置 RabbitMQ 节点轮换日志文件。RabbitMQ 节点会将原来的日志文件中的内容追加到「原始名称 + 后缀」的日志文件中，然后再将新的日志内容记录到新创建的日志文件中（与原日志同名）。</p><p>当目标文件不存在时，会重新创建。如果不指定 suffix 后缀，则日志文件只是重新打开而不会进行轮换。</p><p>实践练习</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入到日志目录</span>
<span class="token punctuation">[</span>root@study ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/rabbitmq/var/log/rabbitmq/</span>
<span class="token punctuation">[</span>root@study rabbitmq<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">60</span>
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">59781</span> <span class="token number">6</span>月  <span class="token number">29</span> 06:04 rabbit@study.log
-rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> <span class="token number">6</span>月  <span class="token number">23</span> <span class="token number">10</span>:23 rabbit@study-sasl.log

<span class="token comment"># 执行轮换操作</span>
<span class="token punctuation">[</span>root@study rabbitmq<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl rotate_logs .1</span>
Rotating logs to files with suffix <span class="token string">&quot;.1&quot;</span>

<span class="token punctuation">[</span>root@study rabbitmq<span class="token punctuation">]</span><span class="token comment"># ll</span>
总用量 <span class="token number">60</span>
-rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> <span class="token number">6</span>月  <span class="token number">29</span> 06:17 rabbit@study.log
-rw-r--r--. <span class="token number">1</span> root root <span class="token number">59856</span> <span class="token number">6</span>月  <span class="token number">29</span> 06:17 rabbit@study.log.1
-rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> <span class="token number">6</span>月  <span class="token number">29</span> 06:17 rabbit@study-sasl.log
-rw-r--r--. <span class="token number">1</span> root root     <span class="token number">0</span> <span class="token number">6</span>月  <span class="token number">29</span> 06:17 rabbit@study-sasl.log.1
<span class="token comment"># 可以看到原来的文件被归档了一样。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-9-编译-hipe-compile" tabindex="-1"><a class="header-anchor" href="#_1-9-编译-hipe-compile" aria-hidden="true">#</a> 1.9 编译：hipe_compile</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl hipe_compile <span class="token punctuation">{</span>directory<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将部分 RabbitMQ 代码用 HiPE 编译，并将编译后的 <code>.beam</code> 文件保存到指定的文件目录中。如果该目录不存在则会创建，如果存在，则先删除里面的任何 <code>.beam</code> 文件。</p><p>如果要使用预编译的这些文件，则需要设置 <code>RABBITMQ_SERVER_CODE_PATH</code> 环境变量来指定 hipe_compile 调用的路径</p><p>名词解释：</p><ul><li>HiPE：High Performance Erlang，是 Erlang 版的 JIT 编译</li><li><code>.beam</code> ：是 Erlang 编译器生成的文件格式，可以直接加载到 Erlang 虚拟机中运行的文件格式</li></ul><p>如下所示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study rabbitmq<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl hipe_compile /opt/rabbitmq/tmp/rabbit-hipe/ebin</span>

HiPE compiling:  <span class="token operator">|</span>---------------------------------------------------------<span class="token operator">|</span>
                 <span class="token operator">|</span><span class="token comment">#########################################################|</span>

Compiled <span class="token number">57</span> modules <span class="token keyword">in</span> 221s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然知道有啥用处，指定的新目录里面的确多了很多 <code>.beam</code>ni c 文件</p><h2 id="_2-集群管理" tabindex="-1"><a class="header-anchor" href="#_2-集群管理" aria-hidden="true">#</a> 2. 集群管理</h2><p>这里只列出来命令，具体的使用详见后续章节 RabbitMQ 运维;</p><h3 id="_2-1-加入集群-join-cluster" tabindex="-1"><a class="header-anchor" href="#_2-1-加入集群-join-cluster" aria-hidden="true">#</a> 2.1 加入集群：join_cluster</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl join_cluster <span class="token punctuation">{</span>cluster_node<span class="token punctuation">}</span> <span class="token punctuation">[</span>--ram<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将节点计入指定集群中</p><h3 id="集群状态-cluster-status" tabindex="-1"><a class="header-anchor" href="#集群状态-cluster-status" aria-hidden="true">#</a> 集群状态：cluster_status</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl cluster_status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示集群状态。</p><h3 id="_2-3-修改集群节点类型" tabindex="-1"><a class="header-anchor" href="#_2-3-修改集群节点类型" aria-hidden="true">#</a> 2.3 修改集群节点类型</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl change_cluster_node_type <span class="token punctuation">{</span>disc <span class="token operator">|</span> <span class="token function">ram</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改集群节点的类型，修改之前需要停止 RabbitMQ 引用</p><h3 id="_2-4-删除集群节点-forget-cluster-node" tabindex="-1"><a class="header-anchor" href="#_2-4-删除集群节点-forget-cluster-node" aria-hidden="true">#</a> 2.4 删除集群节点：forget_cluster_node</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl forget_cluster_node <span class="token punctuation">[</span>--offline<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将节点从集群中删除，允许离线执行。</p><h3 id="_2-5-更新集群信息-update-cluster-nodes" tabindex="-1"><a class="header-anchor" href="#_2-5-更新集群信息-update-cluster-nodes" aria-hidden="true">#</a> 2.5 更新集群信息：update_cluster_nodes</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl update_cluster_nodes <span class="token punctuation">{</span>clusternode<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在集群中的节点应用启动前咨询 clusternode 节点的最新信息，并更新相应的集群信息；</p><p><strong>与 join_cluster 不同，它不加入集群</strong>；如这种情况：</p><ul><li>节点 A 和节点 B 在集群中，</li><li>当节点 A 离线了，节点 C 又和 节点 B 组成了一个集群，</li><li>然后节点 B 又离开了集群</li></ul><p>当节点 A 醒来时，它会尝试联系节点 B，但是这样会失败，因为节点 B 已经不在集群中了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl update_cluster_nodes <span class="token parameter variable">-n</span> A C 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用以上命令，可解决这种场景下出现的问题。</p><h3 id="_2-6-确保节点可以启动-force-boot" tabindex="-1"><a class="header-anchor" href="#_2-6-确保节点可以启动-force-boot" aria-hidden="true">#</a> 2.6 确保节点可以启动：force_boot</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl force_boot
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>确保节点可以启动，即使它不是最后一个关闭的节点。</p><p>通常情况下，<strong>当关闭整个 RabbitMQ 集群时</strong>，<strong>重启的第一个节点</strong> <strong>应该是最后关闭的节点</strong>，因为它可以看到其他节点所看不到的事情。但是有时候会出现一些异常情况，比如整个集群都断电，所有节点都不是最后一个关闭的。</p><p>在这种情况下就可以使用该命令告诉节点可以无条件启动。</p><p>在此节点关闭后，集群的任何变化，都会丢失。如果最后一个关闭的节点永久丢失了，那么需要优先使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl forget_cluster_node <span class="token parameter variable">--offline</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为他可以确保镜像队列的正常运转。</p><h3 id="_2-7-同步镜像队列内容-sync-queue" tabindex="-1"><a class="header-anchor" href="#_2-7-同步镜像队列内容-sync-queue" aria-hidden="true">#</a> 2.7 同步镜像队列内容：sync_queue</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl sync_queue <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">{</span>queue<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指定 <strong>未同步队列 queue 的 slave 镜像可以同步 master 镜像行的内容</strong>。同步期间此队列会被阻塞（所有此队列的生产消息都会被阻塞），直到同步完成。</p><p>**前提是：**配置了 queue 镜像</p><p>注意：未同步队列中的消息被消耗尽后，最终也会变成同步，此命令主要用于未耗尽的队列。（详见后组章节 RabbitMQ 高阶）</p><h3 id="_2-8-取消镜像队列同步-cancel-sync-queue" tabindex="-1"><a class="header-anchor" href="#_2-8-取消镜像队列同步-cancel-sync-queue" aria-hidden="true">#</a> 2.8 取消镜像队列同步：cancel_sync_queue</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl cancel_sync_queue <span class="token punctuation">[</span>-p vhost<span class="token punctuation">]</span> <span class="token punctuation">{</span>queue<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-9-设置集群名称-set-cluster-name" tabindex="-1"><a class="header-anchor" href="#_2-9-设置集群名称-set-cluster-name" aria-hidden="true">#</a> 2.9 设置集群名称：set_cluster_name</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_cluster_name <span class="token punctuation">{</span>name<span class="token punctuation">}</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>设置集群名称。</p><p>集群名称在客户端连接时会通报给客户端。Federation 和 Shovel 插件也会有用到集群名的地方，详细内容参考后续章节 跨越集群的界限</p><p><strong>集群名称 默认是集群中第一个节点的名称</strong>，通过该命令重新设置。在 web 管理界面右上角有可以修改，如下图</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220924215257905.png" alt="image-20220924215257905" tabindex="0" loading="lazy"><figcaption>image-20220924215257905</figcaption></figure><p>通过集群状态也能查看到当前的集群名称</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@study rabbitmq<span class="token punctuation">]</span><span class="token comment"># rabbitmqctl cluster_status</span>
Cluster status of <span class="token function">node</span> rabbit@study
<span class="token punctuation">[</span><span class="token punctuation">{</span>nodes,<span class="token punctuation">[</span><span class="token punctuation">{</span>disc,<span class="token punctuation">[</span>rabbit@study<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>,
 <span class="token punctuation">{</span>running_nodes,<span class="token punctuation">[</span>rabbit@study<span class="token punctuation">]</span><span class="token punctuation">}</span>,
 <span class="token punctuation">{</span>cluster_name,<span class="token operator">&lt;&lt;</span><span class="token string">&quot;rabbit@study&quot;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">}</span>,
 <span class="token punctuation">{</span>partitions,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span>,
 <span class="token punctuation">{</span>alarms,<span class="token punctuation">[</span><span class="token punctuation">{</span>rabbit@study,<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token comment"># 这个是没有操作过集群的，默认就是个单节点的集群</span>

 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,97),o={href:"https://zq99299.github.io/mq-tutorial/rabbitmq-ac/05/04.html",target:"_blank",rel:"noopener noreferrer"};function u(b,m){const n=c("ExternalLinkIcon");return e(),t("div",null,[p,a("p",null,[a("a",o,[i("应用与集群管理"),r(n)])])])}const h=s(d,[["render",u],["__file","rabbitmq-y-manange-app.html.vue"]]);export{h as default};
