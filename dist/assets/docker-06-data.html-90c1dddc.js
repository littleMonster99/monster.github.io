import{_ as s,W as e,X as t,Y as n,$ as o,a0 as p,D as c}from"./framework-f64bc974.js";const i={},d=p(`<h1 id="docker基础-docker数据卷和数据管理" tabindex="-1"><a class="header-anchor" href="#docker基础-docker数据卷和数据管理" aria-hidden="true">#</a> Docker基础 - Docker数据卷和数据管理</h1><blockquote><p>Docker 容器的数据放哪里呢？ 本文带你理解如何在 Docker 内部以及容器之间管理数据</p></blockquote><h2 id="_1-docker-数据管理简介" tabindex="-1"><a class="header-anchor" href="#_1-docker-数据管理简介" aria-hidden="true">#</a> 1. Docker 数据管理简介</h2><blockquote><p>实际上我们的容器就好像是一个简易版的操作系统，只不过系统中只安装了我们的程序运行所需要的环境，前边说到我们的容器是可以删除的，那如果删除了，容器中的程序产生的需要持久化的数据怎么办呢？容器运行的时候我们可以进容器去查看，容器一旦删除就什么都没有了。</p></blockquote><p>所以数据卷就是来解决这个问题的，是<strong>用来将数据持久化到我们宿主机上，与容器间实现数据共享，简单的说就是将宿主机的目录映射到容器中的目录</strong>，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化了，比如我们的数据库容器，就可以把数据存储到我们宿主机上的真实磁盘中。</p><h3 id="_1-1-数据卷-data-volume" tabindex="-1"><a class="header-anchor" href="#_1-1-数据卷-data-volume" aria-hidden="true">#</a> 1.1 数据卷(Data Volume)</h3><p>数据卷(Data Volume)是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li>数据卷可以在容器之间共享和重用</li><li>对数据卷的修改会立马生效</li><li>对数据卷的更新，不会影响镜像</li><li>卷会一直存在，直到没有容器使用</li></ul><h4 id="_1-1-1-建一个数据卷" tabindex="-1"><a class="header-anchor" href="#_1-1-1-建一个数据卷" aria-hidden="true">#</a> 1.1.1 建一个数据卷</h4><blockquote><p>在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。</p></blockquote><p>下面创建一个 web 容器，并加载一个数据卷到容器的 /webapp-data 目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -P --name web -v /webapp-data training/webapp python app.py</span>
e331e83e59486a131919cba8698b24eaee051a947838bb1c15c03df8b3464b97
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看下容器内部是否生成/webapp-data目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it web /bin/bash</span>
root@e331e83e5948:/opt/webapp<span class="token comment"># cd /webapp-data</span>
root@e331e83e5948:/webapp-data<span class="token comment"># ll</span>
total <span class="token number">8</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> Feb <span class="token number">20</span> 01:24 ./
drwxr-xr-x <span class="token number">1</span> root root <span class="token number">4096</span> Feb <span class="token number">20</span> 01:24 <span class="token punctuation">..</span>/
root@e331e83e5948:/webapp-data<span class="token comment">#</span>
    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。</p><h4 id="_1-1-2-挂载一个主机目录作为数据卷" tabindex="-1"><a class="header-anchor" href="#_1-1-2-挂载一个主机目录作为数据卷" aria-hidden="true">#</a> 1.1.2 挂载一个主机目录作为数据卷</h4><blockquote><p>使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker rm -f web</span>
web
<span class="token punctuation">[</span>root@pdai opt<span class="token punctuation">]</span><span class="token comment"># docker run -d --name web -v /opt/webapp-data5:/opt/webapp2 training/webapp</span>
fce27f6ea9ce9699864644a48aed6db8b772c96be36f46bee6154d2e2c9915b9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们验证下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai opt<span class="token punctuation">]</span><span class="token comment"># docker exec -it web /bin/bash</span>
root@fce27f6ea9ce:/opt/webapp<span class="token comment"># cd ..</span>
root@fce27f6ea9ce:/opt<span class="token comment"># ls</span>
webapp  webapp2
root@fce27f6ea9ce:/opt<span class="token comment"># cd webapp2</span>
root@fce27f6ea9ce:/opt/webapp2<span class="token comment"># mkdir test</span>
root@fce27f6ea9ce:/opt/webapp2<span class="token comment"># exit</span>
<span class="token builtin class-name">exit</span>
<span class="token punctuation">[</span>root@pdai opt<span class="token punctuation">]</span><span class="token comment"># cd webapp-data5</span>
<span class="token punctuation">[</span>root@pdai webapp-data5<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">4</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> Feb <span class="token number">20</span> <span class="token number">10</span>:12 <span class="token builtin class-name">test</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的命令加载主机的 /opt/webapp-data5 目录到容器的 /opt/webapp2 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。<strong>本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它</strong>。</p><p>*注意：Dockerfile 显然是不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的, 因为不同操作系统的路径格式不一样，所以目前还不能支持。</p><p>我们删除容器，看主机上数据是否会被删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai opt<span class="token punctuation">]</span><span class="token comment"># docker rm -f web</span>
web
<span class="token punctuation">[</span>root@pdai opt<span class="token punctuation">]</span><span class="token comment"># cd /opt/webapp-data5</span>
<span class="token punctuation">[</span>root@pdai webapp-data5<span class="token punctuation">]</span><span class="token comment"># ll</span>
total <span class="token number">4</span>
drwxr-xr-x <span class="token number">2</span> root root <span class="token number">4096</span> Feb <span class="token number">20</span> <span class="token number">10</span>:12 <span class="token builtin class-name">test</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很明显，没有被删除</p><h4 id="_1-1-3-挂载一个本地主机文件作为数据卷" tabindex="-1"><a class="header-anchor" href="#_1-1-3-挂载一个本地主机文件作为数据卷" aria-hidden="true">#</a> 1.1.3 挂载一个本地主机文件作为数据卷</h4><blockquote><p>-v 标记也可以从主机挂载单个文件到容器中</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash</span>
root@79eca07938db:/<span class="token comment"># ll | grep .bash_history</span>
-rw-------   <span class="token number">1</span> root root <span class="token number">19549</span> Feb <span class="token number">19</span> <span class="token number">10</span>:28 .bash_history
root@79eca07938db:/<span class="token comment"># exit</span>
<span class="token builtin class-name">exit</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就可以记录在容器输入过的命令了。</p><p>*注意：如果直接挂载一个文件，很多文件编辑工具，包括 <code>vi</code> 或者 <code>sed --in-place</code>，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录。</p><h3 id="_1-2-数据卷容器-data-volume-container" tabindex="-1"><a class="header-anchor" href="#_1-2-数据卷容器-data-volume-container" aria-hidden="true">#</a> 1.2 数据卷容器(Data Volume Container)</h3><blockquote><p>上面讲述的是主机和容器之间共享数据，那么如何你有一些持续更新的数据需要在容器之间共享，最好的方法就是创建数据卷容器。</p></blockquote><p>数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d -v /dbdata --name dbdata training/postgres</span>
70966085a85b05dd741a44a96725e2e44f146cc404b1b4e3aa3e519cd546c6b4
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d --volumes-from dbdata --name db1 training/postgres</span>
4c92240096d919724b233e1a5cfca94b5ceb0505e43262a7121cb83cfd8542f6
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d --volumes-from dbdata --name db2 training/postgres</span>
25246ebfae2f8437316b10d7eac3b34c1bd1522f50ba81651aec198bc79415a2
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMES
70966085a85b        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">46</span> seconds ago       Up <span class="token number">45</span> seconds       <span class="token number">5432</span>/tcp            dbdata
25246ebfae2f        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   About a minute ago   Up About a minute   <span class="token number">5432</span>/tcp            db2
4c92240096d9        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">2</span> minutes ago        Up <span class="token number">2</span> minutes        <span class="token number">5432</span>/tcp            db1

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>-volumes-from 可以多次使用来 mount 多个conatainer里的多个volumes。</p><p>这个操作是链式的， 我们在db1 中通过 --volumes-from mount进来的 volume可以继续被其他container使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d --name db3 --volumes-from db1 training/postgres</span>
44d0719377e86e3080b26d22adcb6055de93033dc9509ca2ecd8be2c93dc33b5
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker ps</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
44d0719377e8        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">3</span> seconds ago       Up <span class="token number">2</span> seconds        <span class="token number">5432</span>/tcp            db3
70966085a85b        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">3</span> minutes ago       Up <span class="token number">3</span> minutes        <span class="token number">5432</span>/tcp            dbdata
25246ebfae2f        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">4</span> minutes ago       Up <span class="token number">4</span> minutes        <span class="token number">5432</span>/tcp            db2
4c92240096d9        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">4</span> minutes ago       Up <span class="token number">4</span> minutes        <span class="token number">5432</span>/tcp            db1

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用 --volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态</strong>。</p><p><strong>如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 <code>docker rm -v</code> 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷</strong>。</p><h3 id="_1-3-数据备份、恢复、迁移数据卷" tabindex="-1"><a class="header-anchor" href="#_1-3-数据备份、恢复、迁移数据卷" aria-hidden="true">#</a> 1.3 数据备份、恢复、迁移数据卷</h3><p>可以利用数据卷对其中的数据进行进行备份、恢复和迁移。</p><h4 id="_1-3-1-备份" tabindex="-1"><a class="header-anchor" href="#_1-3-1-备份" aria-hidden="true">#</a> 1.3.1 备份</h4><p>首先使用 --volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从本地主机挂载当前到容器的 /backup 目录。命令如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata</span>
tar: Removing leading \`/&#39; from member names
/dbdata/
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ll | grep backup.tar</span>
-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">10240</span> Feb <span class="token number">20</span> <span class="token number">12</span>:39 backup.tar
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment">#</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>容器启动后，使用了 tar 命令来将 dbdata 卷备份为本地的 /backup/backup.tar。</p><h4 id="_1-3-2-恢复" tabindex="-1"><a class="header-anchor" href="#_1-3-2-恢复" aria-hidden="true">#</a> 1.3.2 恢复</h4><p>如果要恢复数据到一个容器</p><p>首先创建一个带有数据卷的容器 dbdata2</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -v /dbdata --name dbdata2 ubuntu /bin/bash</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建另一个容器，挂载 dbdata2 的容器，并使用 untar 解压备份文件到挂载的容器卷中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run --volumes-from dbdata2 -v $(pwd):/backup ubuntu tar xvf /backup/backup.tar</span>
dbdata/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,52),r={href:"https://pdai.tech/md/devops/docker/docker-06-data.html",target:"_blank",rel:"noopener noreferrer"},l=n("strong",null,"Docker基础 - Docker数据卷和数据管理",-1);function u(b,m){const a=c("ExternalLinkIcon");return e(),t("div",null,[d,n("p",null,[n("a",r,[l,o(a)])])])}const k=s(i,[["render",u],["__file","docker-06-data.html.vue"]]);export{k as default};
