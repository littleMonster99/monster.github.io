const l=JSON.parse('{"key":"v-134b39c8","path":"/java/jvm/java-jvm-gc.html","title":"GC - Java 垃圾回收基础知识","lang":"zh-CN","frontmatter":{"order":110,"category":["Java","JVM"],"description":"垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 1. 判断一个对象是否可被回收 1.1 引用计数算法 给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。 两个...","head":[["meta",{"property":"og:url","content":"http://www.mr-monster.site/java/jvm/java-jvm-gc.html"}],["meta",{"property":"og:site_name","content":"Java学习笔记"}],["meta",{"property":"og:title","content":"GC - Java 垃圾回收基础知识"}],["meta",{"property":"og:description","content":"垃圾收集主要是针对堆和方法区进行；程序计数器、虚拟机栈和本地方法栈这三个区域属于线程私有的，只存在于线程的生命周期内，线程结束之后也会消失，因此不需要对这三个区域进行垃圾回收。 1. 判断一个对象是否可被回收 1.1 引用计数算法 给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。 两个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2023-03-30T07:30:48.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:modified_time","content":"2023-03-30T07:30:48.000Z"}]]},"headers":[{"level":2,"title":"1. 判断一个对象是否可被回收","slug":"_1-判断一个对象是否可被回收","link":"#_1-判断一个对象是否可被回收","children":[{"level":3,"title":"1.1 引用计数算法","slug":"_1-1-引用计数算法","link":"#_1-1-引用计数算法","children":[]},{"level":3,"title":"1.2 可达性分析算法","slug":"_1-2-可达性分析算法","link":"#_1-2-可达性分析算法","children":[]},{"level":3,"title":"1.3 方法区的回收","slug":"_1-3-方法区的回收","link":"#_1-3-方法区的回收","children":[]},{"level":3,"title":"1.4 finalize()","slug":"_1-4-finalize","link":"#_1-4-finalize","children":[]}]},{"level":2,"title":"2. 引用类型","slug":"_2-引用类型","link":"#_2-引用类型","children":[{"level":3,"title":"2.1 强引用","slug":"_2-1-强引用","link":"#_2-1-强引用","children":[]},{"level":3,"title":"2.2 软引用","slug":"_2-2-软引用","link":"#_2-2-软引用","children":[]},{"level":3,"title":"2.3 弱引用","slug":"_2-3-弱引用","link":"#_2-3-弱引用","children":[]},{"level":3,"title":"2.4 虚引用","slug":"_2-4-虚引用","link":"#_2-4-虚引用","children":[]}]},{"level":2,"title":"3. 垃圾回收算法","slug":"_3-垃圾回收算法","link":"#_3-垃圾回收算法","children":[{"level":3,"title":"3.1 标记 - 清除","slug":"_3-1-标记-清除","link":"#_3-1-标记-清除","children":[]},{"level":3,"title":"3.2 标记 - 整理","slug":"_3-2-标记-整理","link":"#_3-2-标记-整理","children":[]},{"level":3,"title":"3.3 复制","slug":"_3-3-复制","link":"#_3-3-复制","children":[]},{"level":3,"title":"3.4 分代收集","slug":"_3-4-分代收集","link":"#_3-4-分代收集","children":[]}]},{"level":2,"title":"4. 垃圾收集器","slug":"_4-垃圾收集器","link":"#_4-垃圾收集器","children":[{"level":3,"title":"4.1 Serial 收集器","slug":"_4-1-serial-收集器","link":"#_4-1-serial-收集器","children":[]},{"level":3,"title":"4.2 ParNew 收集器","slug":"_4-2-parnew-收集器","link":"#_4-2-parnew-收集器","children":[]},{"level":3,"title":"4.3 Parallel Scavenge 收集器","slug":"_4-3-parallel-scavenge-收集器","link":"#_4-3-parallel-scavenge-收集器","children":[]},{"level":3,"title":"4.4. Serial Old 收集器","slug":"_4-4-serial-old-收集器","link":"#_4-4-serial-old-收集器","children":[]},{"level":3,"title":"4.5 Parallel Old 收集器","slug":"_4-5-parallel-old-收集器","link":"#_4-5-parallel-old-收集器","children":[]},{"level":3,"title":"4.6. CMS 收集器","slug":"_4-6-cms-收集器","link":"#_4-6-cms-收集器","children":[]},{"level":3,"title":"4.7 G1 收集器","slug":"_4-7-g1-收集器","link":"#_4-7-g1-收集器","children":[]}]},{"level":2,"title":"5. 内存分配与回收策略","slug":"_5-内存分配与回收策略","link":"#_5-内存分配与回收策略","children":[{"level":3,"title":"5.1 Minor GC、Major GC、Full GC","slug":"_5-1-minor-gc、major-gc、full-gc","link":"#_5-1-minor-gc、major-gc、full-gc","children":[]},{"level":3,"title":"5.2 内存分配策略","slug":"_5-2-内存分配策略","link":"#_5-2-内存分配策略","children":[]},{"level":3,"title":"5.3 Full GC 的触发条件","slug":"_5-3-full-gc-的触发条件","link":"#_5-3-full-gc-的触发条件","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1680161448000,"updatedTime":1680161448000,"contributors":[{"name":"fanweihua","email":"littlemonster163@163.com","commits":1}]},"readingTime":{"minutes":17.27,"words":5180},"filePathRelative":"java/jvm/java-jvm-gc.md","localizedDate":"2023年3月30日","autoDesc":true}');export{l as data};
