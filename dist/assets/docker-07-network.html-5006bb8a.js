import{_ as t,W as i,X as o,Y as n,Z as s,$ as e,a0 as l,D as c}from"./framework-f64bc974.js";const p={},r=n("h1",{id:"docker基础-docker四种网络模式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#docker基础-docker四种网络模式","aria-hidden":"true"},"#"),s(" Docker基础 - Docker四种网络模式")],-1),u=n("h2",{id:"_1-docker网络原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-docker网络原理","aria-hidden":"true"},"#"),s(" 1. Docker网络原理")],-1),d=n("p",null,[s("当 Docker 启动时，"),n("strong",null,[s("会自动在主机上创建一个 "),n("code",null,"docker0"),s(" 虚拟网桥")]),s("，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。")],-1),b=n("strong",null,"Docker 随机分配一个本地未占用的私有网段",-1),k={href:"https://datatracker.ietf.org/doc/html/rfc1918",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"docker0",-1),v=n("code",null,"172.17.42.1",-1),g=n("code",null,"255.255.0.0",-1),q=n("code",null,"172.17.0.0/16",-1),f=l(`<p>当<strong>创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口</strong>（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。<strong>这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）</strong>。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703231751040.png" alt="image-20220703231751040"><h3 id="_1-1-docker-默认网桥原理" tabindex="-1"><a class="header-anchor" href="#_1-1-docker-默认网桥原理" aria-hidden="true">#</a> 1.1 Docker 默认网桥原理</h3><p>在你安装Docker 服务<strong>默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络</strong>。</p><p>我们可用 docker network ls 命令查看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network <span class="token function">ls</span>
NETWORK ID          NAME                DRIVER              SCOPE
b8c5abdb0bec        bridge              bridge              <span class="token builtin class-name">local</span>
84e86bc93121        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>
8e521527a897        none                null                <span class="token builtin class-name">local</span>

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Docker 安装时会自动在 host 上创建三个网络：none，host，和bridge。</p><h4 id="_1-1-1-查看docker0-网桥" tabindex="-1"><a class="header-anchor" href="#_1-1-1-查看docker0-网桥" aria-hidden="true">#</a> 1.1.1 查看docker0 网桥</h4><p>我们看下docker0 网桥：(brctl可以通过yum install bridge-utils安装)</p><p>主要命令如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>brctl show
ip a
ip route
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行详情如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># brctl show</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.0242703f9d02       no              veth0004826
                                                        veth4ad3278
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>
    link/ether 00:16:3e:08:c1:ea brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.31</span>.165.194/20 brd <span class="token number">172.31</span>.175.255 scope global dynamic eth0
       valid_lft 310072401sec preferred_lft 310072401sec
<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:70:3f:9d:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0
       valid_lft forever preferred_lft forever
<span class="token number">45</span>: veth4ad3278@if44: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default
    link/ether c2:77:e4:ea:f1:33 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>
<span class="token number">49</span>: veth0004826@if48: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default
    link/ether 6e:c9:1a:7c:18:b1 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">1</span>

<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ip route</span>
default via <span class="token number">172.31</span>.175.253 dev eth0
<span class="token number">169.254</span>.0.0/16 dev eth0 scope <span class="token function">link</span> metric <span class="token number">1002</span>
<span class="token number">172.17</span>.0.0/16 dev docker0 proto kernel scope <span class="token function">link</span> src <span class="token number">172.17</span>.0.1
<span class="token number">172.31</span>.160.0/20 dev eth0 proto kernel scope <span class="token function">link</span> src <span class="token number">172.31</span>.165.194

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-1-2-查看bridge网络" tabindex="-1"><a class="header-anchor" href="#_1-1-2-查看bridge网络" aria-hidden="true">#</a> 1.1.2 查看bridge网络</h4><p>再用docker network inspect指令查看bridge网络：其Gateway就是网卡/接口docker0的IP地址：172.17.0.1。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker network inspect bridge</span>
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;Id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc&quot;</span>,
        <span class="token string">&quot;Created&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2020-02-17T14:10:10.424119543+08:00&quot;</span>,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;EnableIPv6&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;IPAM&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;default&quot;</span>,
            <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
            <span class="token string">&quot;Config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token string">&quot;Subnet&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.0/16&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.1&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Internal&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Attachable&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Ingress&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;ConfigFrom&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Network&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;ConfigOnly&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;1cbc9aeba2a8a826d460ecb49de17ddf8ac336e150c752a3c762fd38a3e15254&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;web&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;adb47ed0c60c6b80a442c71a5f35d63378cecca9598e0cef8409a6719552f4c2&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:03&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.3/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>,
            <span class="token string">&quot;d992e3c761e00649eb436b88c737adc54093b76119af0fb7878596b523f743ca&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;db&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;6a3dab5c545dd26e0ca6e36d928a32fd0a6197c8dbf4eeb718a4560e219575ed&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:02&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.2/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;com.docker.network.bridge.default_bridge&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_icc&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0.0.0.0&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;docker0&quot;</span>,
            <span class="token string">&quot;com.docker.network.driver.mtu&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1500&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面你可以看到bridge的配置信息和容器信息。</p><h3 id="_1-2-理解容器创建时的ip分配" tabindex="-1"><a class="header-anchor" href="#_1-2-理解容器创建时的ip分配" aria-hidden="true">#</a> 1.2 理解容器创建时的IP分配</h3><blockquote><p>为了理解容器创建时的IP分配，这里需要清理所有已经启动的环境，然后再启动容器，看前后对比</p></blockquote><h4 id="_1-2-1-空容器情况" tabindex="-1"><a class="header-anchor" href="#_1-2-1-空容器情况" aria-hidden="true">#</a> 1.2.1 空容器情况</h4><ul><li>我们<strong>清理所有容器</strong>实例，下面展示的就是docker安装之后的, 注意和上面的对比下：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker network ls</span>
NETWORK ID          NAME                DRIVER              SCOPE
b8c5abdb0bec        bridge              bridge              <span class="token builtin class-name">local</span>
84e86bc93121        <span class="token function">host</span>                <span class="token function">host</span>                <span class="token builtin class-name">local</span>
8e521527a897        none                null                <span class="token builtin class-name">local</span>
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker network inspect bridge</span>
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;Id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc&quot;</span>,
        <span class="token string">&quot;Created&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2020-02-17T14:10:10.424119543+08:00&quot;</span>,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;EnableIPv6&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;IPAM&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;default&quot;</span>,
            <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
            <span class="token string">&quot;Config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token string">&quot;Subnet&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.0/16&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.1&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Internal&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Attachable&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Ingress&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;ConfigFrom&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Network&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;ConfigOnly&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;com.docker.network.bridge.default_bridge&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_icc&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0.0.0.0&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;docker0&quot;</span>,
            <span class="token string">&quot;com.docker.network.driver.mtu&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1500&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">2</span>: eth0: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc pfifo_fast state UP group default qlen <span class="token number">1000</span>
    link/ether 00:16:3e:08:c1:ea brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.31</span>.165.194/20 brd <span class="token number">172.31</span>.175.255 scope global dynamic eth0
       valid_lft 310069965sec preferred_lft 310069965sec
<span class="token number">3</span>: docker0: <span class="token operator">&lt;</span>NO-CARRIER,BROADCAST,MULTICAST,UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state DOWN group default
    link/ether 02:42:70:3f:9d:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.1/16 brd <span class="token number">172.17</span>.255.255 scope global docker0
       valid_lft forever preferred_lft forever
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># brctl show</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.0242703f9d02       no

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-2-2-创建容器" tabindex="-1"><a class="header-anchor" href="#_1-2-2-创建容器" aria-hidden="true">#</a> 1.2.2 <strong>创建容器</strong></h4><p>Docker 在创建一个容器的时候，会执行如下操作：</p><ul><li>创建一对虚拟接口/网卡，也就是veth pair，分别放到本地主机和新容器中；</li><li>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethxxxxx；</li><li>容器一端放到新容器中，并修改名字作为 eth0，这个网卡/接口只在容器的名字空间可见；</li><li>从网桥可用地址段中（也就是与该bridge对应的network）获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethxxxx。</li></ul><p>让我们启动一个容器，看下变化：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker run -d --name db training/postgres</span>
0ffd1092cd962bdbe335ce042b93d0f2082559600cacc82bbef40b8b66395e57
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># brctl show</span>
bridge name     bridge <span class="token function">id</span>               STP enabled     interfaces
docker0         <span class="token number">8000</span>.0242703f9d02       no              vethd93e2ad
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ip a | grep vethd93e2ad</span>
<span class="token number">51</span>: vethd93e2ad@if50: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue master docker0 state UP group default
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker network inspect bridge</span>
<span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;Id&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;b8c5abdb0becacfa1bfa1d72e2e663fb0157b62a9b8bee37e2607211722713cc&quot;</span>,
        <span class="token string">&quot;Created&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2020-02-17T14:10:10.424119543+08:00&quot;</span>,
        <span class="token string">&quot;Scope&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;local&quot;</span>,
        <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;bridge&quot;</span>,
        <span class="token string">&quot;EnableIPv6&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;IPAM&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Driver&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;default&quot;</span>,
            <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> null,
            <span class="token string">&quot;Config&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    <span class="token string">&quot;Subnet&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.0/16&quot;</span>,
                    <span class="token string">&quot;Gateway&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.1&quot;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Internal&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Attachable&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Ingress&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;ConfigFrom&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;Network&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;ConfigOnly&quot;</span><span class="token builtin class-name">:</span> false,
        <span class="token string">&quot;Containers&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;0ffd1092cd962bdbe335ce042b93d0f2082559600cacc82bbef40b8b66395e57&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;Name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;db&quot;</span>,
                <span class="token string">&quot;EndpointID&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;a90cb50031effc99b9254fe4f1231bfbac8c4bb23d94c5a1425c1e116ac452dc&quot;</span>,
                <span class="token string">&quot;MacAddress&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;02:42:ac:11:00:02&quot;</span>,
                <span class="token string">&quot;IPv4Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;172.17.0.2/16&quot;</span>,
                <span class="token string">&quot;IPv6Address&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Options&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
            <span class="token string">&quot;com.docker.network.bridge.default_bridge&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_icc&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;true&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;0.0.0.0&quot;</span>,
            <span class="token string">&quot;com.docker.network.bridge.name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;docker0&quot;</span>,
            <span class="token string">&quot;com.docker.network.driver.mtu&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1500&quot;</span>
        <span class="token punctuation">}</span>,
        <span class="token string">&quot;Labels&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不指定--network，创建的容器默认都会挂到 docker0 上，使用本地主机上 docker0 接口的 IP 作为所有容器的默认网关</p><p>当有多个容器创建后，容器网络拓扑结构如下：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703225858216.png" alt="image-20220703225858216" tabindex="0" loading="lazy"><figcaption>image-20220703225858216</figcaption></figure><h3 id="_1-3-理解容器和docker0的虚拟网卡的配对" tabindex="-1"><a class="header-anchor" href="#_1-3-理解容器和docker0的虚拟网卡的配对" aria-hidden="true">#</a> 1.3 理解容器和docker0的虚拟网卡的配对</h3><blockquote><p>在上图中容器中eth0是怎么和host中虚拟网卡配对上的呢？</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker ps -a</span>
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES
0ffd1092cd96        training/postgres   <span class="token string">&quot;su postgres -c &#39;/us…&quot;</span>   <span class="token number">11</span> minutes ago      Up <span class="token number">11</span> minutes       <span class="token number">5432</span>/tcp            db
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it 0ffd1092cd96 /bin/bash</span>
root@0ffd1092cd96:/<span class="token comment"># ip a</span>
<span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo
       valid_lft forever preferred_lft forever
<span class="token number">50</span>: eth0@if51: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
    inet <span class="token number">172.17</span>.0.2/16 brd <span class="token number">172.17</span>.255.255 scope global eth0
       valid_lft forever preferred_lft forever

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到host上<code>51: vethd93e2ad@if50</code>对应着容器中<code>50: eth0@if51</code>; 即host中index=51的接口/网卡vethd93e2ad的peer inferface index是50, container中index=50的网卡eth0的peer interface index是51。</p><p>可以利用ethtool来确认这种对应关系：分别在host和container中运行指令<code>ethtool -S &lt;interface&gt;</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># ethtool -S vethd93e2ad</span>
NIC statistics:
     peer_ifindex: <span class="token number">50</span>
<span class="token punctuation">[</span>root@pdai ~<span class="token punctuation">]</span><span class="token comment"># docker exec -it 0ffd1092cd96 /bin/bash</span>
root@0ffd1092cd96:/<span class="token comment"># ip a | grep 50</span>
<span class="token number">50</span>: eth0@if51: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">&gt;</span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default
root@0ffd1092cd96:/<span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-四类网络模式" tabindex="-1"><a class="header-anchor" href="#_2-四类网络模式" aria-hidden="true">#</a> 2. 四类网络模式</h2><p>安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host</p><table><thead><tr><th>网络模式</th><th>简介</th></tr></thead><tbody><tr><td>Host</td><td>容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</td></tr><tr><td>Bridge</td><td>此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。</td></tr><tr><td>None</td><td>该模式关闭了容器的网络功能。</td></tr><tr><td>Container</td><td>创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围。</td></tr><tr><td>自定义网络</td><td>略</td></tr></tbody></table><p>我们在使用docker run创建Docker容器时，可以用 <code>--net</code> 选项指定容器的网络模式，Docker可以有以下4种网络模式：</p><ul><li>host模式：使用 --net=host 指定。</li><li>none模式：使用 --net=none 指定。</li><li>bridge模式：使用 --net=bridge 指定，默认设置。</li><li>container模式：使用 --net=container:NAME_or_ID 指定。</li></ul><h3 id="_2-1-host模式" tabindex="-1"><a class="header-anchor" href="#_2-1-host模式" aria-hidden="true">#</a> 2.1 host模式</h3><p>相当于Vmware中的桥接模式，与宿主机在同一个网络中，但没有独立IP地址。</p><blockquote><p>众所周知，Docker使用了Linux的Namespaces技术来进行资源隔离，如PID Namespace隔离进程，Mount Namespace隔离文件系统，Network Namespace隔离网络等。</p></blockquote><p>一个Network Namespace提供了一份独立的网络环境，包括网卡、路由、Iptable规则等都与其他的Network Namespace隔离。一个Docker容器一般会分配一个独立的Network Namespace。但如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</p><blockquote><p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p></blockquote><p>例如，我们在172.25.6.1/24的机器上用host模式启动一个ubuntu容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@server1 ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --network=host ubuntu</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Host模式如下图所示：</p><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703222748093.png" alt="image-20220703222748093"><h3 id="_2-2-container模式" tabindex="-1"><a class="header-anchor" href="#_2-2-container模式" aria-hidden="true">#</a> 2.2 container模式</h3><p>在理解了host模式后，这个模式也就好理解了。<strong>这个模式指定新创建的容器和已经存在的一个容器共享一个Network Namespace，而不是和宿主机共享</strong>。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p><p>Container模式示意图：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703222856547.png" alt="image-20220703222856547" tabindex="0" loading="lazy"><figcaption>image-20220703222856547</figcaption></figure><h3 id="_2-3-none模式" tabindex="-1"><a class="header-anchor" href="#_2-3-none模式" aria-hidden="true">#</a> 2.3 none模式</h3><p>该模式将容器放置在它自己的网络栈中，但是并不进行任何配置。实际上，<strong>该模式关闭了容器的网络功能</strong>在以下两种情况下是有用的：</p><ul><li><p>容器并不需要网络（例如只需要写磁盘卷的批处理任务）。</p></li><li><p>overlay</p><p>在docker1.7代码进行了重构，单独把网络部分独立出来编写，所以在docker1.8新加入的一个overlay网络模式。Docker对于网络访问的控制也是在逐渐完善的。</p></li></ul><p>None模式示意图:</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703223001804.png" alt="image-20220703223001804" tabindex="0" loading="lazy"><figcaption>image-20220703223001804</figcaption></figure><h3 id="_2-4-bridge模式" tabindex="-1"><a class="header-anchor" href="#_2-4-bridge模式" aria-hidden="true">#</a> 2.4 bridge模式</h3><blockquote><p>相当于Vmware中的Nat模式，容器使用独立network Namespace，并连接到docker0虚拟网卡（默认模式）。通过docker0网桥以及Iptables nat表配置与宿主机通信；bridge模式是Docker默认的网络设置，此模式会为每一个容器分配Network Namespace、设置IP等，并将一个主机上的Docker容器连接到一个虚拟网桥上</p></blockquote><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p><p>bridge模式是docker的默认网络模式，不写--net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p><p>bridge模式如下图所示：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220703223130496.png" alt="image-20220703223130496" tabindex="0" loading="lazy"><figcaption>image-20220703223130496</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,67),h={href:"https://pdai.tech/md/devops/docker/docker-07-network.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.cnblogs.com/sanduzxcvbnm/p/13370773.html",target:"_blank",rel:"noopener noreferrer"},P={href:"https://lionli.blog.csdn.net/article/details/109603785",target:"_blank",rel:"noopener noreferrer"},I={href:"https://yeasy.gitbook.io/docker_practice/advanced_network",target:"_blank",rel:"noopener noreferrer"},A=n("strong",null,"高级网络配置",-1);function N(w,x){const a=c("ExternalLinkIcon");return i(),o("div",null,[r,u,d,n("p",null,[s("同时，"),b,s("（在 "),n("a",k,[s("RFC1918"),e(a)]),s(" 中定义）中的一个地址给 "),m,s(" 接口。比如典型的 "),v,s("，掩码为 "),g,s("。此后启动的容器内的网口也会自动分配一个同一网段（"),q,s("）的地址。")]),f,n("p",null,[n("a",h,[s("Docker基础 - Docker网络使用和配置"),e(a)])]),n("p",null,[n("a",_,[s("Docker网络详解——原理篇"),e(a)])]),n("p",null,[n("a",P,[s("docker 四种网络模式解析"),e(a)])]),n("p",null,[n("a",I,[A,e(a)])])])}const C=t(p,[["render",N],["__file","docker-07-network.html.vue"]]);export{C as default};
