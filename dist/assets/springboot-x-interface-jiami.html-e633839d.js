import{_ as e,W as o,X as c,Y as n,Z as s,$ as t,a0 as p,D as i}from"./framework-f64bc974.js";const l={},u=p(`<h1 id="springboot接口-如何对接口进行签名" tabindex="-1"><a class="header-anchor" href="#springboot接口-如何对接口进行签名" aria-hidden="true">#</a> SpringBoot接口 - 如何对接口进行签名</h1><blockquote><p>在以SpringBoot开发后台API接口时，会存在哪些接口不安全的因素呢？通常如何去解决的呢？本文主要介绍API<strong>接口有不安全的因素</strong>以及<strong>常见的保证接口安全的方式</strong>，重点<strong>实践如何对接口进行签名</strong>。</p></blockquote><h2 id="_1-准备知识点" tabindex="-1"><a class="header-anchor" href="#_1-准备知识点" aria-hidden="true">#</a> 1. 准备知识点</h2><blockquote><p>建议从接口整体的安全体系角度来理解，比如存在哪些不安全的因素，加密解密等知识点。</p></blockquote><h3 id="_1-1-api接口有哪些不安全的因素" tabindex="-1"><a class="header-anchor" href="#_1-1-api接口有哪些不安全的因素" aria-hidden="true">#</a> 1.1 API接口有哪些不安全的因素？</h3><blockquote><p>这里从体系角度，简单列举一些不安全的因素：</p></blockquote><ul><li>开发者访问开放接口 <ul><li>是不是一个合法的开发者？</li></ul></li><li>多客户端访问接口 <ul><li>是不是一个合法的客户端？</li></ul></li><li>用户访问接口 <ul><li>是不是一个合法的用户?</li><li>有没有权限访问接口？</li></ul></li><li>接口传输 <ul><li>http明文传输数据？</li></ul></li><li>其它方面 <ul><li>接口重放，上文介绍的<a href="">接口幂等</a></li><li>接口超时，加timestamp控制？</li><li>...</li></ul></li></ul><h2 id="_2-常见的保证接口安全的方式" tabindex="-1"><a class="header-anchor" href="#_2-常见的保证接口安全的方式" aria-hidden="true">#</a> 2. 常见的保证接口安全的方式？</h2><blockquote><p>针对上述接口存在的不安全因素，这里向你展示一些典型的保障接口安全的方式。</p></blockquote><h3 id="_2-1-accesskey-secretkey" tabindex="-1"><a class="header-anchor" href="#_2-1-accesskey-secretkey" aria-hidden="true">#</a> 2.1 AccessKey&amp;SecretKey</h3><blockquote><p>这种设计一般用在开发接口的安全，以确保是一个<strong>合法的开发者</strong>。</p></blockquote><ul><li>AccessKey： 开发者唯一标识</li><li>SecretKey: 开发者密钥</li></ul><p>以阿里云相关产品为例</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716220503018.png" alt="image-20220716220503018" tabindex="0" loading="lazy"><figcaption>image-20220716220503018</figcaption></figure><h3 id="_2-2-认证和授权" tabindex="-1"><a class="header-anchor" href="#_2-2-认证和授权" aria-hidden="true">#</a> 2.2 认证和授权</h3><blockquote><p>从两个视角去看</p><ul><li>第一: <strong>认证和授权</strong>，认证是访问者的合法性，授权是访问者的权限分级；</li><li>第二: 其中认证包括<strong>对客户端的认证</strong>以及<strong>对用户的认证</strong>；</li></ul></blockquote><ul><li><strong>对于客户端的认证</strong></li></ul><p>典型的是AppKey&amp;AppSecret，或者ClientId&amp;ClientSecret等</p><p>比如oauth2协议的<code>client_credentials</code>模式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://api.xxxx.com/token?grant_type<span class="token operator">=</span>client_credentials<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span><span class="token assign-left variable">client_secret</span><span class="token operator">=</span>CLIENT_SECRET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>grant_type参数等于client_credentials表示client credentials方式，client_id是客户端id，client_secret是客户端密钥。</p><p>返回token后，通过token访问其它接口。</p><ul><li><strong>对于用户的认证和授权</strong></li></ul><p>比如oauth2协议的授权码模式(authorization code)和密码模式(resource owner password credentials)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://api.xxxx.com/token?grant_type<span class="token operator">=</span>password<span class="token operator">&amp;</span><span class="token assign-left variable">username</span><span class="token operator">=</span>USERNAME<span class="token operator">&amp;</span><span class="token assign-left variable">password</span><span class="token operator">=</span>PASSWORD<span class="token operator">&amp;</span><span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span><span class="token assign-left variable">scope</span><span class="token operator">=</span>read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>grant_type参数等于password表示密码方式，client_id是客户端id，username是用户名，password是密码。</p><p>(PS：password模式只有在授权码模式(authorization code)不可用时才会采用，这里只是举个例子而已)</p>`,27),r={href:"https://sa-token.dev33.cn/doc/index.html",target:"_blank",rel:"noopener noreferrer"},k=n("h3",{id:"_2-3-https",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3-https","aria-hidden":"true"},"#"),s(" 2.3 https")],-1),d={href:"https://pdai.tech/md/develop/protocol/dev-protocol-http.html#%E8%AE%A4%E8%AF%81",target:"_blank",rel:"noopener noreferrer"},m=p('<p>HTTP 有以下安全性问题:</p><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><p>HTTPs 并不是新协议，而是让 HTTP 先和 SSL(Secure Sockets Layer)通信，再由 SSL 和 TCP 通信，也就是说 HTTPs 使用了隧道进行通信。</p><p>通过使用 SSL，HTTPs 具有了加密(防窃听)、认证(防伪装)和完整性保护(防篡改)。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716221336226.png" alt="image-20220716221336226" tabindex="0" loading="lazy"><figcaption>image-20220716221336226</figcaption></figure><h3 id="_2-4-接口签名-加密" tabindex="-1"><a class="header-anchor" href="#_2-4-接口签名-加密" aria-hidden="true">#</a> 2.4 接口签名（加密）</h3><blockquote><p>接口签名（加密），主要防止请求参数被篡改。特别是安全要求比较高的接口，比如支付领域的接口。</p></blockquote><h4 id="_2-4-1-签名的主要流程" tabindex="-1"><a class="header-anchor" href="#_2-4-1-签名的主要流程" aria-hidden="true">#</a> 2.4.1 <strong>签名的主要流程</strong></h4><p>首先我们需要分配给客户端一个私钥用于URL签名加密，一般的签名算法如下：</p><p>1、首先对请求参数按key进行字母排序放入有序集合中（其它参数请参看后续补充部分）；</p><p>2、对排序完的数组键值对用&amp;进行连接，形成用于加密的参数字符串；</p><p>3、在加密的参数字符串前面或者后面加上私钥，然后用加密算法进行加密，得到sign，然后随着请求接口一起传给服务器。</p>',12),v={href:"https://api.xxxx.com/token?key=value&timetamp=xxxx&sign=xxxx-xxx-xxx-xxxx",target:"_blank",rel:"noopener noreferrer"},b=p('<p>服务器端接收到请求后，用同样的算法获得服务器的sign，对比客户端的sign是否一致，如果一致请求有效；如果不一致返回指定的错误信息。</p><h4 id="_2-4-2-对什么签名" tabindex="-1"><a class="header-anchor" href="#_2-4-2-对什么签名" aria-hidden="true">#</a> 2.4.2 对什么签名？</h4><ol><li>主要包括请求参数，这是最主要的部分，<strong>签名的目的要防止参数被篡改，就要对可能被篡改的参数签名</strong>；</li><li>同时考虑到请求参数的来源可能是请求路径path中，请求header中，请求body中。</li><li>如果对客户端分配了AppKey&amp;AppSecret，也可加入签名计算；</li><li>考虑到其它幂等，token失效等，也会将涉及的参数一并加入签名，比如timestamp，流水号nonce等（这些参数可能来源于header）</li></ol><h4 id="_2-4-3-签名算法" tabindex="-1"><a class="header-anchor" href="#_2-4-3-签名算法" aria-hidden="true">#</a> 2.4.3 <strong>签名算法？</strong></h4><p>一般涉及这块，主要包含三点：密钥，签名算法，签名规则</p><ol><li><strong>密钥secret</strong>： 前后端约定的secret，这里要注意前端可能无法妥善保存好secret，比如SPA单页应用；</li><li><strong>签名算法</strong>：也不一定要是对称加密算法，对称是反过来解析sign，这里是用同样的算法和规则计算出sign，并对比前端传过来的sign是否一致。</li><li><strong>签名规则</strong>：比如多次加盐加密等；</li></ol><blockquote><p>PS：有读者会问，我们是可能从有些客户端获取密钥，算法和规则的（比如前端SPA单页应用生成的js中获取密钥，算法和规则），那么签名的意义在哪里？我认为签名是手段而不是目的，签名是加大攻击者攻击难度的一种手段，至少是可以抵挡大部分简单的攻击的，再加上其它防范方式（流水号，时间戳，token等)进一步提升攻击的难度而已。</p></blockquote><h4 id="_2-4-4-签名和加密是不是一回事" tabindex="-1"><a class="header-anchor" href="#_2-4-4-签名和加密是不是一回事" aria-hidden="true">#</a> 2.4.4 签名和加密是不是一回事？</h4><p>严格来说不是一回事：</p><ol><li><strong>签名</strong>是通过对参数按照指定的算法、规则计算出sign，最后前后端通过同样的算法计算出sign是否一致来防止参数篡改的，所以你可以看到参数是明文的，只是多加了一个计算出的sign。</li><li><strong>加密</strong>是对请求的参数加密，后端进行解密；同时有些情况下，也会对返回的response进行加密，前端进行解密；这里存在加密和解密的过程，所以思路上必然是对称加密的形式+时间戳接口时效性等。</li></ol><h4 id="_2-4-5-签名放在哪里" tabindex="-1"><a class="header-anchor" href="#_2-4-5-签名放在哪里" aria-hidden="true">#</a> 2.4.5 <strong>签名放在哪里？</strong></h4><p>签名可以放在请求参数中（path中，body中等），更为优雅的可以放在HEADER中，比如X-Sign（通常第三方的header参数以X-开头）</p><h4 id="_2-4-6-大厂开放平台是怎么做的呢-哪些可以借鉴" tabindex="-1"><a class="header-anchor" href="#_2-4-6-大厂开放平台是怎么做的呢-哪些可以借鉴" aria-hidden="true">#</a> 2.4.6 大厂开放平台是怎么做的呢？哪些可以借鉴？</h4>',13),g={href:"https://wiki.open.qq.com/wiki/%E8%85%BE%E8%AE%AF%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%94%E7%94%A8%E7%AD%BE%E5%90%8D%E5%8F%82%E6%95%B0sig%E7%9A%84%E8%AF%B4%E6%98%8E",target:"_blank",rel:"noopener noreferrer"},h=p(`<h2 id="_3-实现案例" tabindex="-1"><a class="header-anchor" href="#_3-实现案例" aria-hidden="true">#</a> 3. 实现案例</h2><blockquote><p>本例子采用AOP拦截自定义注解方式实现，主要看实现的思路而已(签名的目的要防止参数被篡改，就要对可能被篡改的参数签名)。</p></blockquote><h3 id="_3-1-定义注解" tabindex="-1"><a class="header-anchor" href="#_3-1-定义注解" aria-hidden="true">#</a> 3.1 定义注解</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sign</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> pdai
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Signature</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-aop拦截" tabindex="-1"><a class="header-anchor" href="#_3-2-aop拦截" aria-hidden="true">#</a> 3.2 AOP拦截</h3><p>这里可以看到需要对所有用户可能修改的参数点进行按规则签名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sign</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">cn<span class="token punctuation">.</span>hutool<span class="token punctuation">.</span>core<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">CharSequenceUtil</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestAttributes</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">RequestContextHolder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletRequestAttributes</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">ServletWebRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ContentCachingRequestWrapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">SignUtil</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> pdai
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignAspect</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * SIGN_HEADER.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SIGN_HEADER</span> <span class="token operator">=</span> <span class="token string">&quot;X-SIGN&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * pointcut.
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(@tech.pdai.springboot.api.sign.config.sign.Signature * *(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">verifySignPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// nothing</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * verify sign.
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;verifySignPointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sign <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token constant">SIGN_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// must have sign in header</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CharSequenceUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;no signature in header: &quot;</span> <span class="token operator">+</span> <span class="token constant">SIGN_HEADER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// check signature</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> generatedSign <span class="token operator">=</span> <span class="token function">generatedSignature</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sign<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>generatedSign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;invalid signature&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">&quot;invalid signature&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">generatedSignature</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// @RequestBody</span>
        <span class="token class-name">String</span> bodyParam <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bodyParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentAsByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// @RequestParam</span>
        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> requestParameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// @PathVariable</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletWebRequest</span> webRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> uriTemplateVars <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> webRequest<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>
                <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token constant">URI_TEMPLATE_VARIABLES_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">RequestAttributes</span><span class="token punctuation">.</span><span class="token constant">SCOPE_REQUEST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uriTemplateVars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            paths <span class="token operator">=</span> uriTemplateVars<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token class-name">SignUtil</span><span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>bodyParam<span class="token punctuation">,</span> requestParameterMap<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-request封装" tabindex="-1"><a class="header-anchor" href="#_3-3-request封装" aria-hidden="true">#</a> 3.3 Request封装</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">OncePerRequestFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ContentCachingRequestWrapper</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestCachingFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * This <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">doFilter</span></span><span class="token punctuation">}</span> implementation stores a request attribute for
     * &quot;already filtered&quot;, proceeding without filtering again if the
     * attribute is already there.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">request</span>     request
     * <span class="token keyword">@param</span> <span class="token parameter">response</span>    response
     * <span class="token keyword">@param</span> <span class="token parameter">filterChain</span> filterChain
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span> ServletException
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>      IOException
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">getAlreadyFilteredAttributeName</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">shouldNotFilter</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">doFilterInternal</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> isFirstRequest <span class="token operator">=</span> <span class="token operator">!</span><span class="token function">isAsyncDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HttpServletRequest</span> requestWrapper <span class="token operator">=</span> request<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isFirstRequest <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            requestWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentCachingRequestWrapper</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>requestWrapper<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterRegistrationBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilterConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RequestCachingFilter</span> <span class="token function">requestCachingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RequestCachingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span> <span class="token function">requestCachingFilterRegistration</span><span class="token punctuation">(</span>
            <span class="token class-name">RequestCachingFilter</span> requestCachingFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FilterRegistrationBean</span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span>requestCachingFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        bean<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-实现接口" tabindex="-1"><a class="header-anchor" href="#_3-4-实现接口" aria-hidden="true">#</a> 3.4 实现接口</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestBody</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">ResponseResult</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>config<span class="token punctuation">.</span>sign<span class="token punctuation">.</span></span><span class="token class-name">Signature</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">tech<span class="token punctuation">.</span>pdai<span class="token punctuation">.</span>springboot<span class="token punctuation">.</span>api<span class="token punctuation">.</span>sign<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">User</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> pdai
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignTestController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Signature</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;test/{id}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">myController</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> id
            <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> client
            <span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> client<span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-接口测试" tabindex="-1"><a class="header-anchor" href="#_3-5-接口测试" aria-hidden="true">#</a> 3.5 接口测试</h3><p>body参数</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716225515949.png" alt="image-20220716225515949" tabindex="0" loading="lazy"><figcaption>image-20220716225515949</figcaption></figure><p>如果不带X-SIGN</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716225534900.png" alt="image-20220716225534900" tabindex="0" loading="lazy"><figcaption>image-20220716225534900</figcaption></figure><p>如果X-SIGN错误</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716225553472.png" alt="image-20220716225553472" tabindex="0" loading="lazy"><figcaption>image-20220716225553472</figcaption></figure><p>如果X-SIGN正确</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220716225610038.png" alt="image-20220716225610038" tabindex="0" loading="lazy"><figcaption>image-20220716225610038</figcaption></figure><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,23),w={href:"https://pdai.tech/md/spring/springboot/springboot-x-interface-jiami.html",target:"_blank",rel:"noopener noreferrer"},y=n("strong",null,"SpringBoot接口 - 如何对接口进行签名",-1);function f(x,q){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[s("可选参数scope表示申请的权限范围。（相关开发框架可以参考spring security, Apache Shiro，"),n("a",r,[s("SA-Token"),t(a)]),s("等）")]),k,n("blockquote",null,[n("p",null,[s("从接口传输安全的角度，防止接口数据明文传输， 具体可以看"),n("a",d,[s("这里"),t(a)])])]),m,n("p",null,[s("例如： "),n("a",v,[s("https://api.xxxx.com/token?key=value&timetamp=xxxx&sign=xxxx-xxx-xxx-xxxx"),t(a)])]),b,n("p",null,[s("以腾讯开放平台为例，请参考"),n("a",g,[s("腾讯开放平台第三方应用签名参数sig的说明 "),t(a)])]),h,n("p",null,[n("a",w,[y,t(a)])])])}const S=e(l,[["render",f],["__file","springboot-x-interface-jiami.html.vue"]]);export{S as default};
