import{_ as p,W as o,X as c,Y as n,Z as s,$ as t,a0 as e,D as i}from"./framework-f64bc974.js";const l={},u=n("h1",{id:"spring进阶-springmvc实现原理之dispatcherservlet的初始化过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring进阶-springmvc实现原理之dispatcherservlet的初始化过程","aria-hidden":"true"},"#"),s(" Spring进阶 - SpringMVC实现原理之DispatcherServlet的初始化过程")],-1),r=n("blockquote",null,[n("p",null,"前文我们有了IOC的源码基础以及SpringMVC的基础，我们便可以进一步深入理解SpringMVC主要实现原理，包含DispatcherServlet的初始化过程和DispatcherServlet处理请求的过程的源码解析。本文是第一篇：DispatcherServlet的初始化过程的源码解析。")],-1),k=n("h2",{id:"_1-dispatcherservlet和applicationcontext有何关系",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-dispatcherservlet和applicationcontext有何关系","aria-hidden":"true"},"#"),s(" 1. DispatcherServlet和ApplicationContext有何关系？")],-1),d={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet",target:"_blank",rel:"noopener noreferrer"},v=e(`<p>DispatcherServlet 需要 WebApplicationContext（继承自 ApplicationContext） 来配置。WebApplicationContext 可以链接到ServletContext 和 Servlet。因为绑定了 ServletContext，这样应用程序就可以在需要的时候使用 RequestContextUtils 的静态方法访问 WebApplicationContext。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServlet</span> <span class="token keyword">extends</span> <span class="token class-name">FrameworkServlet</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  	<span class="token comment">// 1. DispatcherServlet 需要 WebApplicationContext（继承自 ApplicationContext） 来配置。</span>
    <span class="token keyword">public</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> webApplicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>webApplicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WebApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token constant">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="token operator">=</span> <span class="token class-name">WebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.ROOT&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">SCOPE_REQUEST</span> <span class="token operator">=</span> <span class="token string">&quot;request&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">SCOPE_SESSION</span> <span class="token operator">=</span> <span class="token string">&quot;session&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">SCOPE_APPLICATION</span> <span class="token operator">=</span> <span class="token string">&quot;application&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">SERVLET_CONTEXT_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;servletContext&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">CONTEXT_PARAMETERS_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;contextParameters&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token constant">CONTEXT_ATTRIBUTES_BEAN_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;contextAttributes&quot;</span><span class="token punctuation">;</span>

  	<span class="token comment">// 2. WebApplicationContext 可以链接到ServletContext 和 Servlet。因为绑定了 ServletContext，这样应用程序就可以在需要的时候使用 RequestContextUtils 的静态方法访问 WebApplicationContext。</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数应用程序只有一个WebApplicationContext，除此之外也可以一个Root WebApplicationContext 被多个 Servlet实例，然后各自拥有自己的Servlet WebApplicationContext 配置。</p><p>Root WebApplicationContext 包含需要共享给多个 Servlet 实例的数据源和业务服务基础 Bean。这些 Bean 可以在 Servlet 特定的范围被继承或覆盖。</p><p>（PS：官网上的这张图可以可以帮助你构建DispatcherServlet和ApplicationContext在设计上的认知，这一点对于理解DispatcherServlet的设计和初始化过程非常重要）</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713220057199.png" alt="image-20220713220057199" tabindex="0" loading="lazy"><figcaption>image-20220713220057199</figcaption></figure><h2 id="_2-dispatcherservlet是如何初始化的" tabindex="-1"><a class="header-anchor" href="#_2-dispatcherservlet是如何初始化的" aria-hidden="true">#</a> 2. DispatcherServlet是如何初始化的？</h2><blockquote><p>DispatcherServlet首先是Sevlet，Servlet有自己的生命周期的方法（init,destory等），那么我们在看DispatcherServlet初始化时首先需要看源码中DispatcherServlet的类结构设计。</p></blockquote><p>首先我们看DispatcherServlet的类结构关系，在这个类依赖结构中找到init的方法</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713220205748.png" alt="image-20220713220205748" tabindex="0" loading="lazy"><figcaption>image-20220713220205748</figcaption></figure>`,11),m={href:"https://pdai.tech/md/spring/spring-x-framework-springmvc.html",target:"_blank",rel:"noopener noreferrer"},b=e(`<figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713220255887.png" alt="image-20220713220255887" tabindex="0" loading="lazy"><figcaption>image-20220713220255887</figcaption></figure><h3 id="_2-1-init" tabindex="-1"><a class="header-anchor" href="#_2-1-init" aria-hidden="true">#</a> 2.1 init</h3><p>init()方法如下, 主要读取web.xml中servlet参数配置，并将交给子类方法initServletBean()继续初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Map config parameters onto bean properties of this servlet, and
  * invoke subclass initialization.
  * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">ServletException</span></span> if bean properties are invalid (or required
  * properties are missing), or if subclass initialization fails.
  */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

  <span class="token comment">// 读取web.xml中的servlet配置</span>
  <span class="token class-name">PropertyValues</span> pvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletConfigPropertyValues</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// 转换成BeanWrapper，为了方便使用Spring的属性注入功能</span>
      <span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token class-name">PropertyAccessorFactory</span><span class="token punctuation">.</span><span class="token function">forBeanPropertyAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 注入Resource类型需要依赖于ResourceEditor解析，所以注册Resource类关联到ResourceEditor解析器</span>
      <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResourceLoader</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      bw<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEditor</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 更多的初始化可以让子类去拓展</span>
      <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 让spring注入namespace,contextConfigLocation等属性</span>
      bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to set bean properties on servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 让子类去拓展</span>
  <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读取配置可以从下图看出，正是初始化了我们web.xml中配置</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713220525343.png" alt="image-20220713220525343" tabindex="0" loading="lazy"><figcaption>image-20220713220525343</figcaption></figure><p>再看下initServletBean()方法，位于FrameworkServlet类中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Overridden method of <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">HttpServletBean</span></span><span class="token punctuation">}</span>, invoked after any bean properties
  * have been set. Creates this servlet&#39;s WebApplicationContext.
  */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
  <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing Spring &quot;</span> <span class="token operator">+</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing Servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 最重要的是这个方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 可以让子类进一步拓展</span>
    <span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;Context initialization failed&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span>
        <span class="token string">&quot;shown which may lead to unsafe logging of potentially sensitive data&quot;</span> <span class="token operator">:</span>
        <span class="token string">&quot;masked to prevent unsafe logging of potentially sensitive data&quot;</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;enableLoggingRequestDetails=&#39;&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span>
        <span class="token string">&quot;&#39;: request parameters and headers will be &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Completed initialization in &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-initwebapplicationcontext" tabindex="-1"><a class="header-anchor" href="#_2-2-initwebapplicationcontext" aria-hidden="true">#</a> 2.2 initWebApplicationContext</h3><p>initWebApplicationContext用来初始化和刷新WebApplicationContext。</p><p>initWebApplicationContext() 方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Initialize and publish the WebApplicationContext for this servlet.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Delegates to <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">createWebApplicationContext</span></span><span class="token punctuation">}</span> for actual creation
  * of the context. Can be overridden in subclasses.
  * <span class="token keyword">@return</span> the WebApplicationContext instance
  * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">FrameworkServlet</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span><span class="token punctuation">)</span></span>
  * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setContextClass</span></span>
  * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setContextConfigLocation</span></span>
  */</span>
<span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">WebApplicationContext</span> rootContext <span class="token operator">=</span>
      <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果在构造函数已经被初始化</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// A context instance was injected at construction time -&gt; use it</span>
    wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> wac<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// The context has not yet been refreshed -&gt; provide services such as</span>
        <span class="token comment">// setting the parent context, setting the application context id, etc</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// The context instance was injected without an explicit parent -&gt; set</span>
          <span class="token comment">// the root application context (if any; may be null) as the parent</span>
          cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 没有在构造函数中初始化，则尝试通过contextAttribute初始化</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// No context instance was injected at construction time -&gt; see if one</span>
    <span class="token comment">// has been registered in the servlet context. If one exists, it is assumed</span>
    <span class="token comment">// that the parent context (if any) has already been set and that the</span>
    <span class="token comment">// user has performed any initialization such as setting the context id</span>
    wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 还没有的话，只能重新创建了</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// No context instance is defined for this servlet -&gt; create a local one</span>
    wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Either the context is not a ConfigurableApplicationContext with refresh</span>
    <span class="token comment">// support or the context injected at construction time had already been</span>
    <span class="token comment">// refreshed -&gt; trigger initial onRefresh manually here.</span>
    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Publish the context as a servlet context attribute.</span>
    <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> wac<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webApplicationContext只会初始化一次，依次尝试构造函数初始化，没有则通过contextAttribute初始化，仍没有则创建新的</p><p>创建的createWebApplicationContext方法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Instantiate the WebApplicationContext for this servlet, either a default
  * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">XmlWebApplicationContext</span></span><span class="token punctuation">}</span>
  * or a <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setContextClass</span></span> custom context class<span class="token punctuation">}</span>, if set.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This implementation expects custom contexts to implement the
  * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableWebApplicationContext</span></span><span class="token punctuation">}</span>
  * interface. Can be overridden in subclasses.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Do not forget to register this servlet instance as application listener on the
  * created context (for triggering its <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">onRefresh</span></span> callback<span class="token punctuation">}</span>, and to call
  * <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">#</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
  * before returning the context instance.
  * <span class="token keyword">@param</span> <span class="token parameter">parent</span> the parent ApplicationContext to use, or <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token keyword">null</span></span></span><span class="token punctuation">}</span> if none
  * <span class="token keyword">@return</span> the WebApplicationContext for this servlet
  * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">XmlWebApplicationContext</span></span>
  */</span>
<span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> contextClass <span class="token operator">=</span> <span class="token function">getContextClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span>
        <span class="token string">&quot;Fatal initialization error in servlet with name &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token string">&quot;&#39;: custom WebApplicationContext class [&quot;</span> <span class="token operator">+</span> contextClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
        <span class="token string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 通过反射方式初始化</span>
  <span class="token class-name">ConfigurableWebApplicationContext</span> wac <span class="token operator">=</span>
      <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span>

  wac<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">String</span> configLocation <span class="token operator">=</span> <span class="token function">getContextConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 就是前面Demo中的springmvc.xml</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocation <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    wac<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span>configLocation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 初始化Spring环境</span>
  <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> wac<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>configureAndRefreshWebApplicationContext方法初始化设置Spring环境</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span> wac<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设置context ID</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">identityToString</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>wac<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// The application context id is still set to its original default value</span>
    <span class="token comment">// -&gt; assign a more useful id based on available information</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contextId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      wac<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>contextId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// Generate default id...</span>
      wac<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_CONTEXT_ID_PREFIX</span> <span class="token operator">+</span>
          <span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">getDisplayString</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">&#39;/&#39;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 设置servletContext, servletConfig, namespace, listener...</span>
  wac<span class="token punctuation">.</span><span class="token function">setServletContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wac<span class="token punctuation">.</span><span class="token function">setServletConfig</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wac<span class="token punctuation">.</span><span class="token function">setNamespace</span><span class="token punctuation">(</span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  wac<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SourceFilteringListener</span><span class="token punctuation">(</span>wac<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ContextRefreshListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The wac environment&#39;s #initPropertySources will be called in any case when the context</span>
  <span class="token comment">// is refreshed; do it eagerly here to ensure servlet property sources are in place for</span>
  <span class="token comment">// use in any post-processing or initialization that occurs below prior to #refresh</span>
  <span class="token class-name">ConfigurableEnvironment</span> env <span class="token operator">=</span> wac<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>env <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebEnvironment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableWebEnvironment</span><span class="token punctuation">)</span> env<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 让子类去拓展</span>
  <span class="token function">postProcessWebApplicationContext</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">applyInitializers</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Spring环境初始化完了，就可以初始化DispatcherServlet处理流程中需要的组件了。</span>
  wac<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-refresh" tabindex="-1"><a class="header-anchor" href="#_2-3-refresh" aria-hidden="true">#</a> 2.3 refresh</h3><p>有了webApplicationContext后，就开始刷新了（onRefresh()方法），这个方法是FrameworkServlet提供的模板方法，由子类DispatcherServlet来实现的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * This implementation calls <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">initStrategies</span></span><span class="token punctuation">}</span>.
  */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>刷新主要是调用initStrategies(context)方法对DispatcherServlet中的组件进行初始化，这些组件就是在SpringMVC请求流程中包的主要组件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Initialize the strategy objects that this servlet uses.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>May be overridden in subclasses in order to initialize further strategy objects.
  */</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 主要看如下三个方法</span>
  <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-inithanlderxxx" tabindex="-1"><a class="header-anchor" href="#_2-4-inithanlderxxx" aria-hidden="true">#</a> 2.4 initHanlderxxx</h3><p>我们主要看initHandlerXXX相关的方法，它们之间的关系可以看SpringMVC的请求流程：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713221212802.png" alt="image-20220713221212802" tabindex="0" loading="lazy"><figcaption>image-20220713221212802</figcaption></figure><ol><li>HandlerMapping是映射处理器</li><li>HandlerAdpter是<strong>处理适配器</strong>，它用来找到你的Controller中的处理方法</li><li>HandlerExceptionResolver是当遇到处理异常时的异常解析器</li></ol><p>initHandlerMapping方法如下，无非就是获取按照优先级排序后的HanlderMappings, 将来匹配时按照优先级最高的HanderMapping进行处理。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220713221245137.png" alt="image-20220713221245137" tabindex="0" loading="lazy"><figcaption>image-20220713221245137</figcaption></figure><p>initHandlerAdapters方法和initHandlerExceptionResolvers方法也是类似的，如果没有找到，那就构建默认的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
  * Initialize the HandlerAdapters used by this class.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If no HandlerAdapter beans are defined in the BeanFactory for this namespace,
  * we default to SimpleControllerHandlerAdapter.
  */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectAllHandlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Find all HandlerAdapters in the ApplicationContext, including ancestor contexts.</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> matchingBeans <span class="token operator">=</span>
        <span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// We keep HandlerAdapters in sorted order.</span>
      <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">HANDLER_ADAPTER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">HandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>ha<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ignore, we&#39;ll add a default HandlerAdapter later.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Ensure we have at least some HandlerAdapters, by registering</span>
  <span class="token comment">// default HandlerAdapters if no other adapters are found.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">=</span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No HandlerAdapters declared for servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
          <span class="token string">&quot;&#39;: using default strategies from DispatcherServlet.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
  * Initialize the HandlerExceptionResolver used by this class.
  * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>If no bean is defined with the given name in the BeanFactory for this namespace,
  * we default to no exception resolver.
  */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectAllHandlerExceptionResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Find all HandlerExceptionResolvers in the ApplicationContext, including ancestor contexts.</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">&gt;</span></span> matchingBeans <span class="token operator">=</span> <span class="token class-name">BeanFactoryUtils</span>
        <span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// We keep HandlerExceptionResolvers in sorted order.</span>
      <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">HandlerExceptionResolver</span> her <span class="token operator">=</span>
          context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">HANDLER_EXCEPTION_RESOLVER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>her<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ignore, no HandlerExceptionResolver is fine too.</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Ensure we have at least some HandlerExceptionResolvers, by registering</span>
  <span class="token comment">// default HandlerExceptionResolvers if no other resolvers are found.</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">&quot;No HandlerExceptionResolvers declared in servlet &#39;&quot;</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
          <span class="token string">&quot;&#39;: using default strategies from DispatcherServlet.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后我们看下初始化的日志：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">21</span>:30:33.163 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> INFO org.springframework.web.servlet.DispatcherServlet - Initializing Servlet <span class="token string">&#39;springmvc-demo&#39;</span>
<span class="token number">21</span>:30:38.242 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.context.support.XmlWebApplicationContext - Refreshing WebApplicationContext <span class="token keyword">for</span> namespace <span class="token string">&#39;springmvc-demo-servlet&#39;</span>
<span class="token number">21</span>:30:39.256 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.context.annotation.ClassPathBeanDefinitionScanner - Identified candidate component class: <span class="token function">file</span> <span class="token punctuation">[</span>/Users/pdai/pdai/www/tech-pdai-spring-demos/011-spring-framework-demo-springmvc/target/011-spring-framework-demo-springmvc-1.0-SNAPSHOT/WEB-INF/classes/tech/pdai/springframework/springmvc/controller/UserController.class<span class="token punctuation">]</span>
<span class="token number">21</span>:30:39.261 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.context.annotation.ClassPathBeanDefinitionScanner - Identified candidate component class: <span class="token function">file</span> <span class="token punctuation">[</span>/Users/pdai/pdai/www/tech-pdai-spring-demos/011-spring-framework-demo-springmvc/target/011-spring-framework-demo-springmvc-1.0-SNAPSHOT/WEB-INF/classes/tech/pdai/springframework/springmvc/dao/UserDaoImpl.class<span class="token punctuation">]</span>
<span class="token number">21</span>:30:39.274 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.context.annotation.ClassPathBeanDefinitionScanner - Identified candidate component class: <span class="token function">file</span> <span class="token punctuation">[</span>/Users/pdai/pdai/www/tech-pdai-spring-demos/011-spring-framework-demo-springmvc/target/011-spring-framework-demo-springmvc-1.0-SNAPSHOT/WEB-INF/classes/tech/pdai/springframework/springmvc/service/UserServiceImpl.class<span class="token punctuation">]</span>
<span class="token number">21</span>:30:39.546 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader - Loaded <span class="token number">29</span> bean definitions from class path resource <span class="token punctuation">[</span>springmvc.xml<span class="token punctuation">]</span>
<span class="token number">21</span>:30:39.711 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.context.annotation.internalConfigurationAnnotationProcessor&#39;</span>
<span class="token number">21</span>:30:39.973 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.context.event.internalEventListenerProcessor&#39;</span>
<span class="token number">21</span>:30:39.984 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.context.event.internalEventListenerFactory&#39;</span>
<span class="token number">21</span>:30:39.995 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.context.annotation.internalAutowiredAnnotationProcessor&#39;</span>
<span class="token number">21</span>:30:40.003 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.context.annotation.internalCommonAnnotationProcessor&#39;</span>
<span class="token number">21</span>:30:40.042 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.ui.context.support.UiApplicationContextUtils - Unable to <span class="token function">locate</span> ThemeSource with name <span class="token string">&#39;themeSource&#39;</span><span class="token builtin class-name">:</span> using default <span class="token punctuation">[</span>org.springframework.ui.context.support.ResourceBundleThemeSource@791af912<span class="token punctuation">]</span>
<span class="token number">21</span>:30:40.052 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;userController&#39;</span>
<span class="token number">21</span>:30:40.136 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;userServiceImpl&#39;</span>
<span class="token number">21</span>:30:40.140 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;userDaoImpl&#39;</span>
<span class="token number">21</span>:30:40.147 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler#0&#39;</span>
<span class="token number">21</span>:30:40.153 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0&#39;</span>
<span class="token number">21</span>:30:40.350 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.handler.MappedInterceptor#0&#39;</span>
<span class="token number">21</span>:30:40.356 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.format.support.FormattingConversionServiceFactoryBean#0&#39;</span>
<span class="token number">21</span>:30:40.741 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG _org.springframework.web.servlet.HandlerMapping.Mappings - <span class="token string">&#39;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0&#39;</span> <span class="token punctuation">{</span>/**<span class="token operator">=</span>org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler@216c0f1f<span class="token punctuation">}</span>
<span class="token number">21</span>:30:40.742 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;mvcCorsConfigurations&#39;</span>
<span class="token number">21</span>:30:40.742 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&#39;</span>
<span class="token number">21</span>:30:40.792 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG _org.springframework.web.servlet.HandlerMapping.Mappings - <span class="token string">&#39;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&#39;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token number">21</span>:30:40.792 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter&#39;</span>
<span class="token number">21</span>:30:40.793 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&#39;</span>
<span class="token number">21</span>:30:40.794 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;localeResolver&#39;</span>
<span class="token number">21</span>:30:40.796 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;themeResolver&#39;</span>
<span class="token number">21</span>:30:40.798 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;viewNameTranslator&#39;</span>
<span class="token number">21</span>:30:40.799 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;flashMapManager&#39;</span>
<span class="token number">21</span>:30:40.805 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;mvcContentNegotiationManager&#39;</span>
<span class="token number">21</span>:30:40.887 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#39;</span>
<span class="token number">21</span>:30:41.150 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG _org.springframework.web.servlet.HandlerMapping.Mappings - 
	t.p.s.s.c.UserController:
	<span class="token punctuation">{</span> <span class="token punctuation">[</span>/user<span class="token punctuation">]</span><span class="token punctuation">}</span>: list<span class="token punctuation">(</span>HttpServletRequest,HttpServletResponse<span class="token punctuation">)</span>
<span class="token number">21</span>:30:41.202 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping - <span class="token number">1</span> mappings <span class="token keyword">in</span> <span class="token string">&#39;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&#39;</span>
<span class="token number">21</span>:30:41.202 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&#39;</span>
<span class="token number">21</span>:30:41.626 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter - ControllerAdvice beans: none
<span class="token number">21</span>:30:41.738 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;mvcUriComponentsContributor&#39;</span>
<span class="token number">21</span>:30:41.786 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter - ControllerAdvice beans: none
<span class="token number">21</span>:30:41.806 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0&#39;</span>
<span class="token number">21</span>:30:41.919 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver - ControllerAdvice beans: none
<span class="token number">21</span>:30:41.920 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0&#39;</span>
<span class="token number">21</span>:30:41.949 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0&#39;</span>
<span class="token number">21</span>:30:41.967 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean <span class="token string">&#39;jspViewResolver&#39;</span>
<span class="token number">21</span>:30:44.214 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.DispatcherServlet - Detected AcceptHeaderLocaleResolver
<span class="token number">21</span>:30:44.214 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.DispatcherServlet - Detected FixedThemeResolver
<span class="token number">21</span>:31:02.141 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@d57bc91
<span class="token number">21</span>:31:03.483 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.DispatcherServlet - Detected org.springframework.web.servlet.support.SessionFlashMapManager@2b4e795e
<span class="token number">21</span>:44:08.180 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name <span class="token punctuation">[</span>java:comp/env/spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>
<span class="token number">21</span>:44:08.185 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.jndi.JndiLocatorDelegate - Converted JNDI name <span class="token punctuation">[</span>java:comp/env/spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span> not found - trying original name <span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>. javax.naming.NameNotFoundException: 名称<span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>未在此上下文中绑定。找不到<span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>。
<span class="token number">21</span>:44:08.185 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.jndi.JndiTemplate - Looking up JNDI object with name <span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>
<span class="token number">21</span>:44:08.185 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.jndi.JndiPropertySource - JNDI lookup <span class="token keyword">for</span> name <span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span> threw NamingException with message: 名称<span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>未在此上下文中绑定。找不到<span class="token punctuation">[</span>spring.liveBeansView.mbeanDomain<span class="token punctuation">]</span>。. Returning null.
<span class="token number">21</span>:44:08.195 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> DEBUG org.springframework.web.servlet.DispatcherServlet - <span class="token assign-left variable">enableLoggingRequestDetails</span><span class="token operator">=</span><span class="token string">&#39;false&#39;</span><span class="token builtin class-name">:</span> request parameters and headers will be masked to prevent unsafe logging of potentially sensitive data
<span class="token number">21</span>:44:08.195 <span class="token punctuation">[</span>RMI TCP Connection<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-127.0.0.1<span class="token punctuation">]</span> INFO org.springframework.web.servlet.DispatcherServlet - Completed initialization <span class="token keyword">in</span> <span class="token number">815032</span> ms

  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,33),g={href:"https://pdai.tech/md/spring/spring-x-framework-springmvc-source-1.html",target:"_blank",rel:"noopener noreferrer"},f=n("strong",null,"Spring进阶 - SpringMVC实现原理之DispatcherServlet的初始化过程",-1);function w(h,C){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,k,n("blockquote",null,[n("p",null,[s("DispatcherServlet 作为一个 Servlet，需要根据 Servlet 规范使用 Java 配置或 web.xml 声明和映射。反过来，DispatcherServlet 使用 Spring 配置来发现请求映射、视图解析、异常处理等等所需的委托组件。那它和ApplicationContext有和关系呢？如下内容可以参考"),n("a",d,[s("官网-SpringMVC文档"),t(a)])])]),v,n("p",null,[s("很容易找到init()的方法位于HttpServletBean中，然后跑"),n("a",m,[s("Spring基础 - SpringMVC请求流程和案例"),t(a)]),s("中的代码，在init方法中打断点。")]),b,n("p",null,[n("a",g,[f,t(a)])])])}const y=p(l,[["render",w],["__file","spring-x-framework-springmvc-source-1.html.vue"]]);export{y as default};
