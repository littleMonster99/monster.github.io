import{_ as a,W as t,X as e,Y as n,Z as o,$ as p,a0 as l,D as i}from"./framework-f64bc974.js";const c={},u=l(`<h1 id="beautifulsoup入门" tabindex="-1"><a class="header-anchor" href="#beautifulsoup入门" aria-hidden="true">#</a> BeautifulSoup入门</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p><strong>Beautiful Soup</strong> 是一个可以从 <strong>HTML</strong> 或 <strong>XML</strong> 文件中提取数据的 <strong>Python</strong> 库.它能够通过你喜欢的转换器实现惯用的文档导航,查找,修改文档的方式.<strong>Beautiful Soup</strong> 会帮你节省数小时甚至数天的工作时间.</p><h2 id="_2-简单用法" tabindex="-1"><a class="header-anchor" href="#_2-简单用法" aria-hidden="true">#</a> 2. 简单用法</h2><p>将一段文档传入 <strong>BeautifulSoup</strong> 的构造方法,就能得到一个文档的对象, 可以传入一段字符串或一个文件句柄.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span><span class="token string">&quot;&lt;html&gt;&lt;body&gt;&lt;p&gt;data&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> soup
<span class="token operator">&lt;</span>html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>data<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> soup<span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>data<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>首先传入一个 <strong>html</strong> 文档，<code>soup</code> 是获得文档的对象。</p></li><li><p>然后,文档被转换成 <strong>Unicode</strong> ,并且 <strong>HTML</strong> 的实例都被转换成 <strong>Unicode</strong> 编码。</p></li><li><p>然后,<strong>Beautiful Soup</strong> 选择最合适的解析器来解析这段文档,</p><p>如果手动指定解析器那么 <strong>Beautiful Soup</strong> 会选择指定的解析器来解析文档。但是一般最好手动指定解析器，</p></li></ol><ul><li>要解析的文档是什么类型: 目前支持, <strong>html, xml,</strong> 和 <strong>html5</strong></li><li>指定使用哪种解析器: 目前支持, <strong>lxml, html5lib,</strong> 和 <strong>html.parser</strong></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests

html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>‘http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>’<span class="token punctuation">)</span><span class="token punctuation">.</span>content  
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">,</span> from_encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> soup<span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-对象种类" tabindex="-1"><a class="header-anchor" href="#_3-对象种类" aria-hidden="true">#</a> 3. 对象种类</h2><p><strong>Beautiful Soup</strong> 将复杂 <strong>HTML</strong> 文档转换成一个复杂的树形结构,每个节点都是 <strong>Python</strong> 对象,所有对象可以归纳为 4 种: <code>Tag , NavigableString , BeautifulSoup , Comment .</code></p><ul><li><p><code>Tag</code>：通俗点讲就是 <strong>HTML</strong> 中的一个个标签，像上面的 <code>div，p</code>。每个 <code>Tag</code> 有两个重要的属性 <code>name</code> 和 <code>attrs，name</code> 指标签的名字或者 <code>tag</code> 本身的 <code>name，attrs</code> 通常指一个标签的 <code>class</code>。</p></li><li><p><code>NavigableString</code>：获取标签内部的文字，如，<code>soup.p.string</code>。</p></li><li><p><code>BeautifulSoup</code>：表示一个文档的全部内容。</p></li><li><p><code>Comment：Comment</code> 对象是一个特殊类型的 <code>NavigableString</code> 对象，其输出的内容不包括注释符号.</p></li></ul><h2 id="_4-示例" tabindex="-1"><a class="header-anchor" href="#_4-示例" aria-hidden="true">#</a> 4. 示例</h2><p>如下示例，<strong>Beautiful Soup</strong> 的常见用法</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">import</span> sys  
<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>  
sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span> 
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests


html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">&quot;&quot;&quot;
&lt;head&gt;
      &lt;meta charset=&quot;utf-8&quot;&gt;
      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;&gt;
    &lt;title&gt;首页 - 简书&lt;/title&gt;
&lt;/head&gt;

&lt;body class=&quot;output fluid zh cn win reader-day-mode reader-font2 &quot; data-js-module=&quot;recommendation&quot; data-locale=&quot;zh-CN&quot;&gt;

&lt;ul class=&quot;article-list thumbnails&quot;&gt;

  &lt;li class=have-img&gt;
      &lt;a class=&quot;wrap-img&quot; href=&quot;/p/49c4728c3ab2&quot;&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/2442470-745c6471c6f8258c.jpg?imageMogr2/auto-orient/strip%7CimageView2/1/w/300/h/300&quot; alt=&quot;300&quot; /&gt;&lt;/a&gt;
    &lt;div&gt;
      &lt;p class=&quot;list-top&quot;&gt;
        &lt;a class=&quot;author-name blue-link&quot; target=&quot;_blank&quot; href=&quot;/users/0af6b163b687&quot;&gt;阿随向前冲&lt;/a&gt;
        &lt;em&gt;·&lt;/em&gt;
        &lt;span class=&quot;time&quot; data-shared-at=&quot;2016-07-27T07:03:54+08:00&quot;&gt;&lt;/span&gt;
      &lt;/p&gt;
      &lt;h4 class=&quot;title&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;/p/49c4728c3ab2&quot;&gt; 只装了这六款软件，工作就高效到有时间逛某宝刷某圈&lt;/a&gt;&lt;/h4&gt;
      &lt;div class=&quot;list-footer&quot;&gt;
        &lt;a target=&quot;_blank&quot; href=&quot;/p/49c4728c3ab2&quot;&gt;
          阅读 1830
&lt;/a&gt;        &lt;a target=&quot;_blank&quot; href=&quot;/p/49c4728c3ab2#comments&quot;&gt;
           · 评论 35
&lt;/a&gt;        &lt;span&gt; · 喜欢 95&lt;/span&gt;
          &lt;span&gt; · 打赏 1&lt;/span&gt;
        
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&quot;&quot;&quot;</span>

soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span> <span class="token string">&#39;html.parser&#39;</span><span class="token punctuation">,</span> from_encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># 查找所有有关的节点</span>
tags <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">&quot;have-img&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> tag <span class="token keyword">in</span> tags<span class="token punctuation">:</span>
        image <span class="token operator">=</span> tag<span class="token punctuation">.</span>img<span class="token punctuation">[</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">]</span>
        article_user <span class="token operator">=</span> tag<span class="token punctuation">.</span>p<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>
        article_user_url <span class="token operator">=</span> tag<span class="token punctuation">.</span>p<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span>      
        created <span class="token operator">=</span> tag<span class="token punctuation">.</span>p<span class="token punctuation">.</span>span<span class="token punctuation">[</span><span class="token string">&#39;data-shared-at&#39;</span><span class="token punctuation">]</span>        
        article_url <span class="token operator">=</span> tag<span class="token punctuation">.</span>h4<span class="token punctuation">.</span>a<span class="token punctuation">[</span><span class="token string">&#39;href&#39;</span><span class="token punctuation">]</span>

        <span class="token comment"># 可以在查找的 tag 下继续使用 find_all()</span>
        tag_span <span class="token operator">=</span> tag<span class="token punctuation">.</span>div<span class="token punctuation">.</span>div<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&#39;span&#39;</span><span class="token punctuation">)</span>

        likes <span class="token operator">=</span> tag_span<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get_text<span class="token punctuation">(</span>strip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-1-find-all" tabindex="-1"><a class="header-anchor" href="#_4-1-find-all" aria-hidden="true">#</a> 4.1 find_all()</h3><p><strong>BeautifulSoup</strong> 主要用来遍历子节点及子节点的属性，通过点取属性的方式只能获得当前文档中的第一个 <code>tag</code>，例如，<code>soup.li</code>。如果想要得到所有的<code>&lt;li&gt;</code> 标签,或是通过名字得到比一个 <code>tag</code> 更多的内容的时候,就需要用到 <code>find_all()</code>，<code>find_all()</code> 方法搜索当前 tag 的所有 tag 子节点,并判断是否符合过滤器的条件<code>find_all()</code> 所接受的参数如下：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">find_all</span><span class="token punctuation">(</span> name <span class="token punctuation">,</span> attrs <span class="token punctuation">,</span> recursive <span class="token punctuation">,</span> string <span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>kwargs <span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol><li><p>按 <code>name</code> 搜索: <code>name</code> 参数可以查找所有名字为 <code>name</code> 的 <code>tag</code>,字符串对象会被自动忽略掉:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> soup.find_all<span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>按 <code>id</code> 搜索: 如果包含一个名字为 <code>id</code> 的参数,搜索时会把该参数当作指定名字 <code>tag</code> 的属性来搜索:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> soup.find_all<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token string">&#39;link2&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>按 <code>attr</code> 搜索：有些 <code>tag</code> 属性在搜索不能使用,比如 <strong>HTML5</strong> 中的 <code>data-*</code> 属性，但是可以通过 <code>find_all()</code> 方法的 <code>attrs</code> 参数定义一个字典参数来搜索包含特殊属性的 <code>tag</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> data_soup.find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;data-foo&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>按 <code>CSS</code> 搜索: 按照 <code>CSS</code> 类名搜索 <code>tag</code> 的功能非常实用,但标识<code>CSS</code> 类名的关键字 <code>class</code> 在 <strong>Python</strong> 中是保留字,使用 <code>class</code> 做参数会导致语法错误.从 <strong>Beautiful Soup</strong> 的 4.1.1 版本开始,可以通过 <code>class_</code> 参数搜索有指定 <code>CSS</code> 类名的 <code>tag</code>:</p><div class="language-ruby line-numbers-mode" data-ext="rb"><pre class="language-ruby"><code> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;li&#39;</span></span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;have-img&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>string</code> 参数：通过 <code>string</code> 参数可以搜搜文档中的字符串内容.与 <code>name</code> 参数的可选值一样, <code>string</code> 参数接受 字符串 , 正则表达式 , 列表, <code>True</code> 。 看例子:</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code> soup<span class="token punctuation">.</span><span class="token function">find_all</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> string<span class="token operator">=</span><span class="token string">&quot;Elsie&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><code>recursive</code> 参数：调用 <code>tag</code> 的 <code>find_all()</code> 方法时,<strong>Beautiful Soup</strong> 会检索当前 <code>tag</code> 的所有子孙节点,如果只想搜索 <code>tag</code> 的直接子节点,可以使用参数 <code>recursive=False</code> .</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code> soup<span class="token operator">.</span><span class="token function">find_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;title&quot;</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token constant boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><blockquote><p><strong>find_all()</strong> 几乎是 <strong>Beautiful Soup</strong>中最常用的搜索方法,也可以使用其简写方法，以下代码等价：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>    soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
    soup<span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_4-2-get-text" tabindex="-1"><a class="header-anchor" href="#_4-2-get-text" aria-hidden="true">#</a> 4.2 get_text()</h3><p>如果只想得到 <code>tag</code> 中包含的文本内容,那么可以用 <code>get_text()</code> 方法,这个方法获取到 <code>tag</code> 中包含的所有文版内容包括子孙 <code>tag</code> 中的内容,并将结果作为 <code>Unicode</code> 字符串返回:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>    tag.p.a.get_<span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,24),d={href:"https://www.jianshu.com/p/2b783f7914c6",target:"_blank",rel:"noopener noreferrer"};function r(g,v){const s=i("ExternalLinkIcon");return t(),e("div",null,[u,n("p",null,[n("a",d,[o("python：BeautifulSoup 模块使用指南"),p(s)])])])}const m=a(c,[["render",r],["__file","python-beautiful-soup-started.html.vue"]]);export{m as default};
