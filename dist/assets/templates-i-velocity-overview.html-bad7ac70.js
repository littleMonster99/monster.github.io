import{_ as a,W as e,X as t,Y as n,Z as p,$ as c,a0 as i,D as o}from"./framework-f64bc974.js";const l={},u=i(`<h1 id="模板引擎velocity入门" tabindex="-1"><a class="header-anchor" href="#模板引擎velocity入门" aria-hidden="true">#</a> 模板引擎Velocity入门</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>Velocity是一个基于java的模板引擎（template engine）。它允许任何人仅仅简单的使用模板语言（template language）来引用由java代码定义的对象。</p><h3 id="_1-1-应用领域" tabindex="-1"><a class="header-anchor" href="#_1-1-应用领域" aria-hidden="true">#</a> 1.1 应用领域</h3><ol><li><p>web开发领域</p><p>当Velocity应用于web开发时，界面设计人员可以和java程序开发人员同步开发一个遵循MVC架构的web站点，也就是说，页面设计人员可以只 关注页面的显示效果，而由java程序开发人员关注业务逻辑编码。Velocity将java代码从web页面中分离出来，这样为web站点的长期维护提 供了便利，同时也为我们在JSP和PHP之外又提供了一种可选的方案。</p></li><li><p>模板工具</p><p>它可以从模板（template）产生SQL和PostScript、XML，它也可以被<strong>当作一个独立工具来产生源代码和报告</strong>，或者作为其他系统的集成组件使用。</p></li></ol><h2 id="_2-集成使用" tabindex="-1"><a class="header-anchor" href="#_2-集成使用" aria-hidden="true">#</a> 2. 集成使用</h2><h3 id="_2-1-pom依赖" tabindex="-1"><a class="header-anchor" href="#_2-1-pom依赖" aria-hidden="true">#</a> 2.1 pom依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>velocity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-velocityhelloworld-java" tabindex="-1"><a class="header-anchor" href="#_2-2-velocityhelloworld-java" aria-hidden="true">#</a> 2.2 <strong>VelocityHelloWorld.java</strong></h3><ol><li>初始化 Velocity 。</li><li>创建一个上下文对象。</li><li>添加你的数据对象到上下文。</li><li>选择一个模板。</li><li>将你的数据与模板合并，产生输出内容。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VelocityHelloWorld</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* 1.初始化 Velocity */</span>
        <span class="token class-name">VelocityEngine</span> velocityEngine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VelocityEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        velocityEngine<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">VelocityEngine</span><span class="token punctuation">.</span><span class="token constant">RESOURCE_LOADER</span><span class="token punctuation">,</span> <span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        velocityEngine<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">VelocityEngine</span><span class="token punctuation">.</span><span class="token constant">FILE_RESOURCE_LOADER_PATH</span><span class="token punctuation">,</span> <span class="token string">&quot;/Users/zsz/Project/demo/2021year/10yue/velocity-demo/src/main/resources&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 解决中文乱码问题	</span>
        velocityEngine<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">Velocity</span><span class="token punctuation">.</span><span class="token constant">INPUT_ENCODING</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        velocityEngine<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">Velocity</span><span class="token punctuation">.</span><span class="token constant">OUTPUT_ENCODING</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        velocityEngine<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 2.创建一个上下文对象 */</span>
        <span class="token class-name">VelocityContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VelocityContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 3.添加你的数据对象到上下文 */</span>
        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;zsz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;project&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Velocity&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 4.选择一个模板 */</span>
        <span class="token class-name">Template</span> template <span class="token operator">=</span> velocityEngine<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;templates/hello.vm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* 5.将你的数据与模板合并，产生输出内容 */</span>
        <span class="token class-name">StringWriter</span> sw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> sw<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;final output:\\n&quot;</span> <span class="token operator">+</span> sw<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-hello-vm" tabindex="-1"><a class="header-anchor" href="#_2-3-hello-vm" aria-hidden="true">#</a> 2.3 <strong>hello.vm</strong></h3><p>在你的 resources (一般路径为<code>src/main/resources</code>) 目录下创建 <code>templates/helloVelocity.vm</code> 文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hello World! The first velocity demo.
Name is $name.
Project is $project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-输出" tabindex="-1"><a class="header-anchor" href="#_2-4-输出" aria-hidden="true">#</a> 2.4 输出</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>final output:
Hello World! The first velocity demo.
Name is zsz.
Project is Velocity
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-velocity-语法" tabindex="-1"><a class="header-anchor" href="#_3-velocity-语法" aria-hidden="true">#</a> 3. Velocity 语法</h2><h3 id="_3-1-注释" tabindex="-1"><a class="header-anchor" href="#_3-1-注释" aria-hidden="true">#</a> 3.1 注释</h3><p>单行注释</p><p>以 <code>##</code> 开头。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token velocity-comment comment">## This is a single line comment.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多行注释</p><p>以 <code>#*</code> 开头，以 <code>*#</code> 结尾。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token velocity-comment comment">#*
  Thus begins a multi-line comment. Online visitors won&#39;t
  see this text because the Velocity Templating Engine will
  ignore it.
*#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-变量-variables" tabindex="-1"><a class="header-anchor" href="#_3-2-变量-variables" aria-hidden="true">#</a> 3.2 变量(Variables)</h3><p>和我们所熟知的其他编程语言一样，Velocity 也可以在模板文件中有变量的概念。</p><p>变量以 <code>$</code> 开头，首字母必须是英文字母。变量允许的字符为以下几种类型：</p><ul><li>字母(a .. z, A .. Z)</li><li>数字(0 .. 9)</li><li>连字符(&quot;-&quot;)</li><li>下划线(&quot;_&quot;)</li></ul><p>有效范例：</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token variable">$foo</span>
<span class="token variable">$mudSlinger</span>
<span class="token variable">$mud-slinger</span>
<span class="token variable">$mud_slinger</span>
<span class="token variable">$mudSlinger1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-1-变量定义" tabindex="-1"><a class="header-anchor" href="#_3-2-1-变量定义" aria-hidden="true">#</a> 3.2.1 变量定义</h4><p>可以使用 <code>#set</code> 来为变量定义。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token directive"><span class="token keyword">#set</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token string">&quot;bar&quot;</span> <span class="token punctuation">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-3-属性-properties" tabindex="-1"><a class="header-anchor" href="#_3-3-属性-properties" aria-hidden="true">#</a> 3.3 属性(Properties)</h3><p>属性以 <code>$</code> 开头，标识符间以 <code>.</code> 分隔。</p><p>有效范例：</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token variable">$customer<span class="token punctuation">.</span>Address</span>
<span class="token variable">$purchase<span class="token punctuation">.</span>Total</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-函数-methods" tabindex="-1"><a class="header-anchor" href="#_3-4-函数-methods" aria-hidden="true">#</a> 3.4 函数(Methods)</h3><p>有效范例：</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token velocity-comment comment">## 无参数</span>
<span class="token variable">$customer<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="token variable">$purchase<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="token velocity-comment comment">## 单个参数</span>
<span class="token variable">$page<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span> <span class="token string">&quot;My Home Page&quot;</span> <span class="token punctuation">)</span></span>
<span class="token velocity-comment comment">## 参数列表</span>
<span class="token variable">$person<span class="token punctuation">.</span><span class="token function">setAttributes</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token string">&quot;Strange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Weird&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Excited&quot;</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-1-velocity-1-6-开始支持重载函数。" tabindex="-1"><a class="header-anchor" href="#_3-4-1-velocity-1-6-开始支持重载函数。" aria-hidden="true">#</a> 3.4.1 Velocity 1.6 开始支持重载函数。</h4><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token variable">$sun<span class="token punctuation">.</span><span class="token function">setPlanets</span><span class="token punctuation">(</span><span class="token string">&#39;Earth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Mars&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Neptune&#39;</span><span class="token punctuation">)</span></span>
<span class="token variable">$sun<span class="token punctuation">.</span><span class="token function">setPlanets</span><span class="token punctuation">(</span><span class="token string">&#39;Mercury&#39;</span><span class="token punctuation">)</span></span>
<span class="token variable">$sun<span class="token punctuation">.</span><span class="token function">setPlanets</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-5-条件语句" tabindex="-1"><a class="header-anchor" href="#_3-5-条件语句" aria-hidden="true">#</a> 3.5 条件语句</h3><p>条件语句必须以 <code>#if</code> 开始，以 <code>#end</code> 结尾。</p><p>用法与Java中的条件语句极其相似，看看例子就能懂。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token punctuation">)</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>Velocity!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>
<span class="token directive"><span class="token keyword">#end</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Velocity中的 <code>==</code> 的语义与Java略有不同，其中 <code>==</code> 只能用于测试对象的相等性。在Velocity中，等效运算符可以用于直接比较数字，字符串或对象。当对象具有不同的类时，通过为每个对象调用 toString() 然后比较来获得字符串表示。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token directive"><span class="token keyword">#set</span> <span class="token punctuation">(</span><span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token string">&quot;north&quot;</span><span class="token punctuation">)</span></span>
<span class="token directive"><span class="token keyword">#set</span> <span class="token punctuation">(</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token string">&quot;north&quot;</span><span class="token punctuation">)</span></span>

<span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token operator">==</span> <span class="token variable">$bar</span> <span class="token punctuation">)</span></span>
    **Go North**
<span class="token directive"><span class="token keyword">#elseif</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token operator">==</span> <span class="token string">&quot;east&quot;</span> <span class="token punctuation">)</span></span>
    **Go East**
<span class="token directive"><span class="token keyword">#elseif</span><span class="token punctuation">(</span> <span class="token variable">$bar</span> <span class="token operator">==</span> <span class="token string">&quot;south&quot;</span> <span class="token punctuation">)</span></span>
    **Go South**
<span class="token directive"><span class="token keyword">#else</span></span>
    **Go West**
<span class="token directive"><span class="token keyword">#end</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Velocity 中的条件语句也可以使用与、或、非。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$bar</span> <span class="token punctuation">)</span></span>
    **This AND That**
<span class="token directive"><span class="token keyword">#end</span></span>
<span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token variable">$foo</span> <span class="token operator">||</span> <span class="token variable">$bar</span> <span class="token punctuation">)</span></span>
    **This OR That**
<span class="token directive"><span class="token keyword">#end</span></span>
<span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token variable">$foo</span> <span class="token punctuation">)</span></span>
    **NOT that**
<span class="token directive"><span class="token keyword">#end</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-6-循环" tabindex="-1"><a class="header-anchor" href="#_3-6-循环" aria-hidden="true">#</a> 3.6 循环</h3><p><code>#foreach</code> 用来控制一个循环语句。</p><p><code>#foreach</code> 支持遍历一个 Vector、Hashtable 或 Array 对象。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token directive"><span class="token keyword">#foreach</span><span class="token punctuation">(</span> <span class="token variable">$key</span> <span class="token keyword">in</span> <span class="token variable">$allProducts<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span> <span class="token punctuation">)</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Key: <span class="token variable">$key</span> -&gt; Value: <span class="token variable">$allProducts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$key<span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token directive"><span class="token keyword">#end</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>#break</code> 跳出循环。<code>$foreach.count</code> 表示循环次数。</p><div class="language-velocity line-numbers-mode" data-ext="velocity"><pre class="language-velocity"><code><span class="token velocity-comment comment">## list first 5 customers only</span>
<span class="token directive"><span class="token keyword">#foreach</span><span class="token punctuation">(</span> <span class="token variable">$customer</span> <span class="token keyword">in</span> <span class="token variable">$customerList</span> <span class="token punctuation">)</span></span>
    <span class="token directive"><span class="token keyword">#if</span><span class="token punctuation">(</span> <span class="token variable">$foreach<span class="token punctuation">.</span>count</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">)</span></span>
        <span class="token directive"><span class="token keyword">#break</span></span>
    <span class="token directive"><span class="token keyword">#end</span></span>
    <span class="token variable">$customer<span class="token punctuation">.</span>Name</span>
<span class="token directive"><span class="token keyword">#end</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-宏" tabindex="-1"><a class="header-anchor" href="#_3-7-宏" aria-hidden="true">#</a> 3.7 宏</h3><p>Velocity 中的宏可以理解为函数定义。定义的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#macro(macroName arg1 arg2 …)</span>
<span class="token punctuation">..</span>.
<span class="token comment">#end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用这个宏的语法是：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#macroName(arg1 arg2 …)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的参数之间使用空格隔开，下面是定义和使用 Velocity 宏的例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#macro(sayHello $name)</span>
hello <span class="token variable">$name</span>
<span class="token comment">#end</span>
<span class="token comment">#sayHello(“velocity”)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的结果为 hello velocity</p><h3 id="_3-8-parse-和-include" tabindex="-1"><a class="header-anchor" href="#_3-8-parse-和-include" aria-hidden="true">#</a> 3.8 #parse 和 #include</h3><p>#parse 和 #include 指令的功能都是在外部引用文件，而两者的区别是，#parse 会将引用的内容当成类似于源码文件，会将内容在引入的地方进行解析，#include 是将引入文件当成资源文件，会将引入内容原封不动地以文本输出。分别看以下例子：</p><p>foo.vm 文件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#set($name =“velocity”)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>parse.vm：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>#<span class="token function">parse</span><span class="token punctuation">(</span>“foo.vm”<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：velocity</p><p>include.vm：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token expression"><span class="token punctuation">(</span>“foo<span class="token punctuation">.</span>vm”<span class="token punctuation">)</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果为：#set($name =“velocity”)</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,75),d={href:"https://www.jianshu.com/p/378827f1dfc8",target:"_blank",rel:"noopener noreferrer"};function r(v,k){const s=o("ExternalLinkIcon");return e(),t("div",null,[u,n("p",null,[n("a",d,[p("模板引擎velocity"),c(s)])])])}const b=a(l,[["render",r],["__file","templates-i-velocity-overview.html.vue"]]);export{b as default};
