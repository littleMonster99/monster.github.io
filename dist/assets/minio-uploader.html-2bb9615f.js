import{_ as e,W as c,X as o,Y as n,Z as s,$ as t,a0 as p,D as l}from"./framework-f64bc974.js";const i={},u=p('<h1 id="minio进阶-minio-vue-uploader-分片上传方案及案例详解" tabindex="-1"><a class="header-anchor" href="#minio进阶-minio-vue-uploader-分片上传方案及案例详解" aria-hidden="true">#</a> Minio进阶 - Minio+vue-uploader 分片上传方案及案例详解</h1><h2 id="_1-前言" tabindex="-1"><a class="header-anchor" href="#_1-前言" aria-hidden="true">#</a> 1. 前言</h2><p>我们之前分析过Minio 的上传接口源码，其是进行了分块，再上传分块到Minio 服务器，最后再对块进行合并。</p><p>针对大文件的上传，如果采用上传到文件服务，再上传到Minio，其效率是非常低的，首先上传到文件服务（会存放在Tomcat 临时目录）就已经比较慢了。</p><p>针对大文件的上传，我们需要一个优化方案。</p><h3 id="_1-1-优化方案" tabindex="-1"><a class="header-anchor" href="#_1-1-优化方案" aria-hidden="true">#</a> 1.1 优化方案</h3><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724203557314.png" alt="image-20220724203557314" tabindex="0" loading="lazy"><figcaption>image-20220724203557314</figcaption></figure><ol><li>前端服务进行大文件分片处理，将分片信息传递给文件服务，文件服务返回所有分片的上传链接及uploadId。</li><li>前端服务直接请求Minio 服务器，并发上传分片</li><li>所有分片上传完成后，使用uploadId 调用文件服务进行文件合并</li></ol><h2 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例" aria-hidden="true">#</a> 2. 案例</h2>',9),k={href:"https://blog.csdn.net/qq_43437874/article/details/120920171",target:"_blank",rel:"noopener noreferrer"},r=p(`<h3 id="_2-1-后端获取分片上传url" tabindex="-1"><a class="header-anchor" href="#_2-1-后端获取分片上传url" aria-hidden="true">#</a> 2.1 后端获取分片上传URL</h3><p>在Minio 的上传接口源码中，创建分片请求的方法是<code>protected</code> 关键字修饰的，无法通过创建<code>MinioClient</code>对象来访问，那么只能通过子类继承来访问了。</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724203729888.png" alt="image-20220724203729888" tabindex="0" loading="lazy"><figcaption>image-20220724203729888</figcaption></figure><p>首先自定义一个Minio 客户端类，继承MinioClient类，其作用主要是将以下几个方法暴露出来，以便调用：</p><ul><li>createMultipartUpload：创建分片请求，返回uploadId</li><li>listMultipart：查询分片信息</li><li>completeMultipartUpload：根据uploadId 合并已上传的分片</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PearlMinioClient</span> <span class="token keyword">extends</span> <span class="token class-name">MinioClient</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">PearlMinioClient</span><span class="token punctuation">(</span><span class="token class-name">MinioClient</span> client<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 创建分片上传请求
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       存储桶
     * <span class="token keyword">@param</span> <span class="token parameter">region</span>           区域
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span>       对象名
     * <span class="token keyword">@param</span> <span class="token parameter">headers</span>          消息头
     * <span class="token keyword">@param</span> <span class="token parameter">extraQueryParams</span> 额外查询参数
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CreateMultipartUploadResponse</span> <span class="token function">createMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 完成分片上传，执行合并文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       存储桶
     * <span class="token keyword">@param</span> <span class="token parameter">region</span>           区域
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span>       对象名
     * <span class="token keyword">@param</span> <span class="token parameter">uploadId</span>         上传ID
     * <span class="token keyword">@param</span> <span class="token parameter">parts</span>            分片
     * <span class="token keyword">@param</span> <span class="token parameter">extraHeaders</span>     额外消息头
     * <span class="token keyword">@param</span> <span class="token parameter">extraQueryParams</span> 额外查询参数
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraHeaders<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> extraHeaders<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 查询分片数据
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       存储桶
     * <span class="token keyword">@param</span> <span class="token parameter">region</span>           区域
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span>       对象名
     * <span class="token keyword">@param</span> <span class="token parameter">uploadId</span>         上传ID
     * <span class="token keyword">@param</span> <span class="token parameter">extraHeaders</span>     额外消息头
     * <span class="token keyword">@param</span> <span class="token parameter">extraQueryParams</span> 额外查询参数
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ListPartsResponse</span> <span class="token function">listMultipart</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxParts<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partNumberMarker<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraHeaders<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">listParts</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> maxParts<span class="token punctuation">,</span> partNumberMarker<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> extraHeaders<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置类中注入我们的自定义客户端：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@SneakyThrows</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">PearlMinioClient</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">PearlMinioClient</span> <span class="token function">minioClient</span><span class="token punctuation">(</span><span class="token class-name">OssProperties</span> ossProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MinioClient</span> minioClient <span class="token operator">=</span> <span class="token class-name">MinioClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">endpoint</span><span class="token punctuation">(</span>ossProperties<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">credentials</span><span class="token punctuation">(</span>ossProperties<span class="token punctuation">.</span><span class="token function">getAccessKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ossProperties<span class="token punctuation">.</span><span class="token function">getSecretKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PearlMinioClient</span><span class="token punctuation">(</span>minioClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在模板类MinioTemplate中，将之前的MinIO 客户端换成PearlMinioClient。并将上面关于分片的几个操作方法集成进来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinioTemplate</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * MinIO 客户端
     */</span>
    <span class="token class-name">PearlMinioClient</span> pearlMinioClient<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * MinIO 配置类
     */</span>
    <span class="token class-name">OssProperties</span> ossProperties<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 查询所有存储桶
     *
     * <span class="token keyword">@return</span> Bucket 集合
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Bucket</span><span class="token punctuation">&gt;</span></span> <span class="token function">listBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">listBuckets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 桶是否存在
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span> 桶名
     * <span class="token keyword">@return</span> 是否存在
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">bucketExists</span><span class="token punctuation">(</span><span class="token class-name">BucketExistsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 创建存储桶
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span> 桶名
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            pearlMinioClient<span class="token punctuation">.</span><span class="token function">makeBucket</span><span class="token punctuation">(</span><span class="token class-name">MakeBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 删除一个空桶 如果存储桶存在对象不为空时，删除会报错。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span> 桶名
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeBucket</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pearlMinioClient<span class="token punctuation">.</span><span class="token function">removeBucket</span><span class="token punctuation">(</span><span class="token class-name">RemoveBucketArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 上传文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">inputStream</span>      流
     * <span class="token keyword">@param</span> <span class="token parameter">originalFileName</span> 原始文件名
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       桶名
     * <span class="token keyword">@return</span> OssFile
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">OssFile</span> <span class="token function">putObject</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> originalFileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> uuidFileName <span class="token operator">=</span> <span class="token function">generateOssUuidFileName</span><span class="token punctuation">(</span>originalFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                bucketName <span class="token operator">=</span> ossProperties<span class="token punctuation">.</span><span class="token function">getDefaultBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            pearlMinioClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>
                    <span class="token class-name">PutObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>uuidFileName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>
                            inputStream<span class="token punctuation">,</span> inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OssFile</span><span class="token punctuation">(</span>uuidFileName<span class="token punctuation">,</span> originalFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回临时带签名、过期时间一天、Get请求方式的访问URL
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>  桶名
     * <span class="token keyword">@param</span> <span class="token parameter">ossFilePath</span> Oss文件路径
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> ossFilePath<span class="token punctuation">,</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> queryParams<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>
                <span class="token class-name">GetPresignedObjectUrlArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token constant">PUT</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ossFilePath<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">expiry</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">extraQueryParams</span><span class="token punctuation">(</span>queryParams<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>



    <span class="token doc-comment comment">/**
     * GetObject接口用于获取某个文件（Object）。此操作需要对此Object具有读权限。
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>  桶名
     * <span class="token keyword">@param</span> <span class="token parameter">ossFilePath</span> Oss文件路径
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> ossFilePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>
                <span class="token class-name">GetObjectArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ossFilePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询桶的对象信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span> 桶名
     * <span class="token keyword">@param</span> <span class="token parameter">recursive</span>  是否递归查询
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Result</span><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listObjects</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>
                <span class="token class-name">ListObjectsArgs</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bucket</span><span class="token punctuation">(</span><span class="token string">&quot;my-bucketname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">recursive</span><span class="token punctuation">(</span>recursive<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token doc-comment comment">/**
     * 获取带签名的临时上传元数据对象，前端可获取后，直接上传到Minio
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">fileName</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPresignedPostFormData</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 为存储桶创建一个上传策略，过期时间为7天</span>
        <span class="token class-name">PostPolicy</span> policy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PostPolicy</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置一个参数key，值为上传对象的名称</span>
        policy<span class="token punctuation">.</span><span class="token function">addEqualsCondition</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加Content-Type，例如以&quot;image/&quot;开头，表示只能上传照片，这里吃吃所有</span>
        policy<span class="token punctuation">.</span><span class="token function">addStartsWithCondition</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">ALL_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置上传文件的大小 64kiB to 10MiB.</span>
        <span class="token comment">//policy.addContentLengthRangeCondition(64 * 1024, 10 * 1024 * 1024);</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">getPresignedPostFormData</span><span class="token punctuation">(</span>policy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     *  上传分片上传请求，返回uploadId
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">CreateMultipartUploadResponse</span> <span class="token function">uploadId</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headers<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">createMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> headers<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 完成分片上传，执行合并文件
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       存储桶
     * <span class="token keyword">@param</span> <span class="token parameter">region</span>           区域
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span>       对象名
     * <span class="token keyword">@param</span> <span class="token parameter">uploadId</span>         上传ID
     * <span class="token keyword">@param</span> <span class="token parameter">parts</span>            分片
     * <span class="token keyword">@param</span> <span class="token parameter">extraHeaders</span>     额外消息头
     * <span class="token keyword">@param</span> <span class="token parameter">extraQueryParams</span> 额外查询参数
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ObjectWriteResponse</span> <span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraHeaders<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> extraHeaders<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateOssUuidFileName</span><span class="token punctuation">(</span><span class="token class-name">String</span> originalFilename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;files&quot;</span> <span class="token operator">+</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token constant">SLASH</span> <span class="token operator">+</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token constant">SLASH</span> <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token constant">UNDERLINE</span> <span class="token operator">+</span> originalFilename<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 初始化默认存储桶
     */</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initDefaultBucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> defaultBucketName <span class="token operator">=</span> ossProperties<span class="token punctuation">.</span><span class="token function">getDefaultBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">bucketExists</span><span class="token punctuation">(</span>defaultBucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;默认存储桶：defaultBucketName已存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;创建默认存储桶：defaultBucketName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">makeBucket</span><span class="token punctuation">(</span>ossProperties<span class="token punctuation">.</span><span class="token function">getDefaultBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 查询分片数据
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>       存储桶
     * <span class="token keyword">@param</span> <span class="token parameter">region</span>           区域
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span>       对象名
     * <span class="token keyword">@param</span> <span class="token parameter">uploadId</span>         上传ID
     * <span class="token keyword">@param</span> <span class="token parameter">extraHeaders</span>     额外消息头
     * <span class="token keyword">@param</span> <span class="token parameter">extraQueryParams</span> 额外查询参数
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ListPartsResponse</span> <span class="token function">listMultipart</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> region<span class="token punctuation">,</span> <span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> maxParts<span class="token punctuation">,</span> <span class="token class-name">Integer</span> partNumberMarker<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraHeaders<span class="token punctuation">,</span> <span class="token class-name">Multimap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> extraQueryParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchAlgorithmException</span><span class="token punctuation">,</span> <span class="token class-name">InsufficientDataException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidKeyException</span><span class="token punctuation">,</span> <span class="token class-name">ServerException</span><span class="token punctuation">,</span> <span class="token class-name">XmlParserException</span><span class="token punctuation">,</span> <span class="token class-name">ErrorResponseException</span><span class="token punctuation">,</span> <span class="token class-name">InternalException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidResponseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pearlMinioClient<span class="token punctuation">.</span><span class="token function">listMultipart</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> region<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> maxParts<span class="token punctuation">,</span> partNumberMarker<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> extraHeaders<span class="token punctuation">,</span> extraQueryParams<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是创建请求了，返回一个Map 集合，实际开发应该封装为响应对象。这里主要是接受分片数量，然后为每一个分块，创建一个带签名的上传URL。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 返回分片上传需要的签名数据URL及 uploadId
     *
     * <span class="token keyword">@param</span> <span class="token parameter">bucketName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">fileName</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/createMultipartUpload&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">createMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> chunkSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. 根据文件名创建签名</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 获取uploadId</span>
        <span class="token class-name">CreateMultipartUploadResponse</span> response <span class="token operator">=</span> minioTemplate<span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> uploadId <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uploadId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;uploadId&quot;</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 请求Minio 服务，获取每个分块带签名的上传URL</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> reqParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reqParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;uploadId&quot;</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> partList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4. 循环分块数 从1开始</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> chunkSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            reqParams<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;partNumber&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> uploadUrl <span class="token operator">=</span> minioTemplate<span class="token punctuation">.</span><span class="token function">getPresignedObjectUrl</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> reqParams<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取URL</span>
            result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;chunk_&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uploadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加到集合</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-前端执行分片上传" tabindex="-1"><a class="header-anchor" href="#_2-2-前端执行分片上传" aria-hidden="true">#</a> 2.2. 前端执行分片上传</h3><p>前端依然是采用<code>vue-uploader</code>，首先在文件添加的事件中，后台请求创建分片URL 上传接口，并将<code>uploadId</code>、每个分块的上传链接设置到<code>file.chunkUrlData</code>属性中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token function">onFileAdded</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token char">&#39;文件被添加：&#39;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>panelShow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token comment">// 计算MD5</span>
      <span class="token comment">// this.computeMD5(file, this.options.chunkSize);</span>
      <span class="token comment">// 获取分块上传链接</span>
      <span class="token comment">// eslint-disable-next-line no-unused-vars</span>
      <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getChunkUploadUrl</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;文件被添加查看是否获取到分块<span class="token constant">URL</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>chunkUrlData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    async <span class="token function">getChunkUploadUrl</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 向具有指定ID的用户发出请求</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;获取分块上传链接&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">const</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 文件名</span>
      <span class="token keyword">const</span> chunkSize <span class="token operator">=</span> file<span class="token punctuation">.</span>chunks<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 分片数</span>
      <span class="token comment">// 请求后台返回每个分块的上传链接</span>
      <span class="token comment">// eslint-disable-next-line no-unused-vars</span>
      <span class="token keyword">const</span> res <span class="token operator">=</span> await <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>&#39;<span class="token operator">/</span>file<span class="token operator">/</span>createMultipartUpload&#39;<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        params<span class="token operator">:</span> <span class="token punctuation">{</span>
          fileName<span class="token operator">:</span> fileName<span class="token punctuation">,</span>
          chunkSize<span class="token operator">:</span> chunkSize<span class="token punctuation">,</span>
          bucketName<span class="token operator">:</span> &#39;pearl<span class="token operator">-</span>buckent&#39;
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;获取到的uploadId<span class="token operator">:</span>&#39; <span class="token operator">+</span> response<span class="token punctuation">.</span>data<span class="token punctuation">.</span>uploadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;获取到的分片上传集合<span class="token constant">URL</span><span class="token operator">:</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
          file<span class="token punctuation">.</span>chunkUrlData <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在options中，我们首先要设置以下几个重要选项：</p><p>动态的target，因为每个分块的上传路径都是不一样的，所以要从file.chunkUrlData取出当前分块的URL 分块大小chunkSize，Minio 默认是5MB，我们这里也是用这个大小 查询参数query，因为每个分块上传时都需要一个partNumber参数，可以通过这个query函数来进行传递 其他兼容Minio分片上传配置，详情见注释</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token literal-property property">options</span><span class="token operator">:</span> <span class="token punctuation">{</span>

        <span class="token comment">// 目标上传 URL，可以是字符串也可以是函数，如果是函数的话，则会传入 Uploader.File 实例、</span>
        <span class="token comment">// 当前块 Uploader.Chunk 以及是否是测试模式，默认值为 &#39;/&#39;</span>
        <span class="token function-variable function">target</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> chunkFile<span class="token punctuation">,</span> mode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 分块上传前每次都会进入到该方法</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;进入到target&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;文件名：&#39;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;当前分块序号&#39;</span> <span class="token operator">+</span> chunkFile<span class="token punctuation">.</span>offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;获取到分块上传URL：&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>chunkUrlData<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token string">&#39;chunk_&#39;</span> <span class="token operator">+</span> chunkFile<span class="token punctuation">.</span>offset<span class="token punctuation">;</span><span class="token comment">// 键值 用于获取分块链接URL</span>
          <span class="token keyword">return</span> file<span class="token punctuation">.</span>chunkUrlData<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 为每个块向服务器发出 GET 请求，以查看它是否已经存在。如果在服务器端实现，</span>
        <span class="token comment">// 这将允许在浏览器崩溃甚至计算机重新启动后继续上传。(默认: true)</span>
        <span class="token literal-property property">testChunks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token comment">// 分块时按照该值来分。最后一个上传块的大小是可能是大于等于1倍的这个值但是小于两倍的这个值大小，</span>
        <span class="token comment">// 可见这个 Issue #51，默认 1*1024*1024。</span>
        <span class="token literal-property property">chunkSize</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
        <span class="token comment">// 强制所有块小于或等于 chunkSize。否则，最后一个块将大于或等于chunkSize。(默认: false)</span>
        <span class="token literal-property property">forceChunkSize</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token comment">// 包含在带有数据的多部分 POST 中的额外参数。这可以是一个对象或一个函数。如果是一个函数，</span>
        <span class="token comment">// 它将被传递一个 Uploader.File、一个 Uploader.Chunk 对象和一个 isTest 布尔值（默认值{}：）</span>
        <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> chunkFile<span class="token punctuation">,</span> mode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-property property">&#39;partNumber&#39;</span><span class="token operator">:</span> chunkFile<span class="token punctuation">.</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">uploadMethod</span><span class="token operator">:</span> <span class="token string">&#39;PUT&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">//  当上传的时候所使用的是方式，可选 multipart、octet，默认 multipart，参考 multipart vs octet。</span>
        <span class="token comment">// MiniO 的分片不能使用表单</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;octet&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">//  处理请求参数，默认 function (params) {return params}，一般用于修改参数名字或者删除参数。0.5.2版本后，</span>
        <span class="token comment">// Minio的连接后面不能拼接参数，所以设置为空</span>
        <span class="token function-variable function">processParams</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
        <span class="token comment">// headers: {</span>
        <span class="token comment">//  &#39;Content-Type&#39;: &#39;binary/octet-stream&#39;</span>
        <span class="token comment">// }</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-合并文件" tabindex="-1"><a class="header-anchor" href="#_2-3-合并文件" aria-hidden="true">#</a> 2.3. 合并文件</h3><p>后台提供一个文件合并的接口，根据<code>uploadId</code>去查询分块信息，然后进行合并操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * 分片上传完后合并
     *
     * <span class="token keyword">@param</span> <span class="token parameter">objectName</span> 文件全路径名称
     * <span class="token keyword">@param</span> <span class="token parameter">uploadId</span>   返回的uploadId
     * <span class="token keyword">@return</span> /
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/completeMultipartUpload&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token class-name">String</span> bucketName<span class="token punctuation">,</span><span class="token class-name">String</span> objectName<span class="token punctuation">,</span> <span class="token class-name">String</span> uploadId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Part</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">ListPartsResponse</span> partResult <span class="token operator">=</span> minioTemplate<span class="token punctuation">.</span><span class="token function">listMultipart</span><span class="token punctuation">(</span><span class="token string">&quot;pearl-buckent&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> partNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>partResult<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Part</span> part <span class="token operator">:</span> partResult<span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">partList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                parts<span class="token punctuation">[</span>partNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Part</span><span class="token punctuation">(</span>partNumber<span class="token punctuation">,</span> part<span class="token punctuation">.</span><span class="token function">etag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                partNumber<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            minioTemplate<span class="token punctuation">.</span><span class="token function">completeMultipartUpload</span><span class="token punctuation">(</span><span class="token string">&quot;pearl-buckent&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> uploadId<span class="token punctuation">,</span> parts<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前端代码中，我们在文件上传成功事件中调用后台合并接口：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 单个文件上传成功</span>
<span class="token function">onFileSuccess</span><span class="token punctuation">(</span><span class="token parameter">rootFile<span class="token punctuation">,</span> file<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;单个文件上传成功&#39;</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 调用后台合并文件</span>
  <span class="token keyword">const</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 文件名</span>
  <span class="token keyword">const</span> uploadId <span class="token operator">=</span> file<span class="token punctuation">.</span>chunkUrlData<span class="token punctuation">.</span>uploadId<span class="token punctuation">;</span> <span class="token comment">// 分片数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/file/completeMultipartUpload&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">objectName</span><span class="token operator">:</span> fileName<span class="token punctuation">,</span>
      <span class="token literal-property property">uploadId</span><span class="token operator">:</span> uploadId<span class="token punctuation">,</span>
      <span class="token literal-property property">bucketName</span><span class="token operator">:</span> <span class="token string">&#39;pearl-buckent&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;合并完成&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-测试" tabindex="-1"><a class="header-anchor" href="#_2-4-测试" aria-hidden="true">#</a> 2.4. 测试</h3><p>首先添加一个文件，可以看到打印了<code>uploadId</code>和每个分块上传的URL：</p><figure><img src="https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724204550517.png" alt="image-20220724204550517" tabindex="0" loading="lazy"><figcaption>image-20220724204550517</figcaption></figure>`,26),d={href:"https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},m=n("figure",null,[n("img",{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724204612100.png",alt:"image-20220724204612100",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220724204612100")],-1),v=n("p",null,"查看Minio 控制台，可以看到文件大小都一致。",-1),b=n("figure",null,[n("img",{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724204641755.png",alt:"image-20220724204641755",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20220724204641755")],-1),g=n("p",null,"下载上传的文件，进行播放，发现一切正常，说明基本上就实现该功能了，可能还会有其他小问题，就需要开发时进行严格的测试并修改了。",-1),y=n("h2",{id:"参考文章",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考文章","aria-hidden":"true"},"#"),s(" 参考文章")],-1),f={href:"https://yunyanchengyu.blog.csdn.net/article/details/123429986",target:"_blank",rel:"noopener noreferrer"};function w(h,S){const a=l("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[s("本案例基于"),n("a",k,[s("Spring Boot集成Minio"),t(a)])]),r,n("p",null,[s("点击开始按钮，可以看到多个分片的"),n("a",d,[s("并发"),t(a)]),s("请求，最后调用了合并文件接口，并返回了true。")]),m,v,b,g,y,n("p",null,[n("a",f,[s("Minio入门系列【18】Minio+vue-uploader 分片上传方案及案例详解（源码文尾附上）"),t(a)])])])}const N=e(i,[["render",w],["__file","minio-uploader.html.vue"]]);export{N as default};
